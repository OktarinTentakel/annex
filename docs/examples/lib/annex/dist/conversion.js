/*!
 * @oktarintentakel/annex v0.1.18-beta
 */
/*!
 * Module Conversion
 */
const MODULE_NAME="Conversion";import{isInt,isArray,orDefault}from"./basic.js";import{pad,trim}from"./strings.js";const UPPER_CHARS="ABCDEFGHIJKLMNOPQRSTUVWXYZ",LOWER_CHARS="abcdefghijklmnopqrstuvwxyz",NUMBERS="0123456789",BASE_ALPHABETS={64:`${UPPER_CHARS}${LOWER_CHARS}${NUMBERS}+/`,63:`${NUMBERS}${UPPER_CHARS}${LOWER_CHARS}_`,36:`${NUMBERS}${UPPER_CHARS}`,26:UPPER_CHARS,16:`${NUMBERS}${UPPER_CHARS.slice(0,6)}`,10:NUMBERS,8:NUMBERS.slice(0,8),2:NUMBERS.slice(0,2)},BASE64_ALPHABET=BASE_ALPHABETS[64];function buildAlphabet(e="buildAlphabet",t=64,o=!1){let r;if(t=orDefault(t,64),isInt(t)){if(t<2||t>64)throw new Error(`${MODULE_NAME}:${e} | base not usable, smaller than 2 or larger than 64`);if(o&&t<3)throw new Error(`${MODULE_NAME}:${e} | base not usable for chunks, smaller than 3`);for(let e of Object.keys(BASE_ALPHABETS).sort())if(Number(e)>=t){r=BASE_ALPHABETS[e].slice(0,t);break}}else r=[],isArray(t)||(t=`${t}`.split("")),t.forEach((e=>{r=r.concat(`${e}`.split(""))})),r=Array.from(new Set(r)),r.sort(((e,t)=>{const o=BASE64_ALPHABET.indexOf(e),r=BASE64_ALPHABET.indexOf(t);return o<0&&r<0?e===t?0:e<t?-1:1:o<0?1:r<0?-1:o===r?0:o<r?-1:1})),r=r.join("");if(r.length<2||r.length>64)throw new Error(`${MODULE_NAME}:${e} | alphabet not usable, must have between two and 64 chars`);if(o&&r.length<3)throw new Error(`${MODULE_NAME}:${e} | alphabet not usable for chunks, less than 3 chars`);return r}function calculateNeededPages(e){const t=Math.floor(e/2);let o=0,r=e,n=r;for(;n<64;)o++,o<=t&&r--,n=(o+1)*r;return o}function buildPageMap(e){const t=e.length,o=calculateNeededPages(t),r=Math.floor(t/2),n=[""];let s,a;for(let t=1;t<=o;t++)s=t%r,a=Math.ceil(t/r),n.push(pad("",e[s>0?s-1:r-1],a));return n}function buildCharMap(e,t){const o=t.length,r=calculateNeededPages(o),n=Math.floor(o/2),s=t.slice(Math.min(r,n)),a=s.length,l={};let i,c;for(let t in BASE64_ALPHABET.split(""))i=t%a,c=Math.floor(t/a),l[BASE64_ALPHABET[t]]=`${e[c]}${s[i]}`;return l}function stringToBase64(e){return btoa(String.fromCodePoint(...(new TextEncoder).encode(`${e}`))).replaceAll("=","")}function base64ToString(e,t="base64ToString"){let o=null;try{o=(new TextDecoder).decode(Uint8Array.from(atob(`${e}`),(e=>e.codePointAt(0))))}catch(o){throw new Error(`${MODULE_NAME}:${t} | cannot decode "${e}"`)}return o}function base10toBaseX(e,t){const o=t.length;let r,n="",s=e;if(0!==s)for(;0!==s;)r=s%o,s=Math.floor(s/o),n=`${t[r]}${n}`;else n=`${t[0]}`;return n}function baseXToBase10(e,t){e=`${e}`.split("").reverse().join("");const o=t.length;let r=0;for(let n=0;n<e.length;n++)r+=Math.pow(o,n)*t.indexOf(e[n]);return r}export function toBaseX(e,t=64,o=!1,r=!1,n=6){const s="toBaseX",a=isInt(e),l=a&&e<0;e=a?`${Math.abs(e)}`:`${e}`,o=orDefault(o,!1,"bool"),r=orDefault(r,!1,"bool"),n=orDefault(n,10,"int");const i=buildAlphabet(s,t,r);if(i.includes("{")||i.includes("}"))throw new Error(`${MODULE_NAME}:${s} | invalid alphabet, must not contain "{" or "}"`);let c="",f=0,u="";if(o){if(c=stringToBase64(e),64===t)return c;const o=buildCharMap(buildPageMap(i),i);for(let e of c)u+=o[e]}else{c=a?base10toBaseX(e,BASE64_ALPHABET):stringToBase64(e);const o=[],s=r?i.slice(1):i,l=r?i[0]:"";if(r){let e=0;for(;e<c.length;)o.push(c.slice(e,e+n)),e+=n}else o.push(c);for(let e of o){if(f=baseXToBase10(e,BASE64_ALPHABET),!r&&10===t){u+=f;break}u+=`${l}${base10toBaseX(f,s)}`}""!==l&&(u=u.slice(1))}u=`${l?"-":""}${u}`;const E=`${fromBaseX(u,t,o,r,a)}`;if(E!==`${l?"-":""}${e}`)throw new Error(`${MODULE_NAME}:${s} | critical error, encoded value "${u}" not decodable to "${e}", is "${E}" instead; if this looks "cut off", this may be a problem with JS max safe integer size (safe value length for number-based conversion is just ~8 chars), try using character mapping or chunks to circumvent this problem`);return u}export function fromBaseX(e,t=64,o=!1,r=!1,n=!1){const s="fromBaseX";n=!!n||isInt(e)||`${e}`.startsWith("{")&&`${e}`.endsWith("}"),e=`${e}`,n&&(e=trim(e,["{","}"]));const a=n&&e.startsWith("-");if(a&&(e=e.slice(1)),o=orDefault(o,!1,"bool"),r=orDefault(r,!1,"bool"),64===t&&!o&&!r&&!n)return base64ToString(e,s);const l=buildAlphabet(s,t,r);if(l.includes("{")||l.includes("}"))throw new Error(`${MODULE_NAME}:${s} | invalid alphabet, must not contain "{" or "}"`);let i,c="",f=0;if(o){const t=buildCharMap(buildPageMap(l),l),o=Object.fromEntries(Object.entries(t).map((([e,t])=>[t,e]))),r=Object.keys(o).sort(((e,t)=>e.length===t.length?0:e.length>t.length?-1:1));let n=!1;for(;""!==e;){for(let t of r)if(n=!1,e.startsWith(t)){n=!0,c+=o[t],e=e.slice(t.length);break}if(!n)throw new Error(`${MODULE_NAME}:${s} | unknown token at start of "${e}", likely due to non-matching alphabet`)}return i=base64ToString(c,s),a&&(i=`-${i}`),i}{i="";const t=r?l.slice(1):l,o=r?l[0]:"",u=r?e.split(o):[e];for(let e of u)f=baseXToBase10(e,t),n?i+=`${f}`:c+=base10toBaseX(f,BASE64_ALPHABET);return""===i&&(i=base64ToString(c,s),a&&(i=`-${i}`)),!r&&n&&(i=Number(i),a&&i>=0&&(i=-i)),i}}
//# sourceMappingURL=conversion.js.map

{"version":3,"file":"requests.js","names":["MODULE_NAME","warn","hasValue","orDefault","isPlainObject","assert","Deferred","getType","merge","createNode","insertNode","schedule","countermand","createFetchRequest","url","options","useNative","__methodName__","method","includes","toUpperCase","timeout","window","__ANNEX_USE_NATIVE_FETCH__","execute","res","request","XMLHttpRequest","headerKeys","Set","headerEntries","Map","response","ok","parseInt","status","statusText","responseURL","text","Promise","resolve","responseText","json","then","JSON","parse","blob","Blob","clone","headers","keys","entries","get","key","has","open","ontimeout","reject","Error","onload","getAllResponseHeaders","replace","m","value","add","set","onerror","withCredentials","credentials","i","hasOwnProperty","setRequestHeader","send","body","timeoutTimer","abortController","AbortController","signal","fetch","catch","error","abort","createJsonRequest","strict","contentType","resolveTo","insertTarget","dataId","responseContentType","split","trim","message","element","stringify","setAttribute","target","position","RestfulJsonClient","__className__","invalidRequestMethodMessage","dataValidationMessage","baseUrl","baseOptions","config","constructor","this","location","origin","startsWith","URL","params","URLSearchParams","data","path","replaceAll","header","toFlatEntries","search","toString","param","append","delete","executeRequest","post","executeRequestWithPayload","put","patch","getConfig","contentTypeHeader","finally","obj","Object","flattenedEntries","entryIndex","entryKey","entryVal","entryValType","Array","from","forEach","val","push","createJsRequest","resolveSourcedOnInsert","sourceElementValue","fInsertAndResolve","js","src","createCssRequest","media","css","linkAttrs","href","rel","createHtmlRequest","selector","selectAll","html","isWholeDocument","isDocument","fragmentNode","DOMParser","parseFromString","documentElement","querySelectorAll","querySelector","children","length","item","concat","outerHTML","elements","reverse","visitUrl","tokenValue","tokenPlaceholder","Math","abs","deferred","outerNode","document","createElement","innerHTML","iframe","firstChild","fOnLoad","removeEventListener","clearTimeout","loadTimeout","setTimeout","removeChild","addEventListener","appendChild"],"sources":["requests.js"],"mappings":";;;AAQA,MAAMA,YAAc,kBAMZC,SAAW,sBACXC,SAAUC,UAAWC,cAAeC,OAAQC,SAAUC,YAAc,oBACpEC,UAAY,sBACZC,WAAYC,eAAiB,uBAC7BC,SAAUC,gBAAkB,qBAsG7B,SAASC,mBAAmBC,EAAKC,EAAQ,KAAMC,GAAU,GAC/D,MAAMC,EAAiB,qBAkBvB,OAhBAZ,OAAOH,SAASY,GAAM,GAAGd,eAAeiB,oBACxCF,EAAUZ,UAAUY,EAAS,CAAC,GAC9BV,OAAOD,cAAcW,GAAU,GAAGf,eAAeiB,oCAEjDF,EAAQG,OAASf,UAAUY,EAAQG,OAAQ,MAAO,OAClDH,EAAQG,OAAS,CAAC,MAAO,OAAQ,MAAO,QAAS,OAAQ,UAAW,UAAUC,SAASJ,EAAQG,OAAOE,eACnGL,EAAQG,OAAOE,cACf,MAIHL,EAAQM,QAAUlB,UAAUY,EAAQM,QAAS,IAAO,OACpDN,EAAQM,QAAWN,EAAQM,QAAU,EAAK,EAAIN,EAAQM,QAEtDL,EAAYM,OAAOC,4BAA8BP,EAE1C,CACNF,MACAC,UACAS,SAAWR,GAA6B,SAAdA,KAA2B,UAAWM,QAC7D,WACD,MACCG,EAAM,IAAInB,SACVoB,EAAU,IAAIC,eACdC,EAAa,IAAIC,IACjBC,EAAgB,IAAIC,IACpBC,EAAW,KAAM,CAChBC,GAAMC,SAASR,EAAQS,OAAQ,KAAO,KAASD,SAASR,EAAQS,OAAQ,KAAO,IAC/EC,WAAaV,EAAQU,WACrBD,OAAST,EAAQS,OACjBrB,IAAMY,EAAQW,YACdC,KAAO,IAAMC,QAAQC,QAAQd,EAAQe,cACrCC,KAAO,IAAMH,QAAQC,QAAQd,EAAQe,cAAcE,KAAKC,KAAKC,OAC7DC,KAAO,IAAMP,QAAQC,QAAQ,IAAIO,KAAK,CAACrB,EAAQM,YAC/CgB,MAAQhB,EACRiB,QAAU,CACTC,KAAI,IACItB,EAERuB,QAAO,IACCrB,EAERsB,IAAIC,GACIvB,EAAcsB,IAAIC,GAE1BC,IAAID,GACIzB,EAAW0B,IAAID,MA+B1B,GAzBA3B,EAAQ6B,KAAKxC,EAAQG,OAAQJ,GAAK,GAE9BC,EAAQM,QAAU,IACrBK,EAAQL,QAAUN,EAAQM,QAC1BK,EAAQ8B,UAAY,KAAQ/B,EAAIgC,OAAO,IAAIC,MAAM,WAAW,GAG7DhC,EAAQiC,OAAS,KAChBjC,EAAQkC,wBAAwBC,QAAQ,gCAAgC,CAACC,EAAGT,EAAKU,KAChFV,EAAM,GAAGA,IACTzB,EAAWoC,IAAIX,GACXvB,EAAcwB,IAAID,GACrBvB,EAAcmC,IAAIZ,EAAK,GAAGvB,EAAcsB,IAAIC,MAAQU,KAEpDjC,EAAcmC,IAAIZ,EAAK,GAAGU,IAC3B,IAGDtC,EAAIe,QAAQR,IAAW,EAGxBN,EAAQwC,QAAUzC,EAAIgC,OAEtB/B,EAAQyC,gBAA2C,YAAxBpD,EAAQqD,YAE/BlE,SAASa,EAAQkC,SACpB,IAAK,IAAIoB,KAAKtD,EAAQkC,QACjBlC,EAAQkC,QAAQqB,eAAeD,IAClC3C,EAAQ6C,iBAAiBF,EAAGtD,EAAQkC,QAAQoB,IAO/C,OAFA3C,EAAQ8C,KAAKzD,EAAQ0D,MAAQ,MAEtBhD,CACR,EACE,WACD,MACCA,EAAM,IAAInB,SACVe,EAAUN,EAAQM,QAGnB,IAAIqD,EAAcC,EAsBlB,OApBKtD,EAAU,GAAO,oBAAqBC,SAC1CqD,EAAkB,IAAIC,gBACtB7D,EAAQ8D,OAASF,EAAgBE,QAGlCvD,OAAOwD,MAAMhE,EAAKC,GAChB4B,MAAKX,IACLpB,YAAY8D,GACZjD,EAAIe,QAAQR,EAAS,IAErB+C,OAAMC,IACNpE,YAAY8D,GACZjD,EAAIgC,OAAOuB,EAAM,IAId3D,EAAU,GAAO,oBAAqBC,SAC1CoD,EAAe/D,SAASU,GAAS,KAAQsD,EAAgBM,OAAO,KAG1DxD,CACR,EAEH,QAgFO,SAASyD,kBAAkBpE,EAAKC,EAAQ,KAAMC,GAAU,EAAOmE,GAAO,GAC5E,MAECC,EAAc,mBAef,OAZID,IACEjF,SAASa,KACbA,EAAU,CAAC,GAGPb,SAASa,EAAQkC,WACrBlC,EAAQkC,QAAU,CAAC,GAGpBlC,EAAQkC,QAAgB,OAAImC,GAGtB,CACNtE,MACAC,UACA,OAAAS,CAAQ6D,EAAU,SAAUC,EAAa,KAAMC,EAAO,MACrD,MAAM9D,EAAM,IAAInB,SAqDhB,OAnDAO,mBAAmBC,EAAKC,EAASC,GAAWQ,UAC1CmB,MAAKX,IACL,MAAMwD,GACLxD,EAASiB,QAAQG,IAAI,iBAAmBpB,EAASiB,QAAQG,IAAI,iBAAmB,IAC/EqC,MAAM,KAAK,GAAGC,OAEhB,GAAIF,IAAwBJ,EAAa,CACxC,MAAMO,EAAU,GAAG3F,iDAAiDwF,yDACpE,GAAIL,EACH,MAAM,IAAIzB,MAAMiC,GAEhB1F,KAAK0F,EAEP,CAEA,OAAO3D,EAASU,MAAM,IAEtBC,MAAKD,IACL,MAAMkD,EAAUnF,WAAW,mCAAmCmC,KAAKiD,UAAUnD,gBAK7E,GAJe,OAAX6C,GACHK,EAAQE,aAAa,UAAW,GAAGP,KAGhCrF,SAASoF,GAAe,CAC3B,MACCS,EAAST,EAAaM,SAAWN,EACjCU,EAAWV,EAAaU,UAAY,KAGpB,OAAbA,EACHtF,WAAWqF,EAAQH,GAEnBlF,WAAWqF,EAAQH,EAASI,EAE9B,CAEAvE,EAAIe,QACY,YAAd6C,EACEO,EAEc,QAAdP,EACCzC,KAAKiD,UAAUnD,GACfA,EAEJ,IAEDqC,OAAMC,IACNvD,EAAIgC,OAAOuB,EAAM,IAIZvD,CACR,EAEF,CAoDA,MAAMwE,kBAELC,GAAiB,oBACjBC,GAA+B,yBAC/BC,GAAyB,4BACzBC,GAAW,KACXC,GAAe,KACftF,IAAa,EACbmE,IAAU,EACVoB,GAAU,KAaV,WAAAC,CAAYH,EAAQ,KAAMC,EAAY,KAAMtF,GAAU,EAAOmE,GAAO,GACnEsB,MAAKJ,EAAWlG,UAAUkG,EAAS/E,OAAOoF,SAASC,OAAQ,OAC3DF,MAAKH,EAAelG,cAAckG,GAAeA,EAAc,CAAC,EAChEG,MAAKzF,EAAab,UAAUa,GAAW,EAAO,QAC9CyF,MAAKtB,EAAUhF,UAAUgF,GAAQ,EAAM,SAElCsB,MAAKJ,EAASO,WAAW,OAASH,MAAKJ,EAASO,WAAW,OAC/DH,MAAKJ,EAAW,GAAG/E,OAAOoF,SAASC,SAASF,MAAKJ,KAGlDI,MAAKF,EAAU,CACdzF,IAAM,IAAI+F,IAAI,GAAIJ,MAAKJ,GACvBtF,QAAU,CAAC,EACX+F,OAAS,IAAIC,gBACbC,KAAO,CAAC,EAEV,CAaA,IAAAC,CAAKA,GAKJ,OAJAA,EAAO,GAAGA,IAAOC,WAAW,QAAS,IAErCT,MAAKF,EAAQzF,IAAM,IAAI+F,IAAII,EAAMR,MAAKJ,GAE/BI,IACR,CAeA,OAAA1F,CAAQA,GAUP,OAPIb,SAASa,IACZV,OAAOD,cAAcW,GAAU,GAAGf,eAAeyG,MAAKP,4CACtDO,MAAKF,EAAQxF,QAAUA,GAEvB0F,MAAKF,EAAQxF,QAAU,CAAC,EAGlB0F,IACR,CAcA,MAAAU,CAAO9D,EAAKU,GAaX,OAZAV,EAAM,GAAGA,IAEJjD,cAAcqG,MAAKF,EAAQxF,QAAQkC,WACvCwD,MAAKF,EAAQxF,QAAQkC,QAAU,CAAC,GAG7B/C,SAAS6D,GACZ0C,MAAKF,EAAQxF,QAAQkC,QAAQI,GAAO,GAAGU,WAEhC0C,MAAKF,EAAQxF,QAAQkC,QAAQI,GAG9BoD,IACR,CAcA,MAAAK,CAAOA,GASN,OARI5G,SAAS4G,GACZL,MAAKF,EAAQO,OAAS,IAAIC,gBAAgB3G,cAAc0G,GAAUL,MAAKW,EAAeN,GAAUA,GAEhGL,MAAKF,EAAQO,OAAS,IAAIC,gBAG3BN,MAAKF,EAAQzF,IAAIuG,OAASZ,MAAKF,EAAQO,OAAOQ,WAEvCb,IACR,CAgBA,KAAAc,CAAMlE,EAAKU,EAAOyD,GAAO,GAgBlB,OAfAnE,EAAM,GAAGA,IACfmE,EAASrH,UAAUqH,GAAQ,EAAO,QAExBtH,SAAS6D,GACdyD,EACSf,MAAKF,EAAQO,OAAOU,OAAOnE,EAAK,GAAGU,KAEnC0C,MAAKF,EAAQO,OAAO7C,IAAIZ,EAAK,GAAGU,KAG7B0C,MAAKF,EAAQO,OAAOW,OAAOpE,GAGtCoD,MAAKF,EAAQzF,IAAIuG,OAASZ,MAAKF,EAAQO,OAAOQ,WAEvCb,IACd,CAcA,IAAAO,CAAKA,GAUJ,OAPI9G,SAAS8G,IACZ3G,OAAOD,cAAc4G,GAAO,GAAGhH,eAAeyG,MAAKP,YAAsCO,MAAKL,KAC9FK,MAAKF,EAAQS,KAAOA,GAEpBP,MAAKF,EAAQS,KAAO,CAAC,EAGfP,IACR,CAaA,GAAArD,GACC,OAAOqD,MAAKiB,EAAgB,MAC7B,CAcA,IAAAC,CAAKX,EAAK,MACT,OAAOP,MAAKmB,EAA2B,OAAQZ,EAChD,CAcA,GAAAa,CAAIb,EAAK,MACR,OAAOP,MAAKmB,EAA2B,MAAOZ,EAC/C,CAcA,KAAAc,CAAMd,EAAK,MACV,OAAOP,MAAKmB,EAA2B,QAASZ,EACjD,CAaA,SACC,OAAOP,MAAKiB,EAAgB,SAC7B,CAmBA,SAAAK,GACC,OAAOvH,MAAMiG,MAAKF,EAAS,CAACxF,QAAUP,MAAMiG,MAAKH,EAAcG,MAAKF,EAAQxF,UAC7E,CAeA,EAAA2G,CAAgBxG,GAGfA,EAASA,EAAOE,cAChBf,OACC,CAAC,MAAO,UAAUc,SAASD,GAC3B,GAAGlB,eAAeyG,MAAKP,uBAAsCO,MAAKN,MAAiCjF,MAGpG,MAAMH,EAAUP,MAAMiG,MAAKH,EAAcG,MAAKF,EAAQxF,QAAS,CAACG,WAChE,OAAOgE,kBAAkBuB,MAAKF,EAAQzF,IAAKC,EAAS0F,MAAKzF,EAAYyF,MAAKtB,GAAS3D,SACpF,CAgBA,EAAAoG,CAA2B1G,EAAQ8F,EAAK,MACvC,MAAM/F,EAAiB,6BAEvBC,EAASA,EAAOE,cAChBf,OACC,CAAC,OAAQ,MAAO,SAASc,SAASD,GAClC,GAAGlB,eAAeyG,MAAKP,KAAkBjF,OAAoBwF,MAAKN,MAAiCjF,MAEhGhB,SAAS8G,IACZ3G,OAAOD,cAAc4G,GAAO,GAAGhH,eAAeyG,MAAKP,KAAkBjF,OAAoBwF,MAAKL,KAG/F,MAAM4B,EAAoB,eAC1BvB,KAAKU,OAAOa,EAAmB,mCAC/B,MACCvD,EAAO7B,KAAKiD,UAAUmB,GAAQP,MAAKF,EAAQS,MAC3CjG,EAAUP,MAAMiG,MAAKH,EAAcG,MAAKF,EAAQxF,QAAS,CAACG,SAAQuD,SAEnE,OAAOS,kBAAkBuB,MAAKF,EAAQzF,IAAKC,EAAS0F,MAAKzF,EAAYyF,MAAKtB,GACxE3D,UACAyG,SAAQ,KACRxB,KAAKU,OAAOa,EAAmB,KAAK,GAGvC,CAeA,EAAAZ,CAAec,GACd,MACC/E,EAAUgF,OAAOhF,QAAQ+E,GACzBE,EAAmB,GAGpB,IAAI,MAAMC,KAAclF,EAAS,CAChC,MACCmF,EAAWnF,EAAQkF,GAAY,GAC/BE,EAAWpF,EAAQkF,GAAY,GAC/BG,EAAejI,QAAQgI,GAGpB,CAAC,QAAS,OAAOpH,SAASqH,GAC7BC,MAAMC,KAAKH,GAAUI,SAAQC,IAC5BR,EAAiBS,KAAK,CAACP,EAAU,GAAGM,KAAO,IAG5CR,EAAiBS,KAAK,CAACP,EAAU,GAAGC,KAEtC,CAEA,OAAOH,CACR,SAIOnC,0BA8FD,SAAS6C,gBAAgBhI,EAAKC,EAAQ,KAAMC,GAAU,EAAOmE,GAAO,GAC1E,MAECC,EAAc,yBAef,OAZID,IACEjF,SAASa,KACbA,EAAU,CAAC,GAGPb,SAASa,EAAQkC,WACrBlC,EAAQkC,QAAU,CAAC,GAGpBlC,EAAQkC,QAAgB,OAAImC,GAGtB,CACNtE,MACAC,UACA,OAAAS,CAAQ6D,EAAU,UAAWC,EAAa,KAAMC,EAAO,KAAMwD,GAAuB,GACnF,MACCC,EAAqB,kBACrBvH,EAAM,IAAInB,SACV2I,EAAoB,CAACrD,EAASsD,EAAG,MAKhC,GAJe,OAAX3D,GACHK,EAAQE,aAAa,UAAW,GAAGP,KAGhCrF,SAASoF,GAAe,CAC3B,MACCS,EAAST,EAAaM,SAAWN,EACjCU,EAAWV,EAAaU,UAAY,KAGhC+C,IACJnD,EAAQjC,OAAS,KAAQlC,EAAIe,QAAuB,QAAd6C,EAAuB6D,EAAKtD,EAAQ,EAC1EA,EAAQ1B,QAAUc,IAAWvD,EAAIgC,OAAOuB,EAAM,GAG9B,OAAbgB,EACHtF,WAAWqF,EAAQH,GAEnBlF,WAAWqF,EAAQH,EAASI,EAE9B,EAGEX,IAAc2D,GACV3D,IAAc2D,GAAuBD,IAE1CtH,EAAIe,QAAuB,QAAd6C,EAAuB6D,EAAKtD,EAC1C,EAiCF,OA7BIP,IAAc2D,EACjBC,EAAkBxI,WAAW,SAAU,CAAC0I,IAAMrI,KAE9CD,mBAAmBC,EAAKC,EAASC,GAAWQ,UAC1CmB,MAAKX,IACL,MAAMwD,GACLxD,EAASiB,QAAQG,IAAI,iBAAmBpB,EAASiB,QAAQG,IAAI,iBAAmB,IAC/EqC,MAAM,KAAK,GAAGC,OAEhB,GAAIF,IAAwBJ,EAAa,CACxC,MAAMO,EAAU,GAAG3F,+CAAiDwF,qEACpE,GAAIL,EACH,MAAM,IAAIzB,MAAMiC,GAEhB1F,KAAK0F,EAEP,CAEA,OAAO3D,EAASM,MAAM,IAEtBK,MAAKuG,IACLD,EAAkBxI,WAAW,SAAU,KAAMyI,GAAKA,EAAG,IAErDnE,OAAMC,IACNvD,EAAIgC,OAAOuB,EAAM,IAKbvD,CACR,EAEF,QA4FO,SAAS2H,iBAAiBtI,EAAKC,EAAQ,KAAMC,GAAU,EAAOmE,GAAO,GAC3E,MAECC,EAAc,WAgBf,OAZID,IACEjF,SAASa,KACbA,EAAU,CAAC,GAGPb,SAASa,EAAQkC,WACrBlC,EAAQkC,QAAU,CAAC,GAGpBlC,EAAQkC,QAAgB,OAAImC,GAGtB,CACNtE,MACAC,UACA,OAAAS,CAAQ6D,EAAU,UAAWC,EAAa,KAAMC,EAAO,KAAM8D,EAAM,MAAON,GAAuB,GAChG,MACCC,EAAqB,kBACrBvH,EAAM,IAAInB,SACV2I,EAAoB,CAACrD,EAAS0D,EAAI,MAKjC,GAJe,OAAX/D,GACHK,EAAQE,aAAa,UAAW,GAAGP,KAGhCrF,SAASoF,GAAe,CAC3B,MACCS,EAAST,EAAaM,SAAWN,EACjCU,EAAWV,EAAaU,UAAY,KAGhC+C,IACJnD,EAAQjC,OAAS,KAAQlC,EAAIe,QAAuB,QAAd6C,EAAuBiE,EAAM1D,EAAQ,EAC3EA,EAAQ1B,QAAUc,IAAWvD,EAAIgC,OAAOuB,EAAM,GAG9B,OAAbgB,EACHtF,WAAWqF,EAAQH,GAEnBlF,WAAWqF,EAAQH,EAASI,EAE9B,EAGEX,IAAc2D,GACV3D,IAAc2D,GAAuBD,IAE1CtH,EAAIe,QAAuB,QAAd6C,EAAuBiE,EAAM1D,EAC3C,EAIF,GAAIP,IAAc2D,EAAoB,CACrC,MAAMO,EAAY,CAACC,KAAO1I,EAAK2I,IAAM,cACvB,QAAVJ,IACHE,EAAUF,MAAQA,GAEnBJ,EAAkBxI,WAAW,OAAQ8I,GACtC,MACC1I,mBAAmBC,EAAKC,EAASC,GAAWQ,UAC1CmB,MAAKX,IACL,MAAMwD,GACLxD,EAASiB,QAAQG,IAAI,iBAAmBpB,EAASiB,QAAQG,IAAI,iBAAmB,IAC/EqC,MAAM,KAAK,GAAGC,OAEhB,GAAIF,IAAwBJ,EAAa,CACxC,MAAMO,EAAU,GAAG3F,gDAAiDwF,gDACpE,GAAIL,EACH,MAAM,IAAIzB,MAAMiC,GAEhB1F,KAAK0F,EAEP,CAEA,OAAO3D,EAASM,MAAM,IAEtBK,MAAK2G,IACLL,EAAkBxI,WAAW,QAAoB,QAAV4I,EAAmB,CAACA,SAAS,KAAMC,GAAMA,EAAI,IAEpFvE,OAAMC,IACNvD,EAAIgC,OAAOuB,EAAM,IAKpB,OAAOvD,CACR,EAEF,QA+FO,SAASiI,kBAAkB5I,EAAKC,EAAQ,KAAMC,GAAU,EAAOmE,GAAO,GAC5E,MAECC,EAAc,YAef,OAZID,IACEjF,SAASa,KACbA,EAAU,CAAC,GAGPb,SAASa,EAAQkC,WACrBlC,EAAQkC,QAAU,CAAC,GAGpBlC,EAAQkC,QAAgB,OAAImC,GAGtB,CACNtE,MACAC,UACA,OAAAS,CAAQ6D,EAAU,UAAWC,EAAa,KAAMC,EAAO,KAAMoE,EAAS,KAAMC,GAAU,GACrF,MACCnI,EAAM,IAAInB,SAwGX,OArEAO,mBAAmBC,EAAKC,EAASC,GAAWQ,UAC1CmB,MAAKX,IACL,MAAMwD,GACLxD,EAASiB,QAAQG,IAAI,iBAAmBpB,EAASiB,QAAQG,IAAI,iBAAmB,IAC/EqC,MAAM,KAAK,GAAGC,OAChB,GAAIF,IAAwBJ,EAAa,CACxC,MAAMO,EAAU,GAAG3F,iDAAiDwF,kDACpE,GAAIL,EACH,MAAM,IAAIzB,MAAMiC,GAEhB1F,KAAK0F,EAEP,CAEA,OAAO3D,EAASM,MAAM,IAEtBK,MAAKkH,IACL,MACCC,EAAkBD,EAAK1I,SAAS,UAAY0I,EAAK1I,SAAS,SAC1D4I,EAAaD,GACRD,EAAK1I,SAAS,UAAY0I,EAAK1I,SAAS,UACxC0I,EAAK1I,SAAS,UAAY0I,EAAK1I,SAAS,SAE7C6I,GAAe,IAAKC,WAClBC,gBAAgBL,EAAM,aACrBM,gBAGJ,IAAIvE,EAGFA,EAFE1F,SAASyJ,GACRC,EACOI,EAAaI,iBAAiB,GAAGT,KAEjCK,EAAaK,cAAc,GAAGV,KAE/BG,EACAE,EACAD,EACAC,EAAaM,SAEbN,EAAaK,cAAc,QAAQC,SAG1CpK,SAAS0F,GAAS2E,UAEpB3E,EADsB,IAAnBA,EAAQ2E,OACD,KACmB,IAAnB3E,EAAQ2E,OACR3E,EAAQ4E,KAAK,GAEb/B,MAAMC,KAAK9C,IAInB1F,SAASyJ,KACZE,EAAO,GACH3J,SAAS0F,IACX,GAAG6E,OAAO7E,GAAU+C,SAAQ/C,IAC5BiE,GAAQjE,EAAQ8E,SAAS,KA3FT,EAAC9E,EAASiE,EAAK,MAClC,GAAI3J,SAAS0F,GAAU,CACtB,MAAM+E,EAAW,GAAGF,OAAO7E,GAQ3B,GANe,OAAXL,GACHoF,EAAShC,SAAQ/C,IAChBA,EAAQE,aAAa,UAAW,GAAGP,IAAS,IAI1CrF,SAASoF,GAAe,CAC3B,MACCS,EAAST,EAAaM,SAAWN,EACjCU,EAAWV,EAAaU,UAAY,KAGjC,CAAC,SAAU,cAAe,UAAW,cAAc7E,SAAS6E,IAC/D2E,EAASC,UAGVD,EAAShC,SAAQ/C,IACC,OAAbI,EACHtF,WAAWqF,EAAQH,GAEnBlF,WAAWqF,EAAQH,EAASI,EAC7B,GAEF,CACD,CAEAvE,EAAIe,QAAuB,QAAd6C,EAAuBwE,EAAOjE,EAAQ,EAkEnDqD,CAAkBrD,EAASiE,EAAK,IAEhC9E,OAAMC,IACNvD,EAAIgC,OAAOuB,EAAM,IAIZvD,CACR,EAEF,QAiDO,SAASoJ,SAAS/J,EAAKO,EAAQ,IAAMyJ,EAAW,KAAMC,EAAiB,SAC7EjK,EAAMX,UAAUW,EAAK,GAAI,OACzBO,EAAU2J,KAAKC,IAAI9K,UAAUkB,EAAS,IAAM,QAC5CyJ,EAAa3K,UAAU2K,EAAY,KAAM,OACzCC,EAAmB5K,UAAU4K,EAAkB,QAAS,OACxDjK,EAAMZ,SAAS4K,GAAchK,EAAIoG,WAAW,IAAI6D,KAAqBD,GAAchK,EAEnF,MACCoK,EAAW,IAAI5K,SACf6K,EAAYC,SAASC,cAAc,OAGpCF,EAAUG,UAAY,4LAQbxK,yBAEP4E,OAEF,MACC6F,EAASJ,EAAUK,WACnBC,EAAU,KACTF,EAAOG,oBAAoB,OAAQD,GACnCnK,OAAOqK,aAAaC,GAGpBtK,OAAOuK,YAAW,KACjBT,SAAS3G,KAAKqH,YAAYP,GAC1BL,EAAS1I,QAAQ1B,EAAI,GACnB,IAAI,EAER8K,EAActK,OAAOuK,YAAW,KAC/BN,EAAOG,oBAAoB,OAAQD,GACnCL,SAAS3G,KAAKqH,YAAYP,GAC1BL,EAASzH,OAAO,IAAIC,MAAM,WAAW,GACnCrC,GAMJ,OAHAkK,EAAOQ,iBAAiB,OAAQN,GAChCL,SAAS3G,KAAKuH,YAAYT,GAEnBL,CACR","ignoreList":[],"sourcesContent":["/*!\n * Module Requests\n */\n\n/**\n * @namespace Requests\n */\n\nconst MODULE_NAME = 'Requests';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {warn} from './logging.js';\nimport {hasValue, orDefault, isPlainObject, assert, Deferred, getType} from './basic.js';\nimport {merge} from './objects.js';\nimport {createNode, insertNode} from './elements.js';\nimport {schedule, countermand} from './timers.js';\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace Requests:createFetchRequest\n */\n\n/**\n * @typedef FetchResponse\n * @type {Object}\n *\n * @property {Boolean} ok - returns true if the request received a status in the OK range (200-299)\n * @property {Number} status - contains the status code of the response, e.g. 404 for a not found resource, 200 for a success\n * @property {String} statusText - a message related to the status attribute, e.g. OK for a status 200\n * @property {Function} clone -  will return another object with the same shape and content as response\n * @property {Function} text - will return the response content as plain text\n * @property {Function} json - will return the response content as JSON\n * @property {Function} blob - will return the response content as a (binary) blob\n * @property {Object} headers - we do not implement a full spec-compliant Headers class, but emulate some of the functionality\n * @property {Function} headers.keys - returns an Iterable containing the key for every header in the response, transform to array with Array.from\n * @property {Function} headers.entries - returns an Iterable containing the [key, value] pairs for every header in the response, transform to array with Array.from\n * @property {Function} headers.get - returns the value associated with the given key\n * @property {Function} headers.has - returns a boolean asserting the existence of a value for the given key among the response headers\n *\n * @memberof Requests\n */\n\n/**\n * @typedef FetchRequestExecuteFunction\n * @type {Function}\n *\n * @returns {Basic.Deferred<Requests.FetchResponse>}\n *\n * @memberof Requests\n */\n\n/**\n * @typedef FetchRequest\n * @type {Object}\n *\n * @property {String} url - the request URL\n * @property {Object} options - the options with which the request has been created\n * @property {String} options.method - the request method\n * @property {?Object} options.headers - the set headers for the request\n * @property {?String} options.credentials - the credentials setting for the request\n * @property {?String} options.body - the provided request body of the request\n * @property {?Number} [options.timeout=10000] - milliseconds until the request fails due to a timeout\n * @property {Requests.FetchRequestExecuteFunction} execute - call this to execute the request\n *\n * @memberof Requests\n */\n\n/**\n * This method creates a ponyfilled fetch request based on \"unfetch\", but basically fulfilling the signature of\n * a native fetch request.\n *\n * The reasoning for this is to provide a baseline fetch implementation for all requests of annex, as long as we\n * still support non ES6 browsers or old implementations in any way. During transpilation with core js, fetch does\n * not automatically get polyfilled, so we need to do this ourselves and to actually stay testable, we provide the\n * polyfill as long as we might target legacy contexts. As soon as we drop legacy contexts, we can immediately also\n * remove this method and its uses.\n *\n * The function signature is the same as \"unfetch\"'s and all non-implemented features are absent here as well.\n *\n * All usual responses (40X and 50X as well) resolve, only uncompletable requests, such as those being prevented by a\n * general network error, reject with the provided error.\n *\n * Set __ANNEX_USE_NATIVE_FETCH__ on window (true/false/'auto') to force useNative setting for all annex requests\n * globally.\n *\n * @param {String} url - the complete URL to query\n * @param {?Object} [options=null] - the request options\n * @param {?String} [options.method='GET'] - indicates the request method to be performed on the target resource (one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"HEAD\", \"OPTIONS\" or \"DELETE\")\n * @param {?Object} [options.headers] - an object containing additional information to be sent with the request (e.g. {\"Content-Type\": \"application/json\"} to indicate a JSON-typed request body)\n * @param {?String} [options.credentials] - accepts an \"include\" string, which will allow both CORS and same origin requests to work with cookies; the method won't send or receive cookies otherwise; the \"same-origin\" value is not supported\n * @param {?Object|String} [options.body] - the content to be transmitted in request's body; common content types include FormData, JSON, Blob, ArrayBuffer or plain text\n * @param {?Boolean|String} [useNative=false] - determines if the native Fetch implementation of the browser should be used, true forces usage, \"auto\" uses it only if available\n * @returns {Requests.FetchRequest} use this via the \"execute\" method, which resolves to a FetchResponse or rejects with error in case of a technical request error (request is not completable)\n *\n * @memberof Requests:createFetchRequest\n * @alias createFetchRequest\n * @see https://github.com/developit/unfetch\n * @see https://github.com/developit/unfetch#fetchurl-string-options-object\n * @example\n * createFetchRequest('/foo').execute()\n *     .then(r => r.text())\n *         .then(txt => console.log(txt))\n * ;\n * createFetchRequest(\n *     '/bear',\n *     {\n *         method : 'POST',\n *         headers : {'Content-Type' : 'application/json'},\n *         body : JSON.stringify({hungry : true})\n *     })\n *         .execute()\n *             .then(r => { open(r.headers.get('location')); return r.json(); })\n * ;\n */\nexport function createFetchRequest(url, options=null, useNative=false){\n\tconst __methodName__ = 'createFetchRequest';\n\n\tassert(hasValue(url), `${MODULE_NAME}:${__methodName__} | no url given`);\n\toptions = orDefault(options, {});\n\tassert(isPlainObject(options), `${MODULE_NAME}:${__methodName__} | options must be plain object`);\n\n\toptions.method = orDefault(options.method, 'GET', 'str');\n\toptions.method = ['GET', 'POST', 'PUT', 'PATCH', 'HEAD', 'OPTIONS', 'DELETE'].includes(options.method.toUpperCase())\n\t\t? options.method.toUpperCase()\n\t\t: 'GET'\n\t;\n\n\t// 0 would be unlimited/unset\n\toptions.timeout = orDefault(options.timeout, 10000, 'int');\n\toptions.timeout = (options.timeout < 0) ? 0 : options.timeout;\n\n\tuseNative = window.__ANNEX_USE_NATIVE_FETCH__ ?? useNative;\n\n\treturn {\n\t\turl,\n\t\toptions,\n\t\texecute : !useNative || ((useNative === 'auto') && !('fetch' in window))\n\t\t\t? function(){\n\t\t\t\tconst\n\t\t\t\t\tres = new Deferred(),\n\t\t\t\t\trequest = new XMLHttpRequest(),\n\t\t\t\t\theaderKeys = new Set(),\n\t\t\t\t\theaderEntries = new Map(),\n\t\t\t\t\tresponse = () => ({\n\t\t\t\t\t\tok : (parseInt(request.status, 10) >= 200) && (parseInt(request.status, 10) <= 299),\n\t\t\t\t\t\tstatusText : request.statusText,\n\t\t\t\t\t\tstatus : request.status,\n\t\t\t\t\t\turl : request.responseURL,\n\t\t\t\t\t\ttext : () => Promise.resolve(request.responseText),\n\t\t\t\t\t\tjson : () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\t\t\t\tblob : () => Promise.resolve(new Blob([request.response])),\n\t\t\t\t\t\tclone : response,\n\t\t\t\t\t\theaders : {\n\t\t\t\t\t\t\tkeys(){\n\t\t\t\t\t\t\t\treturn headerKeys;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tentries(){\n\t\t\t\t\t\t\t\treturn headerEntries;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tget(key){\n\t\t\t\t\t\t\t\treturn headerEntries.get(key);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\thas(key){\n\t\t\t\t\t\t\t\treturn headerKeys.has(key);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t;\n\n\t\t\t\trequest.open(options.method, url, true);\n\n\t\t\t\tif( options.timeout > 0 ){\n\t\t\t\t\trequest.timeout = options.timeout;\n\t\t\t\t\trequest.ontimeout = () => { res.reject(new Error('timeout')); };\n\t\t\t\t}\n\n\t\t\t\trequest.onload = () => {\n\t\t\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\t\t\tkey = `${key}`;\n\t\t\t\t\t\theaderKeys.add(key);\n\t\t\t\t\t\tif( headerEntries.has(key) ){\n\t\t\t\t\t\t\theaderEntries.set(key, `${headerEntries.get(key)},${value}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\theaderEntries.set(key, `${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tres.resolve(response());\n\t\t\t\t};\n\n\t\t\t\trequest.onerror = res.reject;\n\n\t\t\t\trequest.withCredentials = (options.credentials === 'include');\n\n\t\t\t\tif( hasValue(options.headers) ){\n\t\t\t\t\tfor( let i in options.headers ){\n\t\t\t\t\t\tif( options.headers.hasOwnProperty(i) ){\n\t\t\t\t\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trequest.send(options.body ?? null);\n\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\t: function(){\n\t\t\t\tconst\n\t\t\t\t\tres = new Deferred(),\n\t\t\t\t\ttimeout = options.timeout\n\t\t\t\t;\n\n\t\t\t\tlet timeoutTimer, abortController;\n\n\t\t\t\tif( (timeout > 0) && ('AbortController' in window) ){\n\t\t\t\t\tabortController = new AbortController();\n\t\t\t\t\toptions.signal = abortController.signal;\n\t\t\t\t}\n\n\t\t\t\twindow.fetch(url, options)\n\t\t\t\t\t.then(response => {\n\t\t\t\t\t\tcountermand(timeoutTimer);\n\t\t\t\t\t\tres.resolve(response);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tcountermand(timeoutTimer);\n\t\t\t\t\t\tres.reject(error);\n\t\t\t\t\t})\n\t\t\t\t;\n\n\t\t\t\tif( (timeout > 0) && ('AbortController' in window) ){\n\t\t\t\t\ttimeoutTimer = schedule(timeout, () => { abortController.abort(); });\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}\n\t};\n}\n\n\n\n/**\n * @namespace Requests:createJsonRequest\n */\n\n/**\n * @typedef JsonFetchResponse\n * @type {Object|HTMLElement|String}\n *\n * @memberof Requests\n */\n\n/**\n * @typedef JsonFetchRequestExecuteFunction\n * @type {Function}\n *\n * @param {?String} [resolveTo='object'] - defines what the response should resolve to, may either be \"object\", \"element\" or \"raw\"\n * @param {?HTMLElement|Object} [insertTarget=null] - defines if the retrieved value should be inserted as a dom element and if so where; if this is an element, the value gets appended into that as a script tag, otherwise the properties below apply\n * @param {?HTMLElement} [insertTarget.element] - target element in relation to which the resolved value should be inserted into the dom\n * @param {?String} [insertTarget.position] - defines where, in relation to the target element, the resolved value will be inserted, see insertNode for more details\n * @param {?String} [dataId=null] - if you need an identifier, to find inserted elements again after they are inserted into dom, you can define an id here, which will be set as the \"data-id\" attribute on the created node\n * @returns {Basic.Deferred<Requests.JsonFetchResponse>}\n *\n * @memberof Requests\n * @see insertNode\n */\n\n/**\n * @typedef JsonFetchRequest\n * @type {Object}\n *\n * @property {String} url - the request URL\n * @property {Object} options - the options with which the request has been created\n * @property {String} options.method - the request method\n * @property {?Object} options.headers - the set headers for the request\n * @property {?String} options.credentials - the credentials setting for the request\n * @property {?String} options.body - the provided request body of the request\n * @property {?Number} [options.timeout=10000] - milliseconds until the request fails due to a timeout\n * @property {Requests.JsonFetchRequestExecuteFunction} execute - call this to execute the request\n *\n * @memberof Requests\n */\n\n/**\n * This method creates a special version of a FetchRequest specifically designed to retrieve JSON data.\n *\n * Usually you'll want to retrieve JSON as a PlainObject, so that's the default resolve value here.\n * However, you may also specify to retrieve the raw JSON or let the method handle the creation of a DOM element\n * for you and return that, ready to be used/inserted however you like.\n *\n * If you plan on inserting the result into DOM anyway you'll like the fact that this is also directly possible, by\n * defining an insert target. BTW: Inserting does not automatically change the resolve value, those are separate\n * concerns.\n *\n * @param {String} url - the complete URL to query\n * @param {?Object} [options=null] - the request options (see: createFetchRequests for details)\n * @param {?Boolean|String} [useNative=false] - determines if the native Fetch implementation of the browser should be used, true forces usage, \"auto\" uses it only if available\n * @param {?Boolean} [strict=true] - if true, enforces \"application/json\" as accept header as well as response mime type, if false, accept header is not set and different mime type only results in warning\n * @throws error in strict mode if response content type is not \"application/json\"\n * @returns {Requests.JsonFetchRequest} use this via the \"execute\" method, which resolves to a FetchResponse or rejects with error in case of a technical request error (request is not completable)\n *\n * @memberof Requests:createJsonRequest\n * @alias createJsonRequest\n * @see createFetchRequest\n * @example\n * createJsonRequest('message.json').execute()\n *     .then(json => { alert(json.someProperty); })\n * ;\n * createJsonRequest('/dev/config.json')\n *     .execute('element', null, 'config-json-id')\n *         .then(jsonElement => { document.querySelector('main').appendChild(jsonElement); })\n * ;\n * createJsonRequest('https://foobar.com/config.json')\n *     .execute('raw', {element : document.body, position : 'prepend'}, 'config-json-id')\n *         .then(rawJson => { console.log(`\"${rawJson}\" has been inserted at the beginning of the document's body`); })\n * ;\n */\nexport function createJsonRequest(url, options=null, useNative=false, strict=true){\n\tconst\n\t\t__methodName__ = 'createJsonRequest',\n\t\tcontentType = 'application/json'\n\t;\n\n\tif( strict ){\n\t\tif( !hasValue(options) ){\n\t\t\toptions = {};\n\t\t}\n\n\t\tif( !hasValue(options.headers) ){\n\t\t\toptions.headers = {};\n\t\t}\n\n\t\toptions.headers['Accept'] = contentType;\n\t}\n\n\treturn {\n\t\turl,\n\t\toptions,\n\t\texecute(resolveTo='object', insertTarget=null, dataId=null){\n\t\t\tconst res = new Deferred();\n\n\t\t\tcreateFetchRequest(url, options, useNative).execute()\n\t\t\t\t.then(response => {\n\t\t\t\t\tconst responseContentType = (\n\t\t\t\t\t\tresponse.headers.get('content-type') ?? response.headers.get('Content-Type') ?? ''\n\t\t\t\t\t).split(';')[0].trim();\n\n\t\t\t\t\tif( responseContentType !== contentType ){\n\t\t\t\t\t\tconst message = `${MODULE_NAME}:${__methodName__} | content-type \"${responseContentType}\" is not valid for JSON, expecting \"application/json\"`;\n\t\t\t\t\t\tif( strict ){\n\t\t\t\t\t\t\tthrow new Error(message);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twarn(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn response.json();\n\t\t\t\t})\n\t\t\t\t.then(json => {\n\t\t\t\t\tconst element = createNode(`<script type=\"application/json\">${JSON.stringify(json)}</script>`);\n\t\t\t\t\tif( dataId !== null ){\n\t\t\t\t\t\telement.setAttribute('data-id', `${dataId}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif( hasValue(insertTarget) ){\n\t\t\t\t\t\tconst\n\t\t\t\t\t\t\ttarget = insertTarget.element ?? insertTarget,\n\t\t\t\t\t\t\tposition = insertTarget.position ?? null\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\tif( position === null ){\n\t\t\t\t\t\t\tinsertNode(target, element);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinsertNode(target, element, position);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tres.resolve(\n\t\t\t\t\t\t(resolveTo === 'element')\n\t\t\t\t\t\t\t? element\n\t\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t\t(resolveTo === 'raw')\n\t\t\t\t\t\t\t\t? JSON.stringify(json)\n\t\t\t\t\t\t\t\t: json\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tres.reject(error);\n\t\t\t\t})\n\t\t\t;\n\n\t\t\treturn res;\n\t\t}\n\t};\n}\n\n\n\n/**\n * @namespace Requests:RestfulJsonClient\n */\n\n/**\n * @typedef RestfulJsonClientConfig\n * @type {Object}\n *\n * @property {URL} url - the current request URL, build from baseUrl and path\n * @property {Object} options - the current options with which requests are been created, build from baseOptions and options, see createFetchRequest for details\n * @property {URLSearchParams} params - the current URL params\n * @property {Object} data - the current payload to be sent with requests like POST and PUT\n *\n * @memberof Requests\n * @see createFetchRequest\n */\n\n/**\n * This class provides a dedicated client for restful operations against an API via JSON payloads and responses.\n *\n * Internally this implementation uses createJsonRequest to actually request stuff, while this class\n * is a wrapper, providing central configuration, such as a base URL and options like credentials,\n * as well as standard methods for HTTP verbs and setup things like setting headers.\n *\n * See class documentation below for details.\n *\n * @memberof Requests:RestfulJsonClient\n * @name RestfulJsonClient\n *\n * @see RestfulJsonClient\n * @see createJsonRequest\n * @see Requests.FetchRequest\n * @example\n * const client = new RestfulJsonClient('https://jsonplaceholder.typicode.com', {credentials : 'include'});\n * const postJson = await client\n *   .path('/posts')\n * \t .params({\n * \t   ids : [1, 2],\n * \t   q : 'lorem'\n * \t })\n * \t .data({\n * \t   title : 'foo',\n * \t   body : 'bar',\n * \t   userId : 1,\n * \t })\n * \t .post()\n * ;\n */\nclass RestfulJsonClient {\n\n\t#__className__ = 'RestfulJsonClient';\n\t#invalidRequestMethodMessage = 'invalid request method';\n\t#dataValidationMessage = 'data must be plain object';\n\t#baseUrl = null;\n\t#baseOptions = null;\n\t#useNative = false;\n\t#strict = true;\n\t#config = null;\n\n\t/**\n\t * Creates a new RestfulJsonClient\n\t *\n\t * @param {?String} [baseUrl=window.location.origin] - the base URL for all queries, based on which final request URLs will be built, adding the paths, may be absolute or relative to current origin\n\t * @param {?Object} [baseOptions=null] - the base request options, can be expanded later via options() (see createFetchRequests for details)\n\t * @param {?Boolean|String} [useNative=false] - determines if the native Fetch implementation of the browser should be used, true forces usage, \"auto\" uses it only if available\n\t * @param {?Boolean} [strict=true] - if true, enforces \"application/json\" as accept header as well as response mime type, if false, accept header is not set and different mime type only results in warning\n\t *\n\t * @see createJsonRequest\n     * @see Requests.FetchRequest\n\t */\n\tconstructor(baseUrl=null, baseOptions=null, useNative=false, strict=true){\n\t\tthis.#baseUrl = orDefault(baseUrl, window.location.origin, 'str');\n\t\tthis.#baseOptions = isPlainObject(baseOptions) ? baseOptions : {};\n\t\tthis.#useNative = orDefault(useNative, false, 'bool');\n\t\tthis.#strict = orDefault(strict, true, 'bool');\n\n\t\tif( !this.#baseUrl.startsWith('//') && this.#baseUrl.startsWith('/') ){\n\t\t\tthis.#baseUrl = `${window.location.origin}${this.#baseUrl}`;\n\t\t}\n\n\t\tthis.#config = {\n\t\t\turl : new URL('', this.#baseUrl),\n\t\t\toptions : {},\n\t\t\tparams : new URLSearchParams(),\n\t\t\tdata : {},\n\t\t};\n\t}\n\n\n\n\t/**\n\t * Sets the current request path, which will be concatenated to baseUrl.\n\t *\n\t * @param {String} path - the current path to request from baseUrl\n\t * @returns {RestfulJsonClient}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/food')).path('/pizzas').get();\n\t */\n\tpath(path){\n\t\tpath = `${path}`.replaceAll(/^\\/+/g, '');\n\n\t\tthis.#config.url = new URL(path, this.#baseUrl);\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Sets the current request options, which will be merged with baseOptions.\n\t *\n\t * @param {?Object} options - plain options object to merge with baseOptions to define current request options (see createFetchRequest for details and defaults); if nullish, baseOptions will be used\n\t * @throws error if given options are not a plain object\n\t * @returns {RestfulJsonClient}\n\t *\n\t * @see createJsonRequest\n\t * @see Requests.FetchRequest\n\t * @example\n\t * (new RestfulJsonClient('/run-forrest-run')).options({timeout : 1});\n\t */\n\toptions(options){\n\t\tconst __methodName__ = 'options';\n\n\t\tif( hasValue(options) ){\n\t\t\tassert(isPlainObject(options), `${MODULE_NAME}:${this.#__className__}.${__methodName__} | options must be plain object`);\n\t\t\tthis.#config.options = options;\n\t\t} else {\n\t\t\tthis.#config.options = {};\n\t\t}\n\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Sets a header for all subsequent requests.\n\t * Use a nullish value to unset a header.\n\t *\n\t * @param {String} key - the header to set for all following requests\n\t * @param {?String} value - the header's value; a nullish value will remove the header again\n\t * @returns {RestfulJsonClient}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/run-forrest-run')).header('X-Test', 42).header('X-Test', null);\n\t */\n\theader(key, value){\n\t\tkey = `${key}`;\n\n\t\tif( !isPlainObject(this.#config.options.headers) ){\n\t\t\tthis.#config.options.headers = {};\n\t\t}\n\n\t\tif( hasValue(value) ){\n\t\t\tthis.#config.options.headers[key] = `${value}`;\n\t\t} else {\n\t\t\tdelete this.#config.options.headers[key];\n\t\t}\n\n\t\treturn this;\n\t}\n\n\n\n\t/**\n\t * Sets query parameters to be added to the request URL.\n\t *\n\t * @param {?*} params - query parameters to set on the current URL, this parameter takes all regular definitions for URLSearchParams constructor, as well as flat plain objects, which may also have arrays as values; if nullish, parameters are emptied\n\t * @returns {RestfulJsonClient}\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams\n\t * @example\n\t * (new RestfulJsonClient('/food/search')).params({q : 'delicious pizza'}).get();\n\t */\n\tparams(params){\n\t\tif( hasValue(params) ){\n\t\t\tthis.#config.params = new URLSearchParams(isPlainObject(params) ? this.#toFlatEntries(params) : params);\n\t\t} else {\n\t\t\tthis.#config.params = new URLSearchParams();\n\t\t}\n\n\t\tthis.#config.url.search = this.#config.params.toString();\n\n\t\treturn this;\n\t}\n\n\n\n    /**\n     * Sets a query parameter to be added to the request URL.\n     * Use a nullish value to unset a parameter.\n     *\n     * @param {String} key - the parameter name to set\n     * @param {?String} value - the parameter's value; a nullish value will remove the param again\n     * @param {?Boolean} [append=false] - if true, the parameter is appended instead of overwritten\n     * @returns {RestfulJsonClient}\n     *\n     * @example\n     * (new RestfulJsonClient('/food/search')).param('q', 'delicious pizza').get();\n     */\n\tparam(key, value, append=false){\n        key = `${key}`;\n\t\tappend = orDefault(append, false, 'bool');\n\n        if( hasValue(value) ){\n\t\t\tif( append ){\n                this.#config.params.append(key, `${value}`);\n\t\t\t} else {\n                this.#config.params.set(key, `${value}`);\n\t\t\t}\n        } else {\n            delete this.#config.params.delete(key);\n        }\n\n        this.#config.url.search = this.#config.params.toString();\n\n        return this;\n\t}\n\n\n\n\t/**\n\t * Sets data payload for POST, PUT and PATCH requests.\n\t *\n\t * @param {?Object} data - data payload to send with the next POST, PUT or PATCH request, this parameter will set a permanent payload; for one-off payloads, use the verb method's data parameter; if nullish, data will be emptied\n\t * @throws error if given data is not a plain object\n\t * @returns {RestfulJsonClient}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/food/order')).data({pizza : 'diavolo'}).post();\n\t */\n\tdata(data){\n\t\tconst __methodName__ = 'data';\n\n\t\tif( hasValue(data) ){\n\t\t\tassert(isPlainObject(data), `${MODULE_NAME}:${this.#__className__}.${__methodName__} | ${this.#dataValidationMessage}`);\n\t\t\tthis.#config.data = data;\n\t\t} else {\n\t\t\tthis.#config.data = {};\n\t\t}\n\n\t\treturn this;\n\t}\n\n\n\n\t/**\n\t * Queries the current URL with GET.\n\t *\n\t * @throws error in strict mode if response content type is not \"application/json\"\n\t * @returns {Basic.Deferred<Requests.JsonFetchResponse>}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/food/')).path('pizza').get();\n\t */\n\tget(){\n\t\treturn this.#executeRequest('GET');\n\t}\n\n\n\n\t/**\n\t * Queries the current URL with POST using defined payload/data.\n\t *\n\t * @param {?Object} [data=null] - one-off data to use in this request, will replace any central data defined before and will only be valid for this request\n\t * @throws error in strict mode if response content type is not \"application/json\"\n\t * @returns {Basic.Deferred<Requests.JsonFetchResponse>}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/food/order')).post({pizza : 'diavolo'});\n\t */\n\tpost(data=null){\n\t\treturn this.#executeRequestWithPayload('POST', data);\n\t}\n\n\n\n\t/**\n\t * Queries the current URL with PUT using defined payload/data.\n\t *\n\t * @param {?Object} [data=null] - one-off data to use in this request, will replace any central data defined before and will only be valid for this request\n\t * @throws error in strict mode if response content type is not \"application/json\"\n\t * @returns {Basic.Deferred<Requests.JsonFetchResponse>}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/food/deliver')).put({pizza : 'diavolo'});\n\t */\n\tput(data=null){\n\t\treturn this.#executeRequestWithPayload('PUT', data);\n\t}\n\n\n\n\t/**\n\t * Queries the current URL with PATCH using defined payload/data.\n\t *\n\t * @param {?Object} [data=null] - one-off data to use in this request, will replace any central data defined before and will only be valid for this request\n\t * @throws error in strict mode if response content type is not \"application/json\"\n\t * @returns {Basic.Deferred<Requests.JsonFetchResponse>}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/software')).data({version : 2}).patch();\n\t */\n\tpatch(data=null){\n\t\treturn this.#executeRequestWithPayload('PATCH', data);\n\t}\n\n\n\n\t/**\n\t * Queries the current URL with DELETE.\n\t *\n\t * @throws error in strict mode if response content type is not \"application/json\"\n\t * @returns {Basic.Deferred<Requests.JsonFetchResponse>}\n\t *\n\t * @example\n\t * (new RestfulJsonClient('/')).data({command : 'rm -rf'}).delete();\n\t */\n\tdelete(){\n\t\treturn this.#executeRequest('DELETE');\n\t}\n\n\n\n\t/**\n\t * Returns the current config.\n\t *\n\t * baseUrl is retrievable from the url property (via origin).\n\t * Options are the merged result of baseOptions and currently set option values.\n\t *\n\t * Changes to this object, will not reflect in the client config directly, use the client's methods to\n\t * alter config values.\n\t *\n\t * @returns {RestfulJsonClientConfig} a clone of the current config\n\t *\n\t * @example\n\t * client.getConfig().url.toString()\n\t * => https://pizza.com\n\t */\n\tgetConfig(){\n\t\treturn merge(this.#config, {options : merge(this.#baseOptions, this.#config.options)});\n\t}\n\n\n\n\t/**\n\t * Creates and executes an HTTP request without a payload, such as GET and DELETE.\n\t * Uses current config from class to construct request.\n\t *\n\t * @param {String} method - either GET or DELETE\n\t * @throws error in strict mode if response content type is not \"application/json\"\n\t * @returns Basic.Deferred<Requests.JsonFetchResponse>\n\t *\n\t * @example\n\t * this.#executeRequest('GET');\n\t */\n\t#executeRequest(method){\n\t\tconst __methodName__ = '#executeRequest';\n\n\t\tmethod = method.toUpperCase();\n\t\tassert(\n\t\t\t['GET', 'DELETE'].includes(method),\n\t\t\t`${MODULE_NAME}:${this.#__className__}.${__methodName__} | ${this.#invalidRequestMethodMessage} \"${method}\"`\n\t\t);\n\n\t\tconst options = merge(this.#baseOptions, this.#config.options, {method});\n\t\treturn createJsonRequest(this.#config.url, options, this.#useNative, this.#strict).execute();\n\t}\n\n\n\n\t/**\n\t * Creates and executes an HTTP request with a payload, such as POST and PUT.\n\t * Uses current config from class to construct request.\n\t *\n\t * @param {String} method - either POST, PUT or PATCH\n\t * @param {?Object} [data=null] - the data to send to the request URL as payload\n\t * @throws error in strict mode if response content type is not \"application/json\"\n\t * @returns Basic.Deferred<Requests.JsonFetchResponse>\n\t *\n\t * @example\n\t * this.#executeRequestWithPayload('POST', {foo : 'bar'});\n\t */\n\t#executeRequestWithPayload(method, data=null){\n\t\tconst __methodName__ = '#executeRequestWithPayload';\n\n\t\tmethod = method.toUpperCase();\n\t\tassert(\n\t\t\t['POST', 'PUT', 'PATCH'].includes(method),\n\t\t\t`${MODULE_NAME}:${this.#__className__}.${__methodName__} | ${this.#invalidRequestMethodMessage} \"${method}\"`\n\t\t);\n\t\tif( hasValue(data) ){\n\t\t\tassert(isPlainObject(data), `${MODULE_NAME}:${this.#__className__}.${__methodName__} | ${this.#dataValidationMessage}`);\n\t\t}\n\n\t\tconst contentTypeHeader = 'Content-Type';\n\t\tthis.header(contentTypeHeader, 'application/json; charset=UTF-8');\n\t\tconst\n\t\t\tbody = JSON.stringify(data ?? this.#config.data),\n\t\t\toptions = merge(this.#baseOptions, this.#config.options, {method, body})\n\t\t;\n\t\treturn createJsonRequest(this.#config.url, options, this.#useNative, this.#strict)\n\t\t\t.execute()\n\t\t\t.finally(() => {\n\t\t\t\tthis.header(contentTypeHeader, null);\n\t\t\t})\n\t\t;\n\t}\n\n\n\n\t/**\n\t * Transforms a dictionary to an entries array, but handles list values, such as arrays and sets, specially, by\n\t * iterating them and creating a new entry for each list value, thereby producing a notation, which is compatible\n\t * to URLSearchParams, based on an object with a readable notation.\n\t *\n\t * @param {Object} obj - the object to transform into a flattened array of entries\n\t * @returns {Array<Array<String, String>>} flat array of entries\n\t *\n\t * @private\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\t */\n\t#toFlatEntries(obj){\n\t\tconst\n\t\t\tentries = Object.entries(obj),\n\t\t\tflattenedEntries = []\n\t\t;\n\n\t\tfor(const entryIndex in entries ){\n\t\t\tconst\n\t\t\t\tentryKey = entries[entryIndex][0],\n\t\t\t\tentryVal = entries[entryIndex][1],\n\t\t\t\tentryValType = getType(entryVal)\n\t\t\t;\n\n\t\t\tif( ['array', 'set'].includes(entryValType) ){\n\t\t\t\tArray.from(entryVal).forEach(val => {\n\t\t\t\t\tflattenedEntries.push([entryKey, `${val}`]);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tflattenedEntries.push([entryKey, `${entryVal}`]);\n\t\t\t}\n\t\t}\n\n\t\treturn flattenedEntries;\n\t}\n\n}\n\nexport {RestfulJsonClient};\n\n\n\n/**\n * @namespace Requests:createJsRequest\n */\n\n/**\n * @typedef JsFetchResponse\n * @type {HTMLElement|String}\n *\n * @memberof Requests\n */\n\n/**\n * @typedef JsFetchRequestExecuteFunction\n * @type {Function}\n *\n * @param {?String} [resolveTo='element'] - defines what the response should resolve to, may either be \"element\", \"raw\" or \"sourced-element\" (which is the special case to insert a script with a src instead of doing a real request)\n * @param {?HTMLElement|Object} [insertTarget=null] - defines if the retrieved value should be inserted as a dom element and if so where; if this is an element, the value gets appended into that as a script tag, otherwise the properties below apply\n * @param {?HTMLElement} [insertTarget.element] - target element in relation to which the resolved value should be inserted into the dom\n * @param {?String} [insertTarget.position] - defines where, in relation to the target element, the resolved value will be inserted, see insertNode for more details\n * @param {?String} [dataId=null] - if you need an identifier, to find inserted elements again after they are inserted into dom, you can define an id here, which will be set as the \"data-id\" attribute on the created node\n * @param {?Boolean} [resolveSourcedOnInsert=false] - normally sourced elements resolve on load to work with the request as far as possible, but if you want to ignore the request after insertion, you may set this parameter to \"true\", resulting in immediate resolution after insertion\n * @returns {Basic.Deferred<Requests.JsFetchResponse>}\n *\n * @memberof Requests\n * @see insertNode\n */\n\n/**\n * @typedef JsFetchRequest\n * @type {Object}\n *\n * @property {String} url - the request URL\n * @property {Object} options - the options with which the request has been created\n * @property {String} options.method - the request method\n * @property {?Object} options.headers - the set headers for the request\n * @property {?String} options.credentials - the credentials setting for the request\n * @property {?String} options.body - the provided request body of the request\n * @property {?Number} [options.timeout=10000] - milliseconds until the request fails due to a timeout\n * @property {Requests.JsFetchRequestExecuteFunction} execute - call this to execute the request\n *\n * @memberof Requests\n */\n\n/**\n * This method creates a special version of a FetchRequest specifically designed to retrieve JavaScript.\n *\n * Usually you'll want to retrieve JavaScript to include it into a page to execute the script on the page\n * currently open, so the default mode of this method is to resolve to a directly usable script tag, you may\n * insert into the DOM wherever you please. However, you may also specify to retrieve the raw JavaScript source.\n *\n * Be aware that requesting JavaScript from an unsecure source is a very big security risk. Do not load and execute\n * source from a source you do not fully trust!\n *\n * If you plan on inserting the result into DOM anyway you'll like the fact that this is also directly possible, by\n * defining an insert target. In case you decide to insert the result directly, the default is an inline script, but\n * you may also choose to insert a sourced script tag, loading a script on insertion and executing in asynchronously\n * in turn. This is not strictly a programmatic \"request\" anymore, but very handy. If you are inserting a sourced\n * script, the Deferred resolves on load by default (and rejects on error), thereby keeping the general idea of\n * working with a request. But you may also define a parameter on execute to force resolve immediately on insert.\n *\n * BTW: Inserting does not automatically change the resolve value, those are separate concerns.\n *\n * @param {String} url - the complete URL to query\n * @param {?Object} [options=null] - the request options (see: createFetchRequests for details)\n * @param {?Boolean|String} [useNative=false] - determines if the native Fetch implementation of the browser should be used, true forces usage, \"auto\" uses it only if available\n * @param {?Boolean} [strict=true] - if true, enforces \"application/javascript\" as accept header as well as response mime type, if false, accept header is not set and different mime type only results in warning\n * @throws error in strict mode if response content type is not \"application/javascript\"\n * @returns {Requests.JsFetchRequest} use this via the \"execute\" method, which resolves to a FetchResponse or rejects with error in case of a technical request error (request is not completable)\n *\n * @memberof Requests:createJsRequest\n * @alias createJsRequest\n * @see createFetchRequest\n * @example\n * createJsRequest('/js/test.js')\n *     .execute()\n *         .then(jsElement => { document.body.appendChild(jsElement); })\n * ;\n * createJsRequest('/js/test.js')\n *     .execute(null, injectTarget, 'request-2')\n *         .then(jsElement => { alert(`has been injected: \"${jsElement.textContent}\"`); })\n * ;\n * createJsRequest('/js/test.js')\n *     .execute('raw', {element : injectTarget, position : 'beforebegin'})\n *         .then(rawJs => { alert(`has been injected: \"${rawJs}\"`); })\n * ;\n * createJsRequest('/js/test.js')\n *     .execute('sourced-element', {element : injectTarget, position : 'prepend'}, 'request-4')\n *         .then(jsElement => { alert(`has been injected: \"${jsElement.getAttribute('data-id')}\"`); })\n * ;\n */\nexport function createJsRequest(url, options=null, useNative=false, strict=true){\n\tconst\n\t\t__methodName__ = 'createJsRequest',\n\t\tcontentType = 'application/javascript'\n\t;\n\n\tif( strict ){\n\t\tif( !hasValue(options) ){\n\t\t\toptions = {};\n\t\t}\n\n\t\tif( !hasValue(options.headers) ){\n\t\t\toptions.headers = {};\n\t\t}\n\n\t\toptions.headers['Accept'] = contentType;\n\t}\n\n\treturn {\n\t\turl,\n\t\toptions,\n\t\texecute(resolveTo='element', insertTarget=null, dataId=null, resolveSourcedOnInsert=false){\n\t\t\tconst\n\t\t\t\tsourceElementValue = 'sourced-element',\n\t\t\t\tres = new Deferred(),\n\t\t\t\tfInsertAndResolve = (element, js='') => {\n\t\t\t\t\tif( dataId !== null ){\n\t\t\t\t\t\telement.setAttribute('data-id', `${dataId}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif( hasValue(insertTarget) ){\n\t\t\t\t\t\tconst\n\t\t\t\t\t\t\ttarget = insertTarget.element ?? insertTarget,\n\t\t\t\t\t\t\tposition = insertTarget.position ?? null\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\tif( !resolveSourcedOnInsert ){\n\t\t\t\t\t\t\telement.onload = () => { res.resolve((resolveTo === 'raw') ? js : element); };\n\t\t\t\t\t\t\telement.onerror = error => { res.reject(error); };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( position === null ){\n\t\t\t\t\t\t\tinsertNode(target, element);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinsertNode(target, element, position);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(\n\t\t\t\t\t\t(resolveTo !== sourceElementValue)\n\t\t\t\t\t\t|| ((resolveTo === sourceElementValue) && resolveSourcedOnInsert)\n\t\t\t\t\t){\n\t\t\t\t\t\tres.resolve((resolveTo === 'raw') ? js : element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t;\n\n\t\t\tif( resolveTo === sourceElementValue ){\n\t\t\t\tfInsertAndResolve(createNode('script', {src : url}));\n\t\t\t} else {\n\t\t\t\tcreateFetchRequest(url, options, useNative).execute()\n\t\t\t\t\t.then(response => {\n\t\t\t\t\t\tconst responseContentType = (\n\t\t\t\t\t\t\tresponse.headers.get('content-type') ?? response.headers.get('Content-Type') ?? ''\n\t\t\t\t\t\t).split(';')[0].trim();\n\n\t\t\t\t\t\tif( responseContentType !== contentType ){\n\t\t\t\t\t\t\tconst message = `${MODULE_NAME}:${__methodName__} | content-type \"${responseContentType}\" is not valid for JavaScript, expecting \"application/javascript\"`;\n\t\t\t\t\t\t\tif( strict ){\n\t\t\t\t\t\t\t\tthrow new Error(message);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twarn(message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn response.text();\n\t\t\t\t\t})\n\t\t\t\t\t.then(js => {\n\t\t\t\t\t\tfInsertAndResolve(createNode('script', null, js), js);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tres.reject(error);\n\t\t\t\t\t})\n\t\t\t\t;\n\t\t\t}\n\n\t\t\treturn res;\n\t\t}\n\t};\n}\n\n\n\n/**\n * @namespace Requests:createCssRequest\n */\n\n/**\n * @typedef CssFetchResponse\n * @type {HTMLElement|String}\n *\n * @memberof Requests\n */\n\n/**\n * @typedef CssFetchRequestExecuteFunction\n * @type {Function}\n *\n * @param {?String} [resolveTo='element'] - defines what the response should resolve to, may either be \"element\", \"raw\" or \"sourced-element\" (which is the special case to insert a link with a href instead of doing a real request)\n * @param {?HTMLElement|Object} [insertTarget=null] - defines if the retrieved value should be inserted as a dom element and if so where; if this is an element, the value gets appended into that as a style/link tag, otherwise the properties below apply\n * @param {?HTMLElement} [insertTarget.element] - target element in relation to which the resolved value should be inserted into the dom\n * @param {?String} [insertTarget.position] - defines where, in relation to the target element, the resolved value will be inserted, see insertNode for more details\n * @param {?String} [dataId=null] - if you need an identifier, to find inserted elements again after they are inserted into dom, you can define an id here, which will be set as the \"data-id\" attribute on the created node\n * @param {?String} [media='all'] - define the style's media attribute here to target the output device(s), could be \"screen\" or \"print\" for example\n * @param {?Boolean} [resolveSourcedOnInsert=false] - normally sourced elements resolve on load to work with the request as far as possible, but if you want to ignore the request after insertion, you may set this parameter to \"true\", resulting in immediate resolution after insertion\n * @returns {Basic.Deferred<Requests.CssFetchResponse>}\n *\n * @memberof Requests\n * @see insertNode\n */\n\n/**\n * @typedef CssFetchRequest\n * @type {Object}\n *\n * @property {String} url - the request URL\n * @property {Object} options - the options with which the request has been created\n * @property {String} options.method - the request method\n * @property {?Object} options.headers - the set headers for the request\n * @property {?String} options.credentials - the credentials setting for the request\n * @property {?String} options.body - the provided request body of the request\n * @property {?Number} [options.timeout=10000] - milliseconds until the request fails due to a timeout\n * @property {Requests.CssFetchRequestExecuteFunction} execute - call this to execute the request\n *\n * @memberof Requests\n */\n\n/**\n * This method creates a special version of a FetchRequest specifically designed to retrieve Cascading Stylesheets.\n *\n * Usually you'll want to retrieve CSS to include it into a page and thereby style something on the page\n * currently open, so the default mode of this method is to resolve to a directly usable style tag, you may\n * insert into the DOM wherever you please. However, you may also specify to retrieve the raw CSS source.\n *\n * If you plan on inserting the result into DOM anyway you'll like the fact that this is also directly possible, by\n * defining an insert target. In case you decide to insert the result directly, the default is an inline style, but\n * you may also choose to insert a sourced link tag, loading a stylesheet on insertion and adding the included styles\n * on load. This is not strictly a programmatic \"request\" anymore, but very handy. If you are inserting a sourced\n * link, the Deferred resolves on load by default (and rejects on error), thereby keeping the general idea of\n * working with a request. But you may also define a parameter on execute to force resolve immediately on insert.\n *\n * BTW: Inserting does not automatically change the resolve value, those are separate concerns.\n *\n * @param {String} url - the complete URL to query\n * @param {?Object} [options=null] - the request options (see: createFetchRequests for details)\n * @param {?Boolean|String} [useNative=false] - determines if the native Fetch implementation of the browser should be used, true forces usage, \"auto\" uses it only if available\n * @param {?Boolean} [strict=true] - if true, enforces \"text/css\" as accept header as well as response mime type, if false, accept header is not set and different mime type only results in warning\n * @throws error in strict mode if response content type is not \"text/css\"\n * @returns {Requests.CssFetchRequest} use this via the \"execute\" method, which resolves to a FetchResponse or rejects with error in case of a technical request error (request is not completable)\n *\n * @memberof Requests:createCssRequest\n * @alias createCssRequest\n * @see createFetchRequest\n * @example\n * createCssRequest('/css/test.css')\n *     .execute()\n *         .then(cssElement => { document.head.appendChild(cssElement); })\n * ;\n * createCssRequest('/css/test.css')\n *     .execute(null, injectTarget, 'request-2')\n *         .then(cssElement => { alert(`has been injected: \"${cssElement.textContent}\"`); })\n * ;\n * createCssRequest('/css/test.css')\n *     .execute('raw', {element : injectTarget, position : 'beforebegin'}, 'request-3', 'screen')\n *         .then(rawCss => { alert(`has been injected: \"${rawCss}\"`); })\n * ;\n * createCssRequest('/css/test.css')\n *     .execute('sourced-element', {element : injectTarget, position : 'prepend'}, 'request-4', 'screen')\n *         .then(cssElement => { alert(`has been injected: \"${cssElement.getAttribute('data-id')+}\"`); })\n * ;\n */\nexport function createCssRequest(url, options=null, useNative=false, strict=true){\n\tconst\n\t\t__methodName__ = 'createCssRequest',\n\t\tcontentType = 'text/css'\n\t;\n\n\n\tif( strict ){\n\t\tif( !hasValue(options) ){\n\t\t\toptions = {};\n\t\t}\n\n\t\tif( !hasValue(options.headers) ){\n\t\t\toptions.headers = {};\n\t\t}\n\n\t\toptions.headers['Accept'] = contentType;\n\t}\n\n\treturn {\n\t\turl,\n\t\toptions,\n\t\texecute(resolveTo='element', insertTarget=null, dataId=null, media='all', resolveSourcedOnInsert=false){\n\t\t\tconst\n\t\t\t\tsourceElementValue = 'sourced-element',\n\t\t\t\tres = new Deferred(),\n\t\t\t\tfInsertAndResolve = (element, css='') => {\n\t\t\t\t\tif( dataId !== null ){\n\t\t\t\t\t\telement.setAttribute('data-id', `${dataId}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif( hasValue(insertTarget) ){\n\t\t\t\t\t\tconst\n\t\t\t\t\t\t\ttarget = insertTarget.element ?? insertTarget,\n\t\t\t\t\t\t\tposition = insertTarget.position ?? null\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\tif( !resolveSourcedOnInsert ){\n\t\t\t\t\t\t\telement.onload = () => { res.resolve((resolveTo === 'raw') ? css : element); };\n\t\t\t\t\t\t\telement.onerror = error => { res.reject(error); };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( position === null ){\n\t\t\t\t\t\t\tinsertNode(target, element);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinsertNode(target, element, position);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(\n\t\t\t\t\t\t(resolveTo !== sourceElementValue)\n\t\t\t\t\t\t|| ((resolveTo === sourceElementValue) && resolveSourcedOnInsert)\n\t\t\t\t\t){\n\t\t\t\t\t\tres.resolve((resolveTo === 'raw') ? css : element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t;\n\n\t\t\tif( resolveTo === sourceElementValue ){\n\t\t\t\tconst linkAttrs = {href : url, rel : 'stylesheet'};\n\t\t\t\tif( media !== 'all' ){\n\t\t\t\t\tlinkAttrs.media = media;\n\t\t\t\t}\n\t\t\t\tfInsertAndResolve(createNode('link', linkAttrs));\n\t\t\t} else {\n\t\t\t\tcreateFetchRequest(url, options, useNative).execute()\n\t\t\t\t\t.then(response => {\n\t\t\t\t\t\tconst responseContentType = (\n\t\t\t\t\t\t\tresponse.headers.get('content-type') ?? response.headers.get('Content-Type') ?? ''\n\t\t\t\t\t\t).split(';')[0].trim();\n\n\t\t\t\t\t\tif( responseContentType !== contentType ){\n\t\t\t\t\t\t\tconst message = `${MODULE_NAME}:${__methodName__} | content-type \"${responseContentType}\" is not valid for CSS, expecting \"text/css\"`;\n\t\t\t\t\t\t\tif( strict ){\n\t\t\t\t\t\t\t\tthrow new Error(message);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twarn(message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn response.text();\n\t\t\t\t\t})\n\t\t\t\t\t.then(css => {\n\t\t\t\t\t\tfInsertAndResolve(createNode('style', (media !== 'all') ? {media} : null, css), css);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tres.reject(error);\n\t\t\t\t\t})\n\t\t\t\t;\n\t\t\t}\n\n\t\t\treturn res;\n\t\t}\n\t};\n}\n\n\n\n/**\n * @namespace Requests:createHtmlRequest\n */\n\n/**\n * @typedef HtmlFetchResponse\n * @type {HTMLElement|Array<HTMLElement>|String}\n *\n * @memberof Requests\n */\n\n/**\n * @typedef HtmlFetchRequestExecuteFunction\n * @type {Function}\n *\n * @param {?String} [resolveTo='element'] - defines what the response should resolve to, may either be \"element\" or \"raw\"\n * @param {?HTMLElement|Object} [insertTarget=null] - defines if the retrieved value should be inserted as a dom element and if so where; if this is an element, the value gets appended into that as (a) node(s), otherwise the properties below apply\n * @param {?HTMLElement} [insertTarget.element] - target element in relation to which the resolved value should be inserted into the dom\n * @param {?String} [insertTarget.position] - defines where, in relation to the target element, the resolved value will be inserted, see insertNode for more details\n * @param {?String} [dataId=null] - if you need an identifier, to find inserted elements again after they are inserted into dom, you can define an id here, which will be set as the \"data-id\" attribute on the created node(s)\n * @param {?String} [selector=null] - if you'd like to preselect something from the result, you may define a regular query selector to find matching elements in the result\n * @param {?Boolean} [selectAll=false] - usually, if a selector is defined, we select a single element, if you need to select a list, set this to true\n * @returns {Basic.Deferred<Requests.HtmlFetchResponse>}\n *\n * @memberof Requests\n * @see insertNode\n */\n\n/**\n * @typedef HtmlFetchRequest\n * @type {Object}\n *\n * @property {String} url - the request URL\n * @property {Object} options - the options with which the request has been created\n * @property {String} options.method - the request method\n * @property {?Object} options.headers - the set headers for the request\n * @property {?String} options.credentials - the credentials setting for the request\n * @property {?String} options.body - the provided request body of the request\n * @property {?Number} [options.timeout=10000] - milliseconds until the request fails due to a timeout\n * @property {Requests.HtmlFetchRequestExecuteFunction} execute - call this to execute the request\n *\n * @memberof Requests\n */\n\n/**\n * This method creates a special version of a FetchRequest specifically designed to retrieve HTML content.\n *\n * Usually you'll want to retrieve HTML to include it into a page or extract information from it, so the default mode\n * of this method is to resolve to a node, you may insert into the DOM wherever you please or use stuff like a\n * querySelector on. However, you may also specify to retrieve the raw HTML source.\n *\n * Be aware, that requesting and parsing HTML from an unsecure source comes with a high risk. If you cannot fully\n * trust the source, request the HTML raw and use something like dom purify before using the result.\n *\n * If you plan on inserting the result into DOM anyway you'll like the fact that this is also directly possible, by\n * defining an insert target.\n *\n * BTW: Inserting does not automatically change the resolve value, those are separate concerns.\n *\n * @param {String} url - the complete URL to query\n * @param {?Object} [options=null] - the request options (see: createFetchRequests for details)\n * @param {?Boolean|String} [useNative=false] - determines if the native Fetch implementation of the browser should be used, true forces usage, \"auto\" uses it only if available\n * @param {?Boolean} [strict=true] - if true, enforces \"text/html\" as accept header as well as response mime type, if false, accept header is not set and different mime type only results in warning\n * @throws error in strict mode if response content type is not \"text/html\"\n * @returns {Requests.HtmlFetchRequest} use this via the \"execute\" method, which resolves to a FetchResponse or rejects with error in case of a technical request error (request is not completable)\n *\n * @memberof Requests:createHtmlRequest\n * @alias createHtmlRequest\n * @see createFetchRequest\n * @example\n * createHtmlRequest('/html/test.html')\n *     .execute()\n *         .then(htmlElement => { document.body.appendChild(htmlElement); })\n * ;\n * createHtmlRequest('/html/test.html')\n *     .execute('raw', null, 'request-1')\n *         .then(rawHtml => { alert(`document has been loaded: \"${rawHtml}\"`); })\n * ;\n * createHtmlRequest('/html/test.html')\n *     .execute(null, injectTarget, 'request-3', 'body > main > h1')\n *         .then(htmlElement => { alert(`has been injected: \"${htmlElement.outerHTML}\"`); })\n * ;\n * createHtmlRequest('/files/html/requests-test-1.html')\n *     .execute('raw', {element : injectTarget, position : 'beforebegin'}, 'request-4', 'h1 ~ p', true)\n *         .then(rawHtml => { alert(`has been injected: \"${rawHtml}\"`); })\n * ;\n * createHtmlRequest('/files/html/requests-test-2.html')\n *     .execute('element', {element : injectTarget, position : 'prepend'}, 'request-5', 'p', true)\n *         .then(htmlElements => { alert(`has been injected: \"${htmlElements.map(e => e.outerHTML).join('')}\"`); })\n * ;\n */\nexport function createHtmlRequest(url, options=null, useNative=false, strict=true){\n\tconst\n\t\t__methodName__ = 'createHtmlRequest',\n\t\tcontentType = 'text/html'\n\t;\n\n\tif( strict ){\n\t\tif( !hasValue(options) ){\n\t\t\toptions = {};\n\t\t}\n\n\t\tif( !hasValue(options.headers) ){\n\t\t\toptions.headers = {};\n\t\t}\n\n\t\toptions.headers['Accept'] = contentType;\n\t}\n\n\treturn {\n\t\turl,\n\t\toptions,\n\t\texecute(resolveTo='element', insertTarget=null, dataId=null, selector=null, selectAll=false){\n\t\t\tconst\n\t\t\t\tres = new Deferred(),\n\t\t\t\tfInsertAndResolve = (element, html='') => {\n\t\t\t\t\tif( hasValue(element) ){\n\t\t\t\t\t\tconst elements = [].concat(element);\n\n\t\t\t\t\t\tif( dataId !== null ){\n\t\t\t\t\t\t\telements.forEach(element => {\n\t\t\t\t\t\t\t\telement.setAttribute('data-id', `${dataId}`);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( hasValue(insertTarget) ){\n\t\t\t\t\t\t\tconst\n\t\t\t\t\t\t\t\ttarget = insertTarget.element ?? insertTarget,\n\t\t\t\t\t\t\t\tposition = insertTarget.position ?? null\n\t\t\t\t\t\t\t;\n\n\t\t\t\t\t\t\tif( ['before', 'beforebegin', 'prepend', 'afterbegin'].includes(position) ){\n\t\t\t\t\t\t\t\telements.reverse();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\telements.forEach(element => {\n\t\t\t\t\t\t\t\tif( position === null ){\n\t\t\t\t\t\t\t\t\tinsertNode(target, element);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tinsertNode(target, element, position);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tres.resolve((resolveTo === 'raw') ? html : element);\n\t\t\t\t}\n\t\t\t;\n\n\t\t\tcreateFetchRequest(url, options, useNative).execute()\n\t\t\t\t.then(response => {\n\t\t\t\t\tconst responseContentType = (\n\t\t\t\t\t\tresponse.headers.get('content-type') ?? response.headers.get('Content-Type') ?? ''\n\t\t\t\t\t).split(';')[0].trim();\n\t\t\t\t\tif( responseContentType !== contentType ){\n\t\t\t\t\t\tconst message = `${MODULE_NAME}:${__methodName__} | content-type \"${responseContentType}\" is not valid for HTML, expecting \"text/html\"`;\n\t\t\t\t\t\tif( strict ){\n\t\t\t\t\t\t\tthrow new Error(message);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twarn(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn response.text();\n\t\t\t\t})\n\t\t\t\t.then(html => {\n\t\t\t\t\tconst\n\t\t\t\t\t\tisWholeDocument = html.includes('<html') || html.includes('<HTML'),\n\t\t\t\t\t\tisDocument = isWholeDocument\n\t\t\t\t\t\t\t|| (html.includes('<head') || html.includes('<HEAD'))\n\t\t\t\t\t\t\t|| (html.includes('<body') || html.includes('<BODY'))\n\t\t\t\t\t\t,\n\t\t\t\t\t\tfragmentNode = (new DOMParser())\n\t\t\t\t\t\t\t.parseFromString(html, 'text/html')\n\t\t\t\t\t\t\t\t.documentElement\n\t\t\t\t\t;\n\n\t\t\t\t\tlet element;\n\t\t\t\t\tif( hasValue(selector) ){\n\t\t\t\t\t\tif( selectAll ){\n\t\t\t\t\t\t\telement = fragmentNode.querySelectorAll(`${selector}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement = fragmentNode.querySelector(`${selector}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( isWholeDocument ){\n\t\t\t\t\t\telement = fragmentNode;\n\t\t\t\t\t} else if( isDocument) {\n\t\t\t\t\t\telement = fragmentNode.children;\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement = fragmentNode.querySelector('body').children;\n\t\t\t\t\t}\n\n\t\t\t\t\tif( hasValue(element?.length) ){\n\t\t\t\t\t\tif( element.length === 0 ){\n\t\t\t\t\t\t\telement = null;\n\t\t\t\t\t\t} else if( element.length === 1 ){\n\t\t\t\t\t\t\telement = element.item(0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement = Array.from(element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif( hasValue(selector) ){\n\t\t\t\t\t\thtml = '';\n\t\t\t\t\t\tif( hasValue(element) ){\n\t\t\t\t\t\t\t([].concat(element)).forEach(element => {\n\t\t\t\t\t\t\t\thtml += element.outerHTML;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfInsertAndResolve(element, html);\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tres.reject(error);\n\t\t\t\t})\n\t\t\t;\n\n\t\t\treturn res;\n\t\t}\n\t};\n}\n\n\n\n/**\n * @namespace Requests:visitUrl\n */\n\n/**\n * This function opens a given URL, using a dynamically created iframe, thereby opening the URL as if the user\n * him- or herself navigates to the URL using a browser window. Why should we do this you ask?\n *\n * For example: In session management, you'll sometimes have the case, that you need to trigger URLs on login or logout,\n * that construct or destruct parts of the session by creating of removing cookie or other client-storage items.\n * If that domain is part of a system running on another (sub)domain, using a usual client request for this will\n * not work, since the calling context of the request will have no access to the storage scope of that domain.\n *\n * So, to allow those domains to do their tasks, triggered from a different context, we can use this method to execute\n * those webhooks with the iframe, which natively runs in the called domains scope and therefore can do all necessary\n * domain-based storage actions.\n *\n * The big downside of this is, that we cannot really handle errors well this way. So if the URL returns a 404\n * or a 500, this will actually be treated as a resolved promise, since the iframe loaded. The only case a request\n * of this kind fails, is if the request runs into a timeout. So, for really critical actions, this way of handling\n * thing should be avoided in favour of an approach, that actually includes a postMessage implementation on the other\n * domain, to verify completion on load.\n *\n * @param {String} url - the URL to query, will be the current one if left empty\n * @param {?Number} [timeout=5000] - the timeout in ms to wait for completion of the request, before rejecting the promise\n * @param {?String} [tokenValue=null] - if the URL needs to include a token, you can provide this token here, which will replace the placeholder defined in \"tokenPlaceholder\"\n * @param {?String} [tokenPlaceholder='token'] = the placeholder in the url to replace with the tokenValue, must be surrounded with curly braces in the url (\"{token}\")\n * @returns {Basic.Deferred} resolves on load of URL (with the final URL as resolution value), rejects on timeout (with a \"timeout\" error)\n *\n * @memberof Requests:visitUrl\n * @alias visitUrl\n * @example\n * visitUrl('https://some.other.domain?token={token}', 2500, 'A38')\n *   .then(() => { console.log('loaded!'); })\n * ;\n * visitUrl(\n *   'https://some.other.domain?token={session_value}',\n *   5000,\n *   'A38',\n *   'session_value'\n * )\n *   .then(url => { console.log(`\"${url}\" loaded!`); })\n *   .catch(error => { console.log(`${error.message} - URL did not load super fast, blimey!`); })\n * ;\n */\nexport function visitUrl(url, timeout=5000, tokenValue=null, tokenPlaceholder='token'){\n\turl = orDefault(url, '', 'str');\n\ttimeout = Math.abs(orDefault(timeout, 5000, 'int'));\n\ttokenValue = orDefault(tokenValue, null, 'str');\n\ttokenPlaceholder = orDefault(tokenPlaceholder, 'token', 'str');\n\turl = hasValue(tokenValue) ? url.replaceAll(`{${tokenPlaceholder}}`, tokenValue) : url;\n\n\tconst\n\t\tdeferred = new Deferred(),\n\t\touterNode = document.createElement('div')\n\t;\n\n\touterNode.innerHTML = `\n\t\t<iframe\n\t\t\tclass=\"webhook\"\n\t\t\tframeborder=\"0\"\n\t\t\tframeborder=\"0\"\n\t\t\tmarginwidth=\"0\"\n\t\t\tmarginheight=\"0\"\n\t\t\tstyle=\"width:0;height:0;opacity:0;\"\n\t\t\tsrc=\"${url}\"\n\t\t></iframe>\n\t`.trim();\n\n\tconst\n\t\tiframe = outerNode.firstChild,\n\t\tfOnLoad = () => {\n\t\t\tiframe.removeEventListener('load', fOnLoad);\n\t\t\twindow.clearTimeout(loadTimeout);\n\t\t\t// we need to wait a bit after load before removing the iframe,\n\t\t\t// otherwise safari considers the request cancelled :(\n\t\t\twindow.setTimeout(() => {\n\t\t\t\tdocument.body.removeChild(iframe);\n\t\t\t\tdeferred.resolve(url);\n\t\t\t}, 250);\n\t\t},\n\t\tloadTimeout = window.setTimeout(() => {\n\t\t\tiframe.removeEventListener('load', fOnLoad);\n\t\t\tdocument.body.removeChild(iframe);\n\t\t\tdeferred.reject(new Error('timeout'));\n\t\t}, timeout)\n\t;\n\n\tiframe.addEventListener('load', fOnLoad);\n\tdocument.body.appendChild(iframe);\n\n\treturn deferred;\n}\n"]}
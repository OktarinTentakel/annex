/*!
 * annex v0.1.0-dev
 */
/*!
 * Module Elements
 */
const MODULE_NAME="Elements";import{orDefault,isA,isPlainObject,hasValue,assert,size}from"./basic.js";const NOT_AN_HTMLELEMENT_ERROR="given node/target is not an HTMLElement";export function createNode(e,t=null,n=null){e=orDefault(e,"span","str").trim(),t=isPlainObject(t)?t:null,n=orDefault(n,null,"str");const a=document.createElement("div");/^<[^\/][^<>]*>/.test(e)&&/<\/[^<>\/]+>$/.test(e)?a.innerHTML=e:a.appendChild(document.createElement(e));const r=a.firstChild;if(a.removeChild(r),hasValue(t))for(let e in t)r.setAttribute(e,`${t[e]}`);return hasValue(n)&&(r.textContent=n),r}export function insertNode(e,t,n="beforeend"){switch(assert(isA(e,"htmlelement"),`Elements.insertNode | ${NOT_AN_HTMLELEMENT_ERROR}`),isA(t,"htmlelement")||(t=createNode(`${t}`)),n){case"beforebegin":case"before":n="beforebegin";break;case"afterend":case"after":n="afterend";break;case"afterbegin":case"prepend":n="afterbegin";break;default:n="beforeend"}return e.insertAdjacentElement(n,t),t}export function replaceNode(e,t){const n="replaceNode";return assert(isA(e,"htmlelement"),`Elements.${n} | ${NOT_AN_HTMLELEMENT_ERROR}`),isA(t,"htmlelement")||(t=createNode(`${t}`)),assert(isA(e.parentNode,"htmlelement"),`Elements.${n} | given target does not have a parent)`),insertNode(e,t,"after"),e.parentNode.removeChild(e),t}export function getTextContent(e,t=!1){if(t=orDefault(t,!1,"bool"),isA(e,"string")&&(e=createNode(e)),assert(isA(e,"htmlelement"),"Elements:getTextContent | target is neither node nor markup"),t){let t="";return e.childNodes.forEach((e=>{3===e.nodeType&&(t+=e.textContent)})),t}return e.textContent}export function isInDom(e){return assert(isA(e,"htmlelement"),`Elements:isInDom | ${NOT_AN_HTMLELEMENT_ERROR}`),isA(document.contains,"function")?document.contains(e):document.body.contains(e)}export function getData(e,t=null){t=orDefault(t,null,"arr"),assert(isA(e,"htmlelement"),`Elements:getData | ${NOT_AN_HTMLELEMENT_ERROR}`);let n={};return hasValue(t)?t.forEach((t=>{let a=e.getAttribute(`data-${t}`);if(hasValue(a))try{n[t]=JSON.parse(a)}catch(e){n[t]=a}})):Array.from(e.attributes).forEach((e=>{if(e.name.startsWith("data-")){const t=e.name.replace(/^data-/,"");try{n[t]=JSON.parse(e.value)}catch(a){n[t]=e.value}}})),0===size(n)?n=null:1===t?.length&&(n=n[t[0]]??null),n}export function setData(e,t,n=null){const a="setData";assert(isA(e,"htmlelement"),`Elements:${a} | ${NOT_AN_HTMLELEMENT_ERROR}`);let r=null;hasValue(n)&&(r=`${t}`,t={[r]:n}),assert(isPlainObject(t),`Elements:${a} | dataSet is not a plain object`);const s={};return Object.entries(t).forEach((([t,n])=>{if(isA(n,"function")&&(n=n()),void 0!==n){let a,r;try{a=JSON.stringify(n),r=JSON.parse(a)}catch(e){a=`${n}`,r=a}a=a.replace(/^['"]/,"").replace(/['"]$/,"").trim(),""!==a?(s[t]=r,e.setAttribute(`data-${t}`,a)):e.hasAttribute(`data-${t}`)&&(s[t]=void 0,e.removeAttribute(`data-${t}`))}else e.hasAttribute(`data-${t}`)&&(s[t]=void 0,e.removeAttribute(`data-${t}`))})),hasValue(r)?r in s?s[r]:null:size(s)>0?s:null}export function removeData(e,t=null){t=orDefault(t,null,"arr"),assert(isA(e,"htmlelement"),`Elements:removeData | ${NOT_AN_HTMLELEMENT_ERROR}`);let n=getData(e,t);return hasValue(n)?setData(e,1===t?.length?{[t[0]]:void 0}:Object.keys(n).reduce(((e,t)=>(e[t]=void 0,e)),{})):n=null,n}
//# sourceMappingURL=elements.js.map

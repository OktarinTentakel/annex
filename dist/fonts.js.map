{"version":3,"file":"fonts.js","names":["MODULE_NAME","hasValue","orDefault","Deferred","createNode","applyStyles","loop","countermand","waitForWebfonts","fonts","fallbackFontName","timeout","map","font","deferred","start","Date","now","loadedFonts","forEach","node","position","visibility","left","top","document","body","appendChild","systemFontDims","width","offsetWidth","height","offsetHeight","fontLoadedCheckTimer","fCheckFont","removeChild","reject","Error","dims1","dims2","length","resolve"],"sources":["fonts.js"],"mappings":";;;AAQA,MAAMA,YAAc,eAMZC,SAAUC,UAAWC,aAAe,oBACpCC,eAAiB,uBACjBC,gBAAkB,kBAClBC,KAAMC,gBAAmB,qBAoC1B,SAASC,gBAAgBC,EAAOC,EAAiB,aAAcC,EAAQ,KAC7EF,EAAQP,UAAUO,EAAO,GAAI,OAAOG,KAAIC,GAAQ,GAAGA,MACnDH,EAAmBR,UAAUQ,EAAkB,aAAc,UAC7DC,EAAUT,UAAUS,EAAS,IAAM,OAEnC,MACCG,EAAW,IAAIX,SACfY,EAAQC,KAAKC,MAGd,IAAIC,EAAc,EA4DlB,OA1DAT,EAAMU,SAAQN,IACb,IAAIO,EAAOhB,WAAW,OAAQ,KAAM,oBACpCC,YAAYe,EAAM,CACjBC,SAAa,WACbC,WAAe,SACfC,KAAS,WACTC,IAAQ,WACR,YAAc,QACd,cAAgBd,EAChB,eAAiB,SACjB,aAAe,SACf,cAAgB,SAChB,iBAAmB,IACnB,cAAgB,MAChB,cAAgB,IAEjBe,SAASC,KAAKC,YAAYP,GAE1B,MAAMQ,EAAiB,CACtBC,MAAQT,EAAKU,YACbC,OAASX,EAAKY,cAEf3B,YAAYe,EAAM,CAAC,cAAgB,GAAGP,MAASH,MAE/C,IAAIuB,EAAuB,KAC3B,MAAMC,EAAa,KAClB,OAAKlB,KAAKC,MAAQF,GAAUJ,GAC3BJ,YAAY0B,GACRhC,SAASmB,KACZK,SAASC,KAAKS,YAAYf,GAC1BA,EAAO,MAERN,EAASsB,OAAO,IAAIC,MAAM,aACnB,IAIPpC,SAASmB,KAzCUkB,EA0CG,CAACT,MAAQT,EAAKU,YAAaC,OAASX,EAAKY,cA1CrCO,EA0CoDX,EA1CxCU,EAAMT,QAAUU,EAAMV,OAAWS,EAAMP,SAAWQ,EAAMR,UA4C9FxB,YAAY0B,GACZR,SAASC,KAAKS,YAAYf,GAC1BA,EAAO,KACPF,KAGGA,GAAeT,EAAM+B,SACxB1B,EAAS2B,QAA0B,IAAjBhC,EAAM+B,OAAgB/B,EAAM,GAAKA,IAC5C,IApDW,IAAC6B,EAAOC,CAuDf,EAERL,MACJD,EAAuB3B,KAAK,IAAK4B,GAClC,IAGMpB,CACR","ignoreList":[],"sourcesContent":["/*!\n * Module Fonts\n */\n\n/**\n * @namespace Fonts\n */\n\nconst MODULE_NAME = 'Fonts';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {hasValue, orDefault, Deferred} from './basic.js';\nimport {createNode} from './elements.js';\nimport {applyStyles} from './css.js';\nimport {loop, countermand} from  './timers.js';\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace Fonts:waitForWebfonts\n */\n\n/**\n * Waits for a list of webfonts to load. This includes the fact, that the font is ready to display and renders in the\n * browser's rendering engine and not just a completed request or a loaded resource.\n *\n * Also works for fonts, that have already been loaded.\n *\n * @param {String|String[]} fonts - the CSS-names of the fonts to wait for\n * @param {?String} [fallbackFontName=sans-serif] - the system font which the page falls back on if the webfont is not loaded\n * @param {?Number} [timeout=5000] - timeout in ms after which the call fails and the return value rejects\n * @returns {Basic.Deferred<Array<String>|String>} a Deferred, that resolves once all webfonts are available and rejects when the timeout is reached\n *\n * @memberof Fonts:waitForWebfonts\n * @alias waitForWebfonts\n * @example\n * waitForWebfonts(['purr-regular', 'scratch-light'], 'helvetica, sans-serif')\n *   .then(fonts => {\n *     document.body.classList.add('webfonts-loaded');\n *     alert(`${fonts.length} webfonts ready to render`);\n *   })\n *   .catch(error => {\n *     if( error.message === 'timeout' ){\n *       document.body.classList.add('webfonts-timeout');\n *     }\n *   })\n * ;\n */\nexport function waitForWebfonts(fonts, fallbackFontName='sans-serif', timeout=5000){\n\tfonts = orDefault(fonts, [], 'arr').map(font => `${font}`);\n\tfallbackFontName = orDefault(fallbackFontName, 'sans-serif', 'string');\n\ttimeout = orDefault(timeout, 5000, 'int');\n\n\tconst\n\t\tdeferred = new Deferred(),\n\t\tstart = Date.now(),\n\t\tfDimsAreIdentical = (dims1, dims2) => ((dims1.width === dims2.width) && (dims1.height === dims2.height))\n\t;\n\tlet\tloadedFonts = 0;\n\n\tfonts.forEach(font => {\n\t\tlet node = createNode('span', null, 'giItT1WQy@!-/#');\n\t\tapplyStyles(node, {\n\t\t\t'position' : 'absolute',\n\t\t\t'visibility' : 'hidden',\n\t\t\t'left' : '-10000px',\n\t\t\t'top' : '-10000px',\n\t\t\t'font-size' : '300px',\n\t\t\t'font-family' : fallbackFontName,\n\t\t\t'font-variant' : 'normal',\n\t\t\t'font-style' : 'normal',\n\t\t\t'font-weight' : 'normal',\n\t\t\t'letter-spacing' : '0',\n\t\t\t'white-space' : 'pre',\n\t\t\t'line-height' : 1\n\t\t});\n\t\tdocument.body.appendChild(node);\n\n\t\tconst systemFontDims = {\n\t\t\twidth : node.offsetWidth,\n\t\t\theight : node.offsetHeight\n\t\t};\n\t\tapplyStyles(node, {'font-family' : `${font}, ${fallbackFontName}`});\n\n\t\tlet fontLoadedCheckTimer = null;\n\t\tconst fCheckFont = () => {\n\t\t\tif( (Date.now() - start) >= timeout ){\n\t\t\t\tcountermand(fontLoadedCheckTimer);\n\t\t\t\tif( hasValue(node) ){\n\t\t\t\t\tdocument.body.removeChild(node);\n\t\t\t\t\tnode = null;\n\t\t\t\t}\n\t\t\t\tdeferred.reject(new Error('timeout'));\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif(\n\t\t\t\thasValue(node)\n\t\t\t\t&& !fDimsAreIdentical({width : node.offsetWidth, height : node.offsetHeight}, systemFontDims)\n\t\t\t){\n\t\t\t\tcountermand(fontLoadedCheckTimer);\n\t\t\t\tdocument.body.removeChild(node);\n\t\t\t\tnode = null;\n\t\t\t\tloadedFonts++;\n\t\t\t}\n\n\t\t\tif( loadedFonts >= fonts.length ){\n\t\t\t\tdeferred.resolve((fonts.length === 1) ? fonts[0] : fonts);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t\tif( !fCheckFont() ){\n\t\t\tfontLoadedCheckTimer = loop(100, fCheckFont);\n\t\t}\n\t});\n\n\treturn deferred;\n}\n"]}
{"version":3,"file":"random.js","names":["MODULE_NAME","orDefault","assert","hasValue","isA","RANDOM_UUIDS_USED_SINCE_RELOAD","Set","randomNumber","floor","ceiling","float","precision","power","Math","pow","res","random","round","parseFloat","randomUuid","withDashes","uuid","collisions","has","window","crypto","getRandomValues","msCrypto","replace","c","Uint8Array","toString","r","add"],"sources":["random.js"],"mappings":";;;AAQA,MAAMA,YAAc,gBAMZC,UAAWC,OAAQC,SAAUC,QAAU,aAM/C,MAAMC,+BAAiC,IAAIC,WA8BpC,SAASC,aAAaC,EAAM,EAAGC,EAAQ,GAAIC,GAAM,EAAOC,EAAU,GACxEH,EAAQP,UAAUO,EAAO,EAAG,SAC5BC,EAAUR,UAAUQ,EAAS,GAAI,SACjCC,EAAQT,UAAUS,GAAO,EAAO,QAChCC,EAAYV,UAAUU,EAAW,EAAG,OAEpCT,OAAQO,GAAWD,EAAQ,iDAE3B,MAAMI,EAAQC,KAAKC,IAAI,GAAIH,GAEvBD,IACHF,GAASI,EACTH,GAAWG,GAGZ,MAAMG,EAAMF,KAAKL,MAAMK,KAAKG,UAAYP,EAAUD,EAAQ,GAAKA,GAE/D,OAAOE,EAAUG,KAAKI,MAAMC,WAAWH,GAAOH,GAASA,EAASA,EAASG,CAC1E,QA0BO,SAASI,WAAWC,GAAW,GACrCA,EAAanB,UAAUmB,GAAY,EAAM,QAEzC,IACCC,EAAO,KACPC,EAAa,EAGd,MAAQnB,SAASkB,IAAShB,+BAA+BkB,IAAIF,IAQ3DA,EAHAjB,IAAIoB,OAAOC,QAAQC,gBAAiB,aACjCtB,IAAIoB,OAAOG,UAAUD,gBAAiB,aAEjC,CAAC,MAAM,KAAK,KAAK,KAAK,MAAME,QAAQ,UAAUC,IACrDA,GAECzB,IAAIoB,OAAOC,QAAQC,gBAAiB,YAClCF,OAAOC,OAAOC,gBAAgB,IAAII,WAAW,IAC7CN,OAAOG,UAAUD,gBAAgB,IAAII,WAAW,KACjD,GACA,IAAMD,EAAI,GACXE,SAAS,MAEJ,uCAAuCH,QAAQ,SAASC,IAC9D,MACCG,EAAoB,GAAhBnB,KAAKG,SAAgB,EAG1B,OAFW,MAANa,EAAYG,EAAS,EAAJA,EAAU,GAEvBD,SAAS,GAAG,IAInB1B,+BAA+BkB,IAAIF,KACtCC,IAEIA,EAAa,KAChBpB,OAAOoB,GAAc,IAAK,qFAO7B,OAFAjB,+BAA+B4B,IAAIZ,GAE5BD,EAAaC,EAAOA,EAAKO,QAAQ,KAAM,GAC/C","sourcesContent":["/*!\n * Module Random\n */\n\n/**\n * @namespace Random\n */\n\nconst MODULE_NAME = 'Random';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {orDefault, assert, hasValue, isA} from './basic.js';\n\n\n\n//###[ DATA ]###########################################################################################################\n\nconst RANDOM_UUIDS_USED_SINCE_RELOAD = new Set();\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace Random:randomNumber\n */\n\n/**\n * Special form of Math.random, returning a value in a defined range,\n * where floor and ceiling are included in the range.\n *\n * By default this method return an integer, but by setting \"float\" to true and\n * optionally providing a float precision you can also work with floating point numbers.\n *\n * @param {?Number} [floor=0] - the lower end of random range, can either be integer or float\n * @param {?Number} [ceiling=10] - the upper end of random range, can either be integer or float\n * @param {?Boolean} [float=false] - define if we are working with floating point numbers\n * @param {?Number} [precision=2] - if we are working with floats, what precision are we working with, considering floor, ceiling and result?\n * @throws error if ceiling is smaller than floor\n * @returns {Number} random integer or float between floor and ceiling\n *\n * @memberof Random:randomNumber\n * @alias randomNumber\n * @example\n * let randomInt = randomNumber(23, 42);\n * let randomFloat = randomNumber(23.5, 42.123, true, 3);\n */\nexport function randomNumber(floor=0, ceiling=10, float=false, precision=2){\n\tfloor = orDefault(floor, 0, 'float');\n\tceiling = orDefault(ceiling, 10, 'float');\n\tfloat = orDefault(float, false, 'bool');\n\tprecision = orDefault(precision, 2, 'int');\n\n\tassert((ceiling >= floor), `${MODULE_NAME}:randomInt | ceiling smaller than floor`);\n\n\tconst power = Math.pow(10, precision);\n\n\tif( float ){\n\t\tfloor *= power;\n\t\tceiling *= power;\n\t}\n\n\tconst res = Math.floor(Math.random() * (ceiling - floor + 1) + floor);\n\n\treturn float ? ((Math.round(parseFloat(res) * power) / power) / power) : res;\n}\n\n\n\n/**\n * @namespace Random:randomUuid\n */\n\n/**\n * Generate a RFC4122-compliant random UUID, as far as possible with JS.\n * Generation is heavily dependent on the quality of randomization, which in some JS-engines is weak using\n * Math.random. Therefore we are using the specific crypto api if available and only fall back to random if necessary.\n * Additionally we track used UUIDs to never return the same id twice per reload.\n *\n * For a detailed discussion, see: https://stackoverflow.com/a/2117523\n *\n * @param {?Boolean} [withDashes=true] - defines if UUID shall include dashes or not\n * @throws error if too many collisions happen and the random implementation seems to be broken\n * @returns {String} a \"UUID\"\n *\n * @memberof Random:randomUuid\n * @alias randomUuid\n * @example\n * const uuidWithDashes = randomUuid();\n * const uuidWithoutDashes = randomUuid(false);\n */\nexport function randomUuid(withDashes=true){\n\twithDashes = orDefault(withDashes, true, 'bool');\n\n\tlet\n\t\tuuid = null,\n\t\tcollisions = 0\n\t;\n\n\twhile( !hasValue(uuid) || RANDOM_UUIDS_USED_SINCE_RELOAD.has(uuid) ){\n\t\t// we have to do this highly convoluted check, because we have to call getRandomValues\n\t\t// explicitly from either window.crypto or window.msCrypto, since invoking it from another\n\t\t// context will trigger an \"illegal invocation\" of the method :(\n\t\tif(\n\t\t\tisA(window.crypto?.getRandomValues, 'function')\n\t\t\t|| isA(window.msCrypto?.getRandomValues, 'function')\n\t\t){\n\t\t\tuuid = ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (\n\t\t\t\tc\n\t\t\t\t^ (\n\t\t\t\t\tisA(window.crypto?.getRandomValues, 'function')\n\t\t\t\t\t? window.crypto.getRandomValues(new Uint8Array(1))\n\t\t\t\t\t: window.msCrypto?.getRandomValues(new Uint8Array(1))\n\t\t\t\t)[0]\n\t\t\t\t& 15 >> c / 4\n\t\t\t).toString(16));\n\t\t} else {\n\t\t\tuuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n\t\t\t\tconst\n\t\t\t\t\tr = Math.random() * 16 | 0,\n\t\t\t\t\tv = c === 'x' ? r : (r & 0x3 | 0x8)\n\t\t\t\t;\n\t\t\t\treturn v.toString(16);\n\t\t\t});\n\t\t}\n\n\t\tif( RANDOM_UUIDS_USED_SINCE_RELOAD.has(uuid) ){\n\t\t\tcollisions++;\n\n\t\t\tif( collisions > 100 ){\n\t\t\t\tassert(collisions <= 100, `${MODULE_NAME}:randomUuid | too many collisions, there seems to be randomization problem`)\n\t\t\t}\n\t\t}\n\t}\n\n\tRANDOM_UUIDS_USED_SINCE_RELOAD.add(uuid);\n\n\treturn withDashes ? uuid : uuid.replace(/-/g, '');\n}\n"]}
{"version":3,"sources":["dynamic-loading.js"],"names":["MODULE_NAME","hasValue","orDefault","isPlainObject","isA","assert","createFetchRequest","url","options","methodName","method","includes","toUpperCase","execute","Promise","resolve","reject","request","XMLHttpRequest","headerKeys","headerEntries","headers","response","ok","parseInt","status","statusText","responseURL","text","responseText","json","then","JSON","parse","blob","Blob","clone","keys","entries","get","key","toLowerCase","has","open","onload","getAllResponseHeaders","replace","m","value","push","onerror","withCredentials","credentials","i","hasOwnProperty","setRequestHeader","send","body","_fetch","polyfillFetch","force","window","fetch"],"mappings":";;;AAQA,MAAMA,YAAc,wBAIZC,SAAUC,UAAWC,cAAeC,IAAKC,WAAa,oBA0EvD,SAASC,mBAAmBC,EAAKC,GACvC,MAAMC,EAAa,qBAYnB,OAVAJ,OAAOJ,SAASM,GAAM,kBAAkBE,oBACxCD,EAAUN,UAAUM,EAAS,IAC7BH,OAAOF,cAAcK,GAAU,kBAAkBC,oCAEjDD,EAAQE,OAASR,UAAUM,EAAQE,OAAQ,OAC3CF,EAAQE,OAAS,CAAC,MAAO,OAAQ,MAAO,QAAS,OAAQ,UAAW,UAAUC,SAASH,EAAQE,OAAOE,eACnGJ,EAAQE,OAAOE,cACf,MAGI,CACNL,IAAAA,EACAC,QAAAA,EACAK,QAAO,IACC,IAAIC,SAAQ,CAACC,EAASC,KAC5B,MACCC,EAAU,IAAIC,eACdC,EAAa,GACbC,EAAgB,GAChBC,EAAU,GACVC,EAAW,KAAM,CAChBC,GAAMC,SAASP,EAAQQ,OAAQ,KAAO,KAASD,SAASP,EAAQQ,OAAQ,KAAO,IAC/EC,WAAaT,EAAQS,WACrBD,OAASR,EAAQQ,OACjBlB,IAAMU,EAAQU,YACdC,KAAO,IAAMd,QAAQC,QAAQE,EAAQY,cACrCC,KAAO,IAAMhB,QAAQC,QAAQE,EAAQY,cAAcE,KAAKC,KAAKC,OAC7DC,KAAO,IAAMpB,QAAQC,QAAQ,IAAIoB,KAAK,CAAClB,EAAQK,YAC/Cc,MAAQd,EACRD,QAAU,CACTgB,KAAI,IACIlB,EAERmB,QAAO,IACClB,EAERmB,IAAIC,GACInB,EAAQmB,EAAIC,eAEpBC,IAAIF,GACIA,EAAIC,gBAAiBpB,KAMhCJ,EAAQ0B,KAAKnC,EAAQE,OAAQH,GAAK,GAElCU,EAAQ2B,OAAS,KAChB3B,EAAQ4B,wBAAwBC,QAAQ,gCAAgC,CAACC,EAAGP,EAAKQ,KAChFR,EAAMA,EAAIC,cACVtB,EAAW8B,KAAKT,GAChBpB,EAAc6B,KAAK,CAACT,EAAKQ,IACzB3B,EAAQmB,GAAOnB,EAAQmB,GAAO,GAAGnB,EAAQmB,MAAQQ,IAAUA,KAG5DjC,EAAQO,MAGTL,EAAQiC,QAAUlC,EAElBC,EAAQkC,gBAA2C,YAAxB3C,EAAQ4C,YAEnC,IAAK,IAAIC,KAAK7C,EAAQa,QACjBb,EAAQa,QAAQiC,eAAeD,IAClCpC,EAAQsC,iBAAiBF,EAAG7C,EAAQa,QAAQgC,IAI9CpC,EAAQuC,KAAKhD,EAAQiD,MAAQ,UAejC,SAASC,OAAOnD,EAAKC,GACpB,OAAOF,mBAAmBC,EAAKC,GAASK,iBAyBlC,SAAS8C,cAAcC,GAAM,KACnCA,EAAQ1D,UAAU0D,GAAO,EAAO,UAElBxD,IAAIyD,OAAOC,MAAO,cAC/BD,OAAOC,MAAQJ","file":"dynamic-loading.js","sourcesContent":["/*!\n * Module DynamicLoading\n */\n\n/**\n * @namespace DynamicLoading\n */\n\nconst MODULE_NAME = 'DynamicLoading';\n\n\n\nimport {hasValue, orDefault, isPlainObject, isA, assert} from './basic.js';\n\n\n\n/**\n * @namespace DynamicLoading:createFetchRequest\n */\n\n/**\n * @typedef FetchResponse\n * @type {Object}\n * @property {Boolean} ok - returns true if the request received a status in the OK range (200-299)\n * @property {Number} status - contains the status code of the response, e.g. 404 for a not found resource, 200 for a success\n * @property {String} statusText - a message related to the status attribute, e.g. OK for a status 200\n * @property {Function} clone -  will return another object with the same shape and content as response\n * @property {Function} text - will return the response content as plain text\n * @property {Function} json - will return the response content as JSON\n * @property {Function} blob - will return the response content as a (binary) blob\n * @property {Object} headers - we do not implement a full spec-compliant Headers class, but emulate some of the functionality\n * @property {Function} headers.keys - returns an array containing the key for every header in the response\n * @property {Function} headers.entries - returns an array containing the [key, value] pairs for every header in the response\n * @property {Function} headers.get - returns the value associated with the given key\n * @property {Function} headers.has - returns a boolean asserting the existence of a value for the given key among the response headers\n */\n\n/**\n * @typedef FetchRequestExecuteFunction\n * @type {Function}\n * @returns {Promise<FetchResponse>}\n */\n\n/**\n * @typedef FetchRequest\n * @type {Object}\n * @property {String} url - the request URL\n * @property {Object} options - the options with which the request has been created\n * @property {String} options.method - the request method\n * @property {?Object} options.headers - the set headers for the request\n * @property {?String} options.credentials - the credentials setting for the request\n * @property {?String} options.body - the provided request body of the request\n * @property {FetchRequestExecuteFunction} execute - call this to execute the request\n */\n\n/**\n * This method creates a ponyfilled fetch request based on \"unfetch\", but basically fulfilling the signature of\n * a native fetch request.\n *\n * The reasoning for this is to provide a baseline fetch implementation for all requests of annex, as long as we\n * still support non ES6 browsers or old implementations in any way. During transpilation with core js, fetch does\n * not automatically get polyfilled, so we need to do this ourselves and to actually stay testable, we provide the\n * polyfill as long as we might target legacy contexts. As soon as we drop legacy contexts, we can immediately also\n * remove this method and its uses.\n *\n * The function signature is the same as \"unfetch\"'s and all non implemented features are absent here as well.\n *\n * All usual responses (40X and 50X as well) are handled via a resolved promise, only uncompletable requests, such as\n * those being prevented by a general network error, do reject with the provided error.\n *\n * @param {String} url - the complete URL to query\n * @param {?Object} [options] - the request options\n * @param {?String} [options.method='GET'] - indicates the request method to be performed on the target resource (one of \"GET\", \"POST\", \"PUT\", \"PATCH\", \"HEAD\", \"OPTIONS\" or \"DELETE\")\n * @param {?Object} [options.headers] - an object containing additional information to be sent with the request (e.g. {\"Content-Type\": \"application/json\"} to indicate a JSON-typed request body)\n * @param {?String} [options.credentials] - accepts an \"include\" string, which will allow both CORS and same origin requests to work with cookies; the method won't send or receive cookies otherwise; the \"same-origin\" value is not supported\n * @param {?Object|String} [options.body] - the content to be transmitted in request's body; common content types include FormData, JSON, Blob, ArrayBuffer or plain text\n * @returns {FetchRequest} the request result, resolves with a FetchResponse object and rejects with error in case of a technical request error (request is not completable)\n *\n * @memberof DynamicLoading:createFetchRequest\n * @alias createFetchRequest\n * @see https://github.com/developit/unfetch\n * @see https://github.com/developit/unfetch#fetchurl-string-options-object\n * @example\n * createFetchRequest('/foo').execute().then(r => r.text()).then(txt => console.log(txt));\n * createFetchRequest('/bear', {method : 'POST', headers : {'Content-Type' : 'application/json'}, body : JSON.stringify({hungry : true})}).execute().then(r => {open(r.headers.get('location')); return r.json();})\n */\nexport function createFetchRequest(url, options){\n\tconst methodName = 'createFetchRequest';\n\n\tassert(hasValue(url), `${MODULE_NAME}:${methodName} | no url given`);\n\toptions = orDefault(options, {});\n\tassert(isPlainObject(options), `${MODULE_NAME}:${methodName} | options must be plain object`);\n\n\toptions.method = orDefault(options.method, 'GET');\n\toptions.method = ['GET', 'POST', 'PUT', 'PATCH', 'HEAD', 'OPTIONS', 'DELETE'].includes(options.method.toUpperCase())\n\t\t? options.method.toUpperCase()\n\t\t: 'GET'\n\t;\n\n\treturn {\n\t\turl,\n\t\toptions,\n\t\texecute(){\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst\n\t\t\t\t\trequest = new XMLHttpRequest(),\n\t\t\t\t\theaderKeys = [],\n\t\t\t\t\theaderEntries = [],\n\t\t\t\t\theaders = {},\n\t\t\t\t\tresponse = () => ({\n\t\t\t\t\t\tok : (parseInt(request.status, 10) >= 200) && (parseInt(request.status, 10) <= 299),\n\t\t\t\t\t\tstatusText : request.statusText,\n\t\t\t\t\t\tstatus : request.status,\n\t\t\t\t\t\turl : request.responseURL,\n\t\t\t\t\t\ttext : () => Promise.resolve(request.responseText),\n\t\t\t\t\t\tjson : () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\t\t\t\tblob : () => Promise.resolve(new Blob([request.response])),\n\t\t\t\t\t\tclone : response,\n\t\t\t\t\t\theaders : {\n\t\t\t\t\t\t\tkeys(){\n\t\t\t\t\t\t\t\treturn headerKeys;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tentries(){\n\t\t\t\t\t\t\t\treturn headerEntries;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tget(key){\n\t\t\t\t\t\t\t\treturn headers[key.toLowerCase()];\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\thas(key){\n\t\t\t\t\t\t\t\treturn key.toLowerCase() in headers;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t;\n\n\t\t\t\trequest.open(options.method, url, true);\n\n\t\t\t\trequest.onload = () => {\n\t\t\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\t\t\tkey = key.toLowerCase();\n\t\t\t\t\t\theaderKeys.push(key);\n\t\t\t\t\t\theaderEntries.push([key, value]);\n\t\t\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(response());\n\t\t\t\t};\n\n\t\t\t\trequest.onerror = reject;\n\n\t\t\t\trequest.withCredentials = (options.credentials === 'include');\n\n\t\t\t\tfor( let i in options.headers ){\n\t\t\t\t\tif( options.headers.hasOwnProperty(i) ){\n\t\t\t\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trequest.send(options.body || null);\n\t\t\t});\n\t\t}\n\t};\n}\n\n\n\n/*\n * Helper function to provide createFetchRequest with the same call signature as fetch, to make implementation\n * easily replaceable in the future.\n *\n * @private\n * @returns {Function} a fetch implementation\n */\nfunction _fetch(url, options){\n\treturn createFetchRequest(url, options).execute();\n}\n\n\n\n/**\n * @namespace DynamicLoading:polyfillFetch\n */\n\n/**\n * Polyfills window.fetch with a simple XMLHttpRequest-based implementation adapted from \"unfetch\", to provide\n * basic functionality with a compatible signature while keeping the source as small as possible.\n *\n * This polyfill should cover most basic use cases, but for complex cases you might need to polyfill something more\n * complete (for example Github's implementation: https://github.com/github/fetch).\n *\n * @param {?Boolean} [force=false] - if true, replaces a possibly present native implementation with the polyfill as well\n *\n * @memberof DynamicLoading:polyfillFetch\n * @alias polyfillFetch\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n * @see https://github.com/developit/unfetch\n * @example\n * polyfillFetch(true);\n */\nexport function polyfillFetch(force=false){\n\tforce = orDefault(force, false, 'bool');\n\n\tif( force || !isA(window.fetch, 'function') ){\n\t\twindow.fetch = _fetch;\n\t}\n}\n"]}
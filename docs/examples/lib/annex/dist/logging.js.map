{"version":3,"sources":["logging.js"],"names":["LOG_LEVELS","XLOG_CONTEXT_COUNTS","LOG_LEVEL","TRY_TO_LOG_TO_PARENT","genericConsoleMethodWrapper","name","logLevel","args","includes","indexOf","window","console","parent","apply","ex","warn","log","genericConsoleMethodWrapperFactory","Array","from","arguments","LOG_CHAINABLE_OBJECT","__documentation_for_chainable_object_of_log_execution__","setLogLevel","level","tryToLogToParent","setting","undefined","assert","clear","count","dir","dirxml","dirXml","[object Object]","err","group","groupCollapsed","groupEnd","info","profile","profileEnd","table","time","timeEnd","timeStamp","trace","forEach","obj","error","xlog","message","context","Error","stack","split","trim"],"mappings":"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","file":"logging.js","sourcesContent":["/*!\n * Module Logging\n */\n\n/**\n * @namespace Logging\n */\n\n\n\n//###( MODULE DATA )###\n\nexport const\n\tLOG_LEVELS = ['log', 'warn', 'err'],\n\tXLOG_CONTEXT_COUNTS = {}\n;\n\nexport let\n\tLOG_LEVEL = 'log',\n\tTRY_TO_LOG_TO_PARENT = false\n;\n\n\n\n//###( HELPERS )###\n\n/*\n * generically wraps console functions for chainability even if method is unavailable or fails\n * used in LOG_CHAINABLE_OBJECT below\n */\nfunction genericConsoleMethodWrapper(name, logLevel=null, ...args){\n\tname = `${name}`;\n\tlogLevel = LOG_LEVELS.includes(`${logLevel}`) ? `${logLevel}` : LOG_LEVELS[0];\n\n\tif( LOG_LEVELS.indexOf(LOG_LEVEL) <= LOG_LEVELS.indexOf(logLevel) ){\n\t\tif( typeof window.console?.[name] === 'function' ){\n\t\t\ttry {\n\t\t\t\tif( TRY_TO_LOG_TO_PARENT ){\n\t\t\t\t\tparent.console[name].apply(parent.console, args);\n\t\t\t\t} else {\n\t\t\t\t\tconsole[name].apply(console, args);\n\t\t\t\t}\n\t\t\t} catch(ex){\n\t\t\t\ttry {\n\t\t\t\t\twarn(`console call to \"${name}\" failed, implementation seemingly incompatible`);\n\t\t\t\t} catch(ex){}\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\twarn(`console call to \"${name}\" failed, is seemingly not supported`);\n\t\t\t} catch(ex){}\n\t\t}\n\t}\n\n\treturn log();\n}\n\n/*\n * prepare an executable wrapper version based on a specific function name\n * used in LOG_CHAINABLE_OBJECT below\n */\nfunction genericConsoleMethodWrapperFactory(name, logLevel){\n\treturn function(){\n\t\treturn genericConsoleMethodWrapper(name, logLevel, ...Array.from(arguments));\n\t};\n}\n\n\n\n/*\n * to make log calls chainable, this object is returned for every logging call, this offers extended functionality,\n * going far beyond log/warn/err, while keeping a very narrow interface for everyday stuff\n */\nconst LOG_CHAINABLE_OBJECT = {\n\t__documentation_for_chainable_object_of_log_execution__(){\n\t\treturn 'Use this object to chain logging calls. All standard methods are supported'\n\t\t+' (see https://developer.mozilla.org/en-US/docs/Web/API/Console) and are executed'\n\t\t+' with silent fails if not supported by the browser. See other methods in this'\n\t\t+' object for an overview. Use disable()/enable() to deactivate/activate all debug outputs'\n\t\t+' (exceptions are assert, clear, error and warn) to the console centrally'\n\t\t;\n\t},\n\tsetLogLevel(level){\n\t\tlevel = `${level}`;\n\n\t\tif( LOG_LEVELS.includes(level) ){\n\t\t\tLOG_LEVEL = level;\n\t\t}\n\n\t\treturn log();\n\t},\n\ttryToLogToParent(setting){\n\t\tsetting = (setting === undefined) ? true : !!setting;\n\t\tTRY_TO_LOG_TO_PARENT = setting;\n\n\t\treturn log();\n\t},\n\tassert : genericConsoleMethodWrapperFactory('assert'),\n\tclear : genericConsoleMethodWrapperFactory('clear'),\n\tcount : genericConsoleMethodWrapperFactory('count'),\n\tdir : genericConsoleMethodWrapperFactory('dir'),\n\tdirxml : genericConsoleMethodWrapperFactory('dirxml'),\n\tdirXml : genericConsoleMethodWrapperFactory('dirxml'),\n\terror(){\n\t\treturn err(...Array.from(arguments));\n\t},\n\tgroup : genericConsoleMethodWrapperFactory('group'),\n\tgroupCollapsed : genericConsoleMethodWrapperFactory('groupCollapsed'),\n\tgroupEnd : genericConsoleMethodWrapperFactory('groupEnd'),\n\tinfo : genericConsoleMethodWrapperFactory('info'),\n\tlog(){\n\t\treturn log(...Array.from(arguments));\n\t},\n\tprofile : genericConsoleMethodWrapperFactory('profile'),\n\tprofileEnd : genericConsoleMethodWrapperFactory('profileEnd'),\n\ttable : genericConsoleMethodWrapperFactory('table'),\n\ttime : genericConsoleMethodWrapperFactory('time'),\n\ttimeEnd : genericConsoleMethodWrapperFactory('timeEnd'),\n\ttimeStamp : genericConsoleMethodWrapperFactory('timeStamp'),\n\ttrace : genericConsoleMethodWrapperFactory('trace'),\n\twarn(){\n\t\treturn warn(...Array.from(arguments));\n\t}\n};\n\n\n\n/**\n * @namespace Logging:log\n */\n\n/**\n * Logs a message to the console. Prevents errors in browsers, that don't support this feature.\n * This method is chainable (always returns a chainable object with all methods) and wraps all\n * advanced logging methods like dir, assert and count (https://developer.mozilla.org/en-US/docs/Web/API/Console).\n *\n * Use setLogLevel() on the chainable object to globally define the current log level.\n * 'log' is the default value and allows for all logs to appear on console. 'warn' reduces logs to warnings and errors.\n * 'err' only shows errors on console. Use this to mute debug stuff in production.\n *\n * You can use the method tryToLogToParent(true/false) to instruct log to try to log to the parent window also,\n * which comes in handy if you are developing inside a same domain iframe.\n *\n * @param {...*} [...] - any number of arguments you wish to log\n * @returns {Object} - chainable logging object\n *\n * @memberof Logging:log\n * @name log\n * @example\n * log(randomVar, 'string');\n * log(false, true);\n * log().group().log(1).log(2).log(3).groupEnd().error('ouch');\n * log().setLogLevel('warn');\n * log('test', {test : 'test'}).setLogLevel('warn').warn('oh noez, but printed').log('not printed').setLogLevel('log').clear();\n * log().tryToLogToParent().log('hooray times two').tryToLogToParent(false);\n */\nexport function log(){\n\tif(\n\t\t(typeof window.console?.log === 'function')\n\t\t&& (LOG_LEVELS.indexOf(LOG_LEVEL) <= LOG_LEVELS.indexOf('log'))\n\t){\n\t\tArray.from(arguments).forEach(obj => {\n\t\t\tif( (obj  === true) || (obj === false) ){\n\t\t\t\tobj = obj ? 'true' : 'false';\n\t\t\t}\n\n\t\t\tif( TRY_TO_LOG_TO_PARENT ){\n\t\t\t\tparent.console.log(obj);\n\t\t\t} else {\n\t\t\t\tconsole.log(obj);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn LOG_CHAINABLE_OBJECT;\n}\n\n\n\n/**\n * @namespace Logging:warn\n **/\n\n/**\n * Logs a warning to the console. Prevents errors in browsers, that don't support this feature.\n *\n * @param {...*} [...] - add any number of arguments you wish to log\n *\n * @memberof Logging:warn\n * @name warn\n * @example\n * warn('warning yo!');\n * warn(randomVar, 'string');\n * warn(false);\n * warn(true);\n */\nexport function warn(){\n\tif(\n\t\t(typeof window.console?.warn === 'function')\n\t\t&& (LOG_LEVELS.indexOf(LOG_LEVEL) <= LOG_LEVELS.indexOf('warn'))\n\t){\n\t\tArray.from(arguments).forEach(obj => {\n\t\t\tif( (obj  === true) || (obj === false) ){\n\t\t\t\tobj = obj ? 'true' : 'false';\n\t\t\t}\n\n\t\t\tif( TRY_TO_LOG_TO_PARENT ){\n\t\t\t\tparent.console.warn(obj);\n\t\t\t} else {\n\t\t\t\tconsole.warn(obj);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn LOG_CHAINABLE_OBJECT;\n}\n\n\n\n/**\n * @namespace Logging:err\n */\n\n/**\n * Logs an error to the console. Prevents errors in browsers, that don't support this feature.\n *\n * This function is not named error because that already might be misleading with the Error object and is not a verb.\n *\n * @param {...*} [...] - add any number of arguments you wish to log\n *\n * @memberof Logging:err\n * @name err\n * @example\n * err('error yo!');\n * err(randomVar, 'string');\n * err(false);\n * err(true);\n */\nexport function err(){\n\tif(\n\t\t(typeof window.console?.error === 'function')\n\t\t&& (LOG_LEVELS.indexOf(LOG_LEVEL) <= LOG_LEVELS.indexOf('err'))\n\t){\n\t\tArray.from(arguments).forEach(obj => {\n\t\t\tif( (obj  === true) || (obj === false) ){\n\t\t\t\tobj = obj ? 'true' : 'false';\n\t\t\t}\n\n\t\t\tif( TRY_TO_LOG_TO_PARENT ){\n\t\t\t\tparent.console.error(obj);\n\t\t\t} else {\n\t\t\t\tconsole.error(obj);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn LOG_CHAINABLE_OBJECT;\n}\n\n\n\n/**\n * @namespace Logging:xlog\n */\n\n/**\n * X marks the spot. A very simple method for urgent cases of printf-debugging.\n * Simply logs the context of the call to the console, also providing a counter,\n * counting the executions from that context.\n *\n * For real detailed debugging, you have to instantiate/throw an error and work with that information,\n * this is just for quick checking.\n *\n * This method uses Error.stack, which is a rather wonky and unstable feature feature. Use this for debugging and better\n * remove it again afterwards. For more info on Error.stack, read:\n * https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\n *\n * @param {?String} [message] - an optional message to be printed besides the context information\n *\n * @memberof Logging:xlog\n * @name xlog\n * @example\n * for( let i = 0; i < 10; i++ ){\n *   xlog('purely optional message');\n * }\n */\nexport function xlog(message){\n\tlet context;\n\n\ttry {\n\t\tcontext = (new Error()).stack.split('\\n')[2].trim();\n\t} catch(ex){\n\t\tcontext = 'anonymous';\n\t}\n\n\tif( XLOG_CONTEXT_COUNTS[context] === undefined ){\n\t\tXLOG_CONTEXT_COUNTS[context] = 0;\n\t}\n\tXLOG_CONTEXT_COUNTS[context]++;\n\n\tlog(`<<XLOG>> ${context} [${XLOG_CONTEXT_COUNTS[context]}]${!!message ? ' | '+message : ''}`);\n}\n"]}
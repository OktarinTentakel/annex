{"version":3,"file":"urls.js","names":["MODULE_NAME","hasValue","orDefault","size","assert","log","COMMON_TOP_LEVEL_DOMAINS","urlParameter","url","parameter","searchParams","startsWith","URLSearchParams","protocol","window","location","URL","Error","fMapParameterValue","parameterValue","parameterValues","getAll","length","Array","from","Set","map","parameters","keys","forEach","parameterName","urlParameters","urlAnchor","withCaret","urlParts","split","anchor","decodeURIComponent","trim","addNextParameter","next","paramName","assertSameBaseDomain","additionalTopLevelDomains","__methodName__","evaluateBaseDomain","hostname","urlParams","search","has","info","get","href","set","origin","pathname","toString","replaceAll","hash","addCacheBuster","buster","Date","now","domain","error","topLevelDomains","tld","domainParts","reverse","baseDomain","i","slice","join"],"sources":["urls.js"],"mappings":"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","sourcesContent":["/*!\n * Module Urls\n */\n\n/**\n * @namespace Urls\n */\n\nconst MODULE_NAME = 'Urls';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {hasValue, orDefault, size, assert} from './basic.js';\nimport {log} from './logging.js';\n\n\n\n//###[ DATA ]###########################################################################################################\n\nexport const COMMON_TOP_LEVEL_DOMAINS = [\n\t'aero', 'biz', 'cat', 'com', 'coop', 'edu', 'gov', 'info', 'int', 'jobs', 'mil', 'mobi', 'museum', 'name', 'net',\n\t'org', 'travel', 'ac', 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am', 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw',\n\t'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn', 'bo', 'br', 'bs', 'bt', 'bv', 'bw', 'by',\n\t'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cs', 'cu', 'cv', 'cx', 'cy',\n\t'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm',\n\t'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu',\n\t'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je',\n\t'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk',\n\t'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr',\n\t'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu',\n\t'nz', 'om', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro',\n\t'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'st', 'su',\n\t'sv', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tm', 'tn', 'to', 'tp', 'tr', 'tt', 'tv', 'tw', 'tz',\n\t'ua', 'ug', 'uk', 'um', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'yu',\n\t'za', 'zm', 'zr', 'zw', 'local'\n];\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace Urls:urlParameter\n */\n\n/**\n * Searches for and returns parameters embedded in the provided url containing a query string\n * (make sure all values are url encoded).\n *\n * You may also just provide the query string.\n *\n * Returns a single parameter's value if a parameter name is given, otherwise returns dictionary with all parameters\n * as keys and the associated parameter value.\n *\n * If a parameter has more than one value the values are returned as an array, whether being requested by name\n * or in the dictionary containing all params.\n *\n * If a parameter is set, but has no defined value (name present, but no = before next param)\n * the value is returned as boolean true.\n *\n * @param {String} url - the url containing the parameter string, is expected to be url-encoded (at least stuff like [+?&=]), may also be only the query string (_must_ begin with ?)\n * @param {?String} [parameter=null] - the name of the parameter to extract\n * @throws error if given url is not usable\n * @returns {null|true|String|Array|Object} null in case the parameter doesn't exist, true in case it exists but has no value, a string in case the parameter has one value, or an array of values, or a dictionary object of all available parameters with corresponding values\n *\n * @memberof Urls:urlParameter\n * @alias urlParameter\n * @example\n * const hasKittens = urlParameter('//foobar.com/bar?has_kittens', 'has_kittens');\n * => true\n * const hasDoggies = urlParameter('has_doggies=yes&has_doggies', 'has_doggies');\n * => ['yes', true]\n * const allTheData = urlParameter('?foo=foo&bar=bar&bar=barbar&bar');\n * => {foo : 'foo', bar : ['bar', 'barbar', true]}\n */\nexport function urlParameter(url, parameter=null){\n\tconst __methodName__ = 'urlParameter';\n\n\turl = orDefault(url, '', 'str');\n\tparameter = orDefault(parameter, null, 'str');\n\n\tlet searchParams;\n\tif( !url.startsWith('?') ){\n\t\tif(\t!url.startsWith('http://') && !url.startsWith('https://') ){\n\t\t\tconst protocol = window.location.protocol;\n\t\t\turl = `${url.startsWith('//') ? protocol : protocol+'//'}${url}`;\n\t\t}\n\n\t\ttry {\n\t\t\tsearchParams = new URL(url).searchParams;\n\t\t} catch {\n\t\t\tthrow new Error(`${MODULE_NAME}:${__methodName__} | invalid url \"${url}\"`);\n\t\t}\n\t} else {\n\t\tsearchParams = new URLSearchParams(url);\n\t}\n\n\tconst fMapParameterValue = parameterValue => ((parameterValue === '') ? true : parameterValue);\n\n\tif( hasValue(parameter) ){\n\t\tconst parameterValues = searchParams.getAll(parameter);\n\t\tif( parameterValues.length === 0 ){\n\t\t\treturn null;\n\t\t} else if( parameterValues.length === 1 ){\n\t\t\treturn fMapParameterValue(parameterValues[0]);\n\t\t} else {\n\t\t\treturn Array.from(new Set(parameterValues.map(fMapParameterValue)));\n\t\t}\n\t} else {\n\t\tconst parameters = {};\n\t\tArray.from(searchParams.keys()).forEach(parameterName => {\n\t\t\tconst parameterValues = searchParams.getAll(parameterName);\n\t\t\tif( parameterValues.length > 0 ){\n\t\t\t\tparameters[parameterName] =\n\t\t\t\t\t(parameterValues.length === 1)\n\t\t\t\t\t? fMapParameterValue(parameterValues[0])\n\t\t\t\t\t: Array.from(new Set(parameterValues.map(fMapParameterValue)))\n\t\t\t\t;\n\t\t\t}\n\t\t});\n\t\treturn (size(parameters) > 0) ? parameters : null;\n\t}\n}\n\n\n\n/**\n * @namespace Urls:urlParameters\n */\n\n/**\n * Searches for and returns parameters embedded in provided url with a parameter string.\n *\n * Semantic shortcut version of urlParameter without any given parameter.\n *\n * @param {String} url - the url containing the parameter string, is expected to be url-encoded (at least stuff like [+?&=]), may also be only the query string (_must_ begin with ?)\n * @throws error if given url is not usable\n * @returns {Object|null} dictionary object of all parameters or null if url has no parameters\n *\n * @memberof Urls:urlParameters\n * @alias urlParameters\n * @see urlParameter\n * @example\n * const allParams = urlParameters('http://www.foobar.com?foo=foo&bar=bar&bar=barbar&bar');\n * => {foo : 'foo', bar : ['bar', 'barbar', true]}\n */\nexport function urlParameters(url){\n\treturn urlParameter(url);\n}\n\n\n\n/**\n * @namespace Urls:urlAnchor\n */\n\n/**\n * Returns the currently set URL-Anchor on given URL.\n *\n * Theoretically, this function also works with any other string containing a hash (as long as there is \"#\" included),\n * since this implementation does not lean on \"new URL()\", but is a simple string operation.\n *\n * In comparison to \"location.hash\", this function actually decodes the hash automatically.\n *\n * @param {String} url - the url, in which to search for a hash\n * @param {?Boolean} [withCaret=false] - defines if the returned anchor value should contain leading \"#\"\n * @returns {String|null} current anchor value or null if no anchor was found\n *\n * @memberof Urls:urlAnchor\n * @alias urlAnchor\n * @example\n * const anchorWithoutCaret = urlAnchor('https://foobar.com#test');\n * => 'test'\n * const hrefAnchorWithCaret = urlAnchor(linkElement.getAttribute('href'), true);\n * => '#test'\n * const decodedAnchorFromLocation = urlAnchor(window.location.hash);\n */\nexport function urlAnchor(url, withCaret=false){\n\turl = orDefault(url, '', 'str');\n\twithCaret = orDefault(withCaret, false, 'bool');\n\n\tconst urlParts = url.split('#');\n\n\tlet anchor = (urlParts.length > 1) ? decodeURIComponent(urlParts[1].trim()) : null;\n\tif( anchor === '' ){\n\t\tanchor = null;\n\t}\n\tif( withCaret && hasValue(anchor) ){\n\t\tanchor = `#${anchor}`;\n\t}\n\n\treturn anchor;\n}\n\n\n\n/**\n * @namespace Urls:addNextParameter\n */\n\n/**\n * Adds a \"next\"-parameter to a given URL. If there is already a parameter of that name, it will be replaced.\n *\n * A \"next\"-parameter is usually used to relay a second URL, which should be redirected to after something happens,\n * such as a login or another (possibly automatic) action.\n *\n * @param {?String} [url=''] - the URL to add the next parameter to, if left empty, will be \"\", which is synonymous with the current URL\n * @param {?String} [next=''] - the next URL to add as parameter to the given URL (will automatically be URL-encoded)\n * @param {?String} [paramName='next'] - the name of the next parameter\n * @param {?Boolean} [assertSameBaseDomain=false] - if true, url and next must have the same base domain (ignoring subdomains), to prevent injections\n * @param {?Array<String>} [additionalTopLevelDomains=null] - this function uses a list of common TLDs (if assertSameBaseDomain is true), if yours is missing, you may provide it, using this parameter\n * @throws error if assertBaseDomain is true an the base domains of url and next differ\n * @returns {String} the transformed URL with the added next parameter\n *\n * @memberof Urls:addNextParameter\n * @alias addNextParameter\n * @example\n * addNextParameter('https://foobar.com', 'https://foo.bar', 'redirect');\n * => 'https://foobar.com?redirect=https%3A%2F%2Ffoo.bar'\n * addNextParameter('https://foobar.com?next=https%3A%2F%2Ffoo.bar', 'https://kittens.com');\n * => 'https://foobar.com?next=https%3A%2F%2Fkittens.com'\n */\nexport function addNextParameter(url, next, paramName='next', assertSameBaseDomain=false, additionalTopLevelDomains=null){\n\tconst __methodName__ = 'addNextParameter';\n\n\turl = new URL(orDefault(url, '', 'str'));\n\tnext = new URL(orDefault(next, '', 'str'));\n\tparamName = orDefault(paramName, 'next', 'str');\n\tassertSameBaseDomain = orDefault(assertSameBaseDomain, true, 'bool');\n\n\tif( assertSameBaseDomain ){\n\t\tassert(\n\t\t\tevaluateBaseDomain(url.hostname, additionalTopLevelDomains) === evaluateBaseDomain(next.hostname, additionalTopLevelDomains),\n\t\t\t`${MODULE_NAME}:${__methodName__} | different base domains in url and next`\n\t\t);\n\t}\n\n\tconst urlParams = new URLSearchParams(url.search);\n\n\tif( urlParams.has(paramName) ){\n\t\tlog().info(`${MODULE_NAME}:${__methodName__} | replaced \"${paramName}\" value \"${urlParams.get(paramName)}\" with \"${next.href}\"`);\n\t}\n\n\turlParams.set(paramName, next.href);\n\n\treturn `${url.origin}${url.pathname}?${urlParams.toString().replaceAll('+', '%20')}${url.hash}`;\n}\n\n\n\n/**\n * @namespace Urls:addCacheBuster\n */\n\n/**\n * Adds a cache busting parameter to a given URL. If there is already a parameter of that name, it will be replaced.\n * This prevents legacy browsers from caching requests by changing the request URL dynamically, based on current time.\n *\n * @param {?String} [url=''] - the URL to add the cache busting parameter to, if left empty, will be \"\", which is synonymous with the current URL\n * @param {?String} [paramName='_'] - the name of the cache busting parameter\n * @returns {String} the transformed URL with the added cache busting parameter\n *\n * @memberof Urls:addCacheBuster\n * @alias addCacheBuster\n * @example\n * addCacheBuster('https://foobar.com');\n * => 'https://foobar.com?_=1648121948009'\n * addCacheBuster('https://foobar.com?next=https%3A%2F%2Ffoo.bar', 'nocache');\n * => 'https://foobar.com?next=https%3A%2F%2Ffoo.bar&nocache=1648121948009'\n */\nexport function addCacheBuster(url, paramName='_'){\n\tconst __methodName__ = 'addCacheBuster';\n\n\turl = new URL(orDefault(url, '', 'str'));\n\n\tconst\n\t\turlParams = new URLSearchParams(url.search),\n\t\tbuster = Date.now()\n\t;\n\n\tif( urlParams.has(paramName) ){\n\t\tlog().info(`${MODULE_NAME}:${__methodName__} | replaced \"${paramName}\" value \"${urlParams.get(paramName)}\" with \"${buster}\"`);\n\t}\n\n\turlParams.set(paramName, buster);\n\n\treturn `${url.origin}${url.pathname}?${urlParams}${url.hash}`;\n}\n\n\n\n/**\n * @namespace Urls:evaluateBaseDomain\n */\n\n/**\n * Walks a domain string (e.g. foobar.barfoo.co.uk) backwards, separated by dots, skips over all top level\n * domains it finds and includes the first non-TLD value to retrieve the base domain without any subdomains\n * (e.g. barfoo.co.uk).\n *\n * This is not completely fool-proof in case of very exotic TLDs, but quite robust in most cases.\n *\n * This method is particularly helpful if you want to set a domain cookie while being on a subdomain.\n *\n * @param {String} domain - the domain string (hostname), which should be evaluated; you may also provide a full, parsable URL, from which to extract the hostname\n * @param {?Array<String>} [additionalTopLevelDomains=null] - this function uses a list of common TLDs, if yours is missing, you may provide it, using this parameter\n * @returns {String} the evaluated base domain string\n *\n * @memberof Urls:evaluateBaseDomain\n * @alias evaluateBaseDomain\n * @example\n * evaluateBaseDomain('foobar.barfoo.co.uk');\n * => 'barfoo.co.uk'\n * evaluateBaseDomain('https://foobar.barfoo.co.uk/?foo=bar');\n * => 'barfoo.co.uk'\n */\nexport function evaluateBaseDomain(domain, additionalTopLevelDomains=null){\n\tdomain = orDefault(domain, window.location.hostname, 'str');\n\tadditionalTopLevelDomains = orDefault(additionalTopLevelDomains, null, 'arr');\n\n\tlet url;\n\ttry {\n\t\turl = new URL(domain);\n\t} catch(error){\n\t\turl = null;\n\t}\n\tif( hasValue(url) ){\n\t\tdomain = url.hostname;\n\t}\n\n\tconst\n\t\ttopLevelDomains = new Set([\n\t\t\t...COMMON_TOP_LEVEL_DOMAINS,\n\t\t\t...(hasValue(additionalTopLevelDomains) ? additionalTopLevelDomains.map(tld => `${tld}`) : [])\n\t\t]),\n\t\tdomainParts = domain.split('.').reverse()\n\t;\n\n\tlet baseDomain = domain;\n\n\tif( domainParts.length > 2 ){\n\t\tlet i;\n\n\t\tfor( i = 0; i < domainParts.length; i++ ){\n\t\t\tif( !topLevelDomains.has(domainParts[i]) ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbaseDomain = domainParts.slice(0, i + 1).reverse().join('.');\n\t}\n\n\treturn baseDomain;\n}\n"]}
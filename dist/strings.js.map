{"version":3,"file":"strings.js","names":["MODULE_NAME","isA","orDefault","isNaN","hasValue","isPlainObject","SLUGIFY_LATINMAP","replace","subject","search","concat","tmp","forEach","searchTerm","index","length","undefined","String","prototype","replaceAll","split","join","truncate","maxLength","suffix","Error","slice","glue","strings","format","template","replacements","idx","explicit","implicit","fResolve","object","key","value","call","formatters","int","radix","res","parseInt","float","precision","ex","power","Math","pow","round","parseFloat","match","literal","ref","formatter","formatterArg","keyParts","formatterParts","formatterName","test","exec","fLookup","slugify","text","additionalMap","toLowerCase","char","maskForSelector","str","maskForRegEx","maskForHtml","escape","document","createElement","textContent","innerHTML","unmaskFromHtml","html"],"sources":["strings.js"],"mappings":";;;AAQA,MAAMA,YAAc,iBAMZC,IAAKC,UAAWC,MAAOC,SAAUC,kBAAoB,aAM7D,MAAMC,iBAAmB,CACxB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,IACrG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI,IAC9G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC/G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC5G,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAC3G,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAC/G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAC9G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC7G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5G,IAAI,KAAK,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9G,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,YA8B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","sourcesContent":["/*!\n * Module Strings\n */\n\n/**\n * @namespace Strings\n */\n\nconst MODULE_NAME = 'Strings';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {isA, orDefault, isNaN, hasValue, isPlainObject} from './basic.js';\n\n\n\n//###[ DATA ]###########################################################################################################\n\nconst SLUGIFY_LATINMAP = {\n\t'Á':'A','Ă':'A','Ắ':'A','Ặ':'A','Ằ':'A','Ẳ':'A','Ẵ':'A','Ǎ':'A','Â':'A','Ấ':'A','Ậ':'A','Ầ':'A','Ẩ':'A','Ẫ':'A',\n\t'Ä':'A','Ǟ':'A','Ȧ':'A','Ǡ':'A','Ạ':'A','Ȁ':'A','À':'A','Ả':'A','Ȃ':'A','Ā':'A','Ą':'A','Å':'A','Ǻ':'A','Ḁ':'A',\n\t'Ⱥ':'A','Ã':'A','Ꜳ':'AA','Æ':'AE','Ǽ':'AE','Ǣ':'AE','Ꜵ':'AO','Ꜷ':'AU','Ꜹ':'AV','Ꜻ':'AV','Ꜽ':'AY','Ḃ':'B',\n\t'Ḅ':'B','Ɓ':'B','Ḇ':'B','Ƀ':'B','Ƃ':'B','Ć':'C','Č':'C','Ç':'C','Ḉ':'C','Ĉ':'C','Ċ':'C','Ƈ':'C','Ȼ':'C','Ď':'D',\n\t'Ḑ':'D','Ḓ':'D','Ḋ':'D','Ḍ':'D','Ɗ':'D','Ḏ':'D','ǲ':'D','ǅ':'D','Đ':'D','Ƌ':'D','Ǳ':'DZ','Ǆ':'DZ','É':'E','Ĕ':'E',\n\t'Ě':'E','Ȩ':'E','Ḝ':'E','Ê':'E','Ế':'E','Ệ':'E','Ề':'E','Ể':'E','Ễ':'E','Ḙ':'E','Ë':'E','Ė':'E','Ẹ':'E','Ȅ':'E',\n\t'È':'E','Ẻ':'E','Ȇ':'E','Ē':'E','Ḗ':'E','Ḕ':'E','Ę':'E','Ɇ':'E','Ẽ':'E','Ḛ':'E','Ꝫ':'ET','Ḟ':'F','Ƒ':'F','Ǵ':'G',\n\t'Ğ':'G','Ǧ':'G','Ģ':'G','Ĝ':'G','Ġ':'G','Ɠ':'G','Ḡ':'G','Ǥ':'G','Ḫ':'H','Ȟ':'H','Ḩ':'H','Ĥ':'H','Ⱨ':'H','Ḧ':'H',\n\t'Ḣ':'H','Ḥ':'H','Ħ':'H','Í':'I','Ĭ':'I','Ǐ':'I','Î':'I','Ï':'I','Ḯ':'I','İ':'I','Ị':'I','Ȉ':'I','Ì':'I','Ỉ':'I',\n\t'Ȋ':'I','Ī':'I','Į':'I','Ɨ':'I','Ĩ':'I','Ḭ':'I','Ꝺ':'D','Ꝼ':'F','Ᵹ':'G','Ꞃ':'R','Ꞅ':'S','Ꞇ':'T','Ꝭ':'IS','Ĵ':'J',\n\t'Ɉ':'J','Ḱ':'K','Ǩ':'K','Ķ':'K','Ⱪ':'K','Ꝃ':'K','Ḳ':'K','Ƙ':'K','Ḵ':'K','Ꝁ':'K','Ꝅ':'K','Ĺ':'L','Ƚ':'L','Ľ':'L',\n\t'Ļ':'L','Ḽ':'L','Ḷ':'L','Ḹ':'L','Ⱡ':'L','Ꝉ':'L','Ḻ':'L','Ŀ':'L','Ɫ':'L','ǈ':'L','Ł':'L','Ǉ':'LJ','Ḿ':'M','Ṁ':'M',\n\t'Ṃ':'M','Ɱ':'M','Ń':'N','Ň':'N','Ņ':'N','Ṋ':'N','Ṅ':'N','Ṇ':'N','Ǹ':'N','Ɲ':'N','Ṉ':'N','Ƞ':'N','ǋ':'N','Ñ':'N',\n\t'Ǌ':'NJ','Ó':'O','Ŏ':'O','Ǒ':'O','Ô':'O','Ố':'O','Ộ':'O','Ồ':'O','Ổ':'O','Ỗ':'O','Ö':'O','Ȫ':'O','Ȯ':'O','Ȱ':'O',\n\t'Ọ':'O','Ő':'O','Ȍ':'O','Ò':'O','Ỏ':'O','Ơ':'O','Ớ':'O','Ợ':'O','Ờ':'O','Ở':'O','Ỡ':'O','Ȏ':'O','Ꝋ':'O','Ꝍ':'O',\n\t'Ō':'O','Ṓ':'O','Ṑ':'O','Ɵ':'O','Ǫ':'O','Ǭ':'O','Ø':'O','Ǿ':'O','Õ':'O','Ṍ':'O','Ṏ':'O','Ȭ':'O','Ƣ':'OI','Ꝏ':'OO',\n\t'Ɛ':'E','Ɔ':'O','Ȣ':'OU','Ṕ':'P','Ṗ':'P','Ꝓ':'P','Ƥ':'P','Ꝕ':'P','Ᵽ':'P','Ꝑ':'P','Ꝙ':'Q','Ꝗ':'Q','Ŕ':'R','Ř':'R',\n\t'Ŗ':'R','Ṙ':'R','Ṛ':'R','Ṝ':'R','Ȑ':'R','Ȓ':'R','Ṟ':'R','Ɍ':'R','Ɽ':'R','Ꜿ':'C','Ǝ':'E','Ś':'S','Ṥ':'S','Š':'S',\n\t'Ṧ':'S','Ş':'S','Ŝ':'S','Ș':'S','Ṡ':'S','Ṣ':'S','Ṩ':'S','ẞ':'SS','Ť':'T','Ţ':'T','Ṱ':'T','Ț':'T','Ⱦ':'T','Ṫ':'T',\n\t'Ṭ':'T','Ƭ':'T','Ṯ':'T','Ʈ':'T','Ŧ':'T','Ɐ':'A','Ꞁ':'L','Ɯ':'M','Ʌ':'V','Ꜩ':'TZ','Ú':'U','Ŭ':'U','Ǔ':'U','Û':'U',\n\t'Ṷ':'U','Ü':'U','Ǘ':'U','Ǚ':'U','Ǜ':'U','Ǖ':'U','Ṳ':'U','Ụ':'U','Ű':'U','Ȕ':'U','Ù':'U','Ủ':'U','Ư':'U','Ứ':'U',\n\t'Ự':'U','Ừ':'U','Ử':'U','Ữ':'U','Ȗ':'U','Ū':'U','Ṻ':'U','Ų':'U','Ů':'U','Ũ':'U','Ṹ':'U','Ṵ':'U','Ꝟ':'V','Ṿ':'V',\n\t'Ʋ':'V','Ṽ':'V','Ꝡ':'VY','Ẃ':'W','Ŵ':'W','Ẅ':'W','Ẇ':'W','Ẉ':'W','Ẁ':'W','Ⱳ':'W','Ẍ':'X','Ẋ':'X','Ý':'Y','Ŷ':'Y',\n\t'Ÿ':'Y','Ẏ':'Y','Ỵ':'Y','Ỳ':'Y','Ƴ':'Y','Ỷ':'Y','Ỿ':'Y','Ȳ':'Y','Ɏ':'Y','Ỹ':'Y','Ź':'Z','Ž':'Z','Ẑ':'Z','Ⱬ':'Z',\n\t'Ż':'Z','Ẓ':'Z','Ȥ':'Z','Ẕ':'Z','Ƶ':'Z','Ĳ':'IJ','Œ':'OE','ᴀ':'A','ᴁ':'AE','ʙ':'B','ᴃ':'B','ᴄ':'C','ᴅ':'D','ᴇ':'E',\n\t'ꜰ':'F','ɢ':'G','ʛ':'G','ʜ':'H','ɪ':'I','ʁ':'R','ᴊ':'J','ᴋ':'K','ʟ':'L','ᴌ':'L','ᴍ':'M','ɴ':'N','ᴏ':'O','ɶ':'OE',\n\t'ᴐ':'O','ᴕ':'OU','ᴘ':'P','ʀ':'R','ᴎ':'N','ᴙ':'R','ꜱ':'S','ᴛ':'T','ⱻ':'E','ᴚ':'R','ᴜ':'U','ᴠ':'V','ᴡ':'W','ʏ':'Y',\n\t'ᴢ':'Z','á':'a','ă':'a','ắ':'a','ặ':'a','ằ':'a','ẳ':'a','ẵ':'a','ǎ':'a','â':'a','ấ':'a','ậ':'a','ầ':'a','ẩ':'a',\n\t'ẫ':'a','ä':'a','ǟ':'a','ȧ':'a','ǡ':'a','ạ':'a','ȁ':'a','à':'a','ả':'a','ȃ':'a','ā':'a','ą':'a','ᶏ':'a','ẚ':'a',\n\t'å':'a','ǻ':'a','ḁ':'a','ⱥ':'a','ã':'a','ꜳ':'aa','æ':'ae','ǽ':'ae','ǣ':'ae','ꜵ':'ao','ꜷ':'au','ꜹ':'av','ꜻ':'av',\n\t'ꜽ':'ay','ḃ':'b','ḅ':'b','ɓ':'b','ḇ':'b','ᵬ':'b','ᶀ':'b','ƀ':'b','ƃ':'b','ɵ':'o','ć':'c','č':'c','ç':'c','ḉ':'c',\n\t'ĉ':'c','ɕ':'c','ċ':'c','ƈ':'c','ȼ':'c','ď':'d','ḑ':'d','ḓ':'d','ȡ':'d','ḋ':'d','ḍ':'d','ɗ':'d','ᶑ':'d','ḏ':'d',\n\t'ᵭ':'d','ᶁ':'d','đ':'d','ɖ':'d','ƌ':'d','ı':'i','ȷ':'j','ɟ':'j','ʄ':'j','ǳ':'dz','ǆ':'dz','é':'e','ĕ':'e','ě':'e',\n\t'ȩ':'e','ḝ':'e','ê':'e','ế':'e','ệ':'e','ề':'e','ể':'e','ễ':'e','ḙ':'e','ë':'e','ė':'e','ẹ':'e','ȅ':'e','è':'e',\n\t'ẻ':'e','ȇ':'e','ē':'e','ḗ':'e','ḕ':'e','ⱸ':'e','ę':'e','ᶒ':'e','ɇ':'e','ẽ':'e','ḛ':'e','ꝫ':'et','ḟ':'f','ƒ':'f',\n\t'ᵮ':'f','ᶂ':'f','ǵ':'g','ğ':'g','ǧ':'g','ģ':'g','ĝ':'g','ġ':'g','ɠ':'g','ḡ':'g','ᶃ':'g','ǥ':'g','ḫ':'h','ȟ':'h',\n\t'ḩ':'h','ĥ':'h','ⱨ':'h','ḧ':'h','ḣ':'h','ḥ':'h','ɦ':'h','ẖ':'h','ħ':'h','ƕ':'hv','í':'i','ĭ':'i','ǐ':'i','î':'i',\n\t'ï':'i','ḯ':'i','ị':'i','ȉ':'i','ì':'i','ỉ':'i','ȋ':'i','ī':'i','į':'i','ᶖ':'i','ɨ':'i','ĩ':'i','ḭ':'i','ꝺ':'d',\n\t'ꝼ':'f','ᵹ':'g','ꞃ':'r','ꞅ':'s','ꞇ':'t','ꝭ':'is','ǰ':'j','ĵ':'j','ʝ':'j','ɉ':'j','ḱ':'k','ǩ':'k','ķ':'k','ⱪ':'k',\n\t'ꝃ':'k','ḳ':'k','ƙ':'k','ḵ':'k','ᶄ':'k','ꝁ':'k','ꝅ':'k','ĺ':'l','ƚ':'l','ɬ':'l','ľ':'l','ļ':'l','ḽ':'l','ȴ':'l',\n\t'ḷ':'l','ḹ':'l','ⱡ':'l','ꝉ':'l','ḻ':'l','ŀ':'l','ɫ':'l','ᶅ':'l','ɭ':'l','ł':'l','ǉ':'lj','ſ':'s','ẜ':'s','ẛ':'s',\n\t'ẝ':'s','ḿ':'m','ṁ':'m','ṃ':'m','ɱ':'m','ᵯ':'m','ᶆ':'m','ń':'n','ň':'n','ņ':'n','ṋ':'n','ȵ':'n','ṅ':'n','ṇ':'n',\n\t'ǹ':'n','ɲ':'n','ṉ':'n','ƞ':'n','ᵰ':'n','ᶇ':'n','ɳ':'n','ñ':'n','ǌ':'nj','ó':'o','ŏ':'o','ǒ':'o','ô':'o','ố':'o',\n\t'ộ':'o','ồ':'o','ổ':'o','ỗ':'o','ö':'o','ȫ':'o','ȯ':'o','ȱ':'o','ọ':'o','ő':'o','ȍ':'o','ò':'o','ỏ':'o','ơ':'o',\n\t'ớ':'o','ợ':'o','ờ':'o','ở':'o','ỡ':'o','ȏ':'o','ꝋ':'o','ꝍ':'o','ⱺ':'o','ō':'o','ṓ':'o','ṑ':'o','ǫ':'o','ǭ':'o',\n\t'ø':'o','ǿ':'o','õ':'o','ṍ':'o','ṏ':'o','ȭ':'o','ƣ':'oi','ꝏ':'oo','ɛ':'e','ᶓ':'e','ɔ':'o','ᶗ':'o','ȣ':'ou','ṕ':'p',\n\t'ṗ':'p','ꝓ':'p','ƥ':'p','ᵱ':'p','ᶈ':'p','ꝕ':'p','ᵽ':'p','ꝑ':'p','ꝙ':'q','ʠ':'q','ɋ':'q','ꝗ':'q','ŕ':'r','ř':'r',\n\t'ŗ':'r','ṙ':'r','ṛ':'r','ṝ':'r','ȑ':'r','ɾ':'r','ᵳ':'r','ȓ':'r','ṟ':'r','ɼ':'r','ᵲ':'r','ᶉ':'r','ɍ':'r','ɽ':'r',\n\t'ↄ':'c','ꜿ':'c','ɘ':'e','ɿ':'r','ś':'s','ṥ':'s','š':'s','ṧ':'s','ş':'s','ŝ':'s','ș':'s','ṡ':'s','ṣ':'s','ṩ':'s',\n\t'ʂ':'s','ᵴ':'s','ᶊ':'s','ȿ':'s','ɡ':'g','ß':'ss','ᴑ':'o','ᴓ':'o','ᴝ':'u','ť':'t','ţ':'t','ṱ':'t','ț':'t','ȶ':'t',\n\t'ẗ':'t','ⱦ':'t','ṫ':'t','ṭ':'t','ƭ':'t','ṯ':'t','ᵵ':'t','ƫ':'t','ʈ':'t','ŧ':'t','ᵺ':'th','ɐ':'a','ᴂ':'ae','ǝ':'e',\n\t'ᵷ':'g','ɥ':'h','ʮ':'h','ʯ':'h','ᴉ':'i','ʞ':'k','ꞁ':'l','ɯ':'m','ɰ':'m','ᴔ':'oe','ɹ':'r','ɻ':'r','ɺ':'r','ⱹ':'r',\n\t'ʇ':'t','ʌ':'v','ʍ':'w','ʎ':'y','ꜩ':'tz','ú':'u','ŭ':'u','ǔ':'u','û':'u','ṷ':'u','ü':'u','ǘ':'u','ǚ':'u','ǜ':'u',\n\t'ǖ':'u','ṳ':'u','ụ':'u','ű':'u','ȕ':'u','ù':'u','ủ':'u','ư':'u','ứ':'u','ự':'u','ừ':'u','ử':'u','ữ':'u','ȗ':'u',\n\t'ū':'u','ṻ':'u','ų':'u','ᶙ':'u','ů':'u','ũ':'u','ṹ':'u','ṵ':'u','ᵫ':'ue','ꝸ':'um','ⱴ':'v','ꝟ':'v','ṿ':'v','ʋ':'v',\n\t'ᶌ':'v','ⱱ':'v','ṽ':'v','ꝡ':'vy','ẃ':'w','ŵ':'w','ẅ':'w','ẇ':'w','ẉ':'w','ẁ':'w','ⱳ':'w','ẘ':'w','ẍ':'x','ẋ':'x',\n\t'ᶍ':'x','ý':'y','ŷ':'y','ÿ':'y','ẏ':'y','ỵ':'y','ỳ':'y','ƴ':'y','ỷ':'y','ỿ':'y','ȳ':'y','ẙ':'y','ɏ':'y','ỹ':'y',\n\t'ź':'z','ž':'z','ẑ':'z','ʑ':'z','ⱬ':'z','ż':'z','ẓ':'z','ȥ':'z','ẕ':'z','ᵶ':'z','ᶎ':'z','ʐ':'z','ƶ':'z','ɀ':'z',\n\t'ﬀ':'ff','ﬃ':'ffi','ﬄ':'ffl','ﬁ':'fi','ﬂ':'fl','ĳ':'ij','œ':'oe','ﬆ':'st','ₐ':'a','ₑ':'e','ᵢ':'i','ⱼ':'j','ₒ':'o',\n\t'ᵣ':'r','ᵤ':'u','ᵥ':'v','ₓ':'x'\n};\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace Strings:replace\n */\n\n/**\n * Offers similar functionality to PHP's str_replace or ES2021's replaceAll and avoids RegExps for this task.\n * Replaces occurrences of search in subject with replace. search and replace may be arrays.\n * If search is an array and replace is a string, all phrases in the array will be replaced with one string.\n * If replace is an array itself, phrases and replacements are matched by index.\n * Missing replacements are treated as an empty string (for example: if your array lengths do not match).\n *\n * Uses String.prototype.replaceAll internally, if available.\n *\n * @param {String} subject - the string to replace in\n * @param {(String|String[])} search - the string(s) to replace\n * @param {String|String[]} replace - the string(s) to replace the search string(s)\n * @returns {String} the modified string\n *\n * @memberof Strings:replace\n * @alias replace\n * @example\n * const sanitizedString = replace([':', '#', '-'], '_', exampleString);\n */\nexport function replace(subject, search, replace){\n\tsubject = `${subject}`;\n\tsearch = [].concat(search);\n\treplace = [].concat(replace);\n\n\tlet tmp = '';\n\n\tsearch.forEach((searchTerm, index) => {\n\t\ttmp = (replace.length > 1) ? ((replace[index] !== undefined) ? replace[index] : '') : replace[0];\n\n\t\tif( isA(String.prototype.replaceAll, 'function') ){\n\t\t\tsubject = subject.replaceAll(`${searchTerm}`, `${tmp}`);\n\t\t} else {\n\t\t\tsubject = subject.split(`${searchTerm}`).join(`${tmp}`);\n\t\t}\n\t});\n\n\treturn subject;\n}\n\n\n\n/**\n * @namespace Strings:truncate\n */\n\n/**\n * Truncates a given string after a certain number of characters to enforce length restrictions.\n *\n * @param {String} subject - the string to check and truncate\n * @param {?Number} [maxLength=30] - the maximum allowed character length for the string\n * @param {?String} [suffix='...'] - the trailing string to end a truncated string with\n * @throws error if suffix length is bigger than defined maxLength\n * @returns {String} the (truncated) subject\n *\n * @memberof Strings:truncate\n * @alias truncate\n * @example\n * const truncatedString = truncate(string, 10, '...');\n */\nexport function truncate(subject, maxLength=30, suffix='...'){\n\tsubject = `${subject}`;\n\tmaxLength = orDefault(maxLength, 30, 'int');\n\tsuffix = orDefault(suffix, '...', 'str');\n\n\tif( suffix.length > maxLength ){\n\t\tthrow new Error(`${MODULE_NAME}:truncate | suffix cannot be longer than maxLength`);\n\t}\n\n\tif( subject.length > maxLength ){\n\t\tsubject = `${subject.slice(0, maxLength - suffix.length)}${suffix}`;\n\t}\n\n\treturn subject;\n}\n\n\n\n/**\n * @namespace Strings:concat\n */\n\n/**\n * Simply concatenates strings with a glue part using array.join in a handy notation.\n * You can also provide arguments to glue as a prepared array as the second parameter,\n * in that case other parameters will be ignored.\n *\n * @param {?String} [glue=''] - the separator to use between single strings\n * @param {?String[]} strings - list of strings to concatenate, either comma-separated or as single array\n * @returns {String} the concatenated string\n *\n * @memberof Strings:concat\n * @alias concat\n * @example\n * const finalCountdown = concat(' ... ', 10, 9, 8, 7, 6, '5', '4', '3', '2', '1', 'ZERO!');\n * const finalCountdown = concat(' ... ', [10, 9, 8, 7, 6, '5', '4', '3', '2', '1', 'ZERO!']);\n */\nexport function concat(glue='', ...strings){\n\tglue = orDefault(glue, '', 'str');\n\n\tif( (strings.length > 0) && isA(strings[0], 'array') ){\n\t\treturn strings[0].join(glue);\n\t} else {\n\t\treturn strings.join(glue);\n\t}\n}\n\n\n\n/**\n * @namespace Strings:format\n */\n\n/**\n * This is a pythonesque string format implementation.\n * Apply formatted values to a string template, in which replacements are marked with curly braces.\n *\n * Display literal curly brace with {{ and }}.\n *\n * Unknown keys/indexes will be ignored.\n *\n * This solution is adapted from:\n * https://github.com/davidchambers/string-format\n *\n * @param {String} template -\n * @param {(String[]|Object)} replacements - arguments to insert into template, either as a dictionary, an array or a parameter sequence\n * @throws general exception on syntax errors\n * @returns {String} the formatted string\n *\n * @memberof Strings:format\n * @alias format\n * @example\n * format('An elephant is {times:float(0.00)} times smarter than a {animal}', {times : 5.5555, animal : 'lion'})\n * => 'An elephant is 5.56 times smarter than a lion'\n * format('{0}{0}{0} ... {{BATMAN!}}', 'Nana')\n * => 'NanaNanaNana ... {BATMAN!}'\n * format('{} {} {} starts the alphabet.', 'A', 'B', 'C')\n * => 'A B C starts the alphabet.'\n * format('{0:int}, {1:int}, {2:int}: details are for wankers', '1a', 2.222, 3)\n * => '1, 2, 3: details are for wankers'\n */\nexport function format(template, ...replacements){\n\ttemplate = `${template}`;\n\n\tlet\n\t\tidx = 0,\n\t\texplicit = false,\n\t\timplicit = false\n\t;\n\n\tconst fResolve = function(object, key){\n\t\tconst value = object[key];\n\n\t\tif( isA(value, 'function') ){\n\t\t\treturn value.call(object);\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t};\n\n\tconst fLookup = function(object, key){\n\t\tif( !/^(\\d+)([.]|$)/.test(key) ){\n\t\t\tkey = `0.${key}`;\n\t\t}\n\n\t\tlet match = /(.+?)[.](.+)/.exec(key);\n\t\twhile( match ){\n\t\t\tobject = fResolve(object, match[1]);\n\t\t\tkey = match[2];\n\t\t\tmatch = /(.+?)[.](.+)/.exec(key);\n\t\t}\n\n\t\treturn fResolve(object, key);\n\t};\n\n\tconst formatters = {\n\t\tint(value, radix){\n\t\t\tradix = orDefault(radix, 10, 'int');\n\t\t\tconst res = parseInt(value, radix);\n\t\t\treturn !isNaN(res) ? `${res}` : '';\n\t\t},\n\t\tfloat(value, format){\n\t\t\tformat = orDefault(format, null, 'str');\n\n\t\t\tlet res = null;\n\n\t\t\tif( hasValue(format) ){\n\t\t\t\tlet precision = 0;\n\n\t\t\t\ttry {\n\t\t\t\t\tprecision = format.split('.')[1].length;\n\t\t\t\t} catch(ex) {\n\t\t\t\t\tthrow new Error(`${MODULE_NAME}:format | float precision arg malformed`);\n\t\t\t\t}\n\n\t\t\t\tconst power = Math.pow(10, precision);\n\n\t\t\t\tres = Math.round(parseFloat(value) * power) / power;\n\t\t\t} else {\n\t\t\t\tres = parseFloat(value);\n\t\t\t}\n\n\t\t\treturn !isNaN(res) ? `${res}` : '';\n\t\t}\n\t};\n\n\treturn template.replace(/([{}])\\1|[{](.*?)(?:!(.+?))?[}]/g, function(match, literal, key){\n\t\tlet\n\t\t\tref = null,\n\t\t\tvalue = '',\n\t\t\tformatter = function(value){ return value; },\n\t\t\tformatterArg = null\n\t\t;\n\n\t\tif( literal ){\n\t\t\treturn literal;\n\t\t}\n\n\t\tif( key.length ){\n\t\t\tconst keyParts = key.split(':');\n\n\t\t\tif( keyParts.length > 1 ){\n\t\t\t\tkey = keyParts[0];\n\n\t\t\t\tconst\n\t\t\t\t\tformatterParts = keyParts[1].split('('),\n\t\t\t\t\tformatterName = formatterParts[0]\n\t\t\t\t;\n\n\t\t\t\tif( formatterParts.length > 1 ){\n\t\t\t\t\tformatterArg = formatterParts[1].replace(')', '');\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tformatter = formatters[formatterName];\n\t\t\t\t} catch(ex) {\n\t\t\t\t\tthrow new Error(`${MODULE_NAME}:format | unknown formatter`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( implicit ){\n\t\t\t\tthrow new Error(`${MODULE_NAME}:format | cannot switch from implicit to explicit numbering`);\n\t\t\t} else {\n\t\t\t\texplicit = true;\n\t\t\t}\n\n\t\t\tref = fLookup(replacements, key);\n\t\t\tvalue = orDefault(ref, '');\n\t\t} else {\n\t\t\tif( explicit ){\n\t\t\t\tthrow new Error (`${MODULE_NAME}:format | cannot switch from explicit to implicit numbering`);\n\t\t\t} else {\n\t\t\t\timplicit = true;\n\t\t\t}\n\n\t\t\tref = replacements[idx];\n\t\t\tvalue = orDefault(ref, '');\n\t\t\tidx++;\n\t\t}\n\n\t\treturn formatter(value, formatterArg);\n\t});\n}\n\n\n\n/**\n * @namespace Strings:slugify\n */\n\n/**\n * Slugifies a text for use in a URL or id/class/attribute.\n * Transforms accented characters to non-accented ones.\n * Throws out everything except basic A-Z characters and numbers after replacements have taken place.\n * Provide own replacements, supplementing or overriding the default replacement map to cover special cases\n * (will take precedence over the default map).\n *\n * @param {String} text - the text to slugify\n * @param {String?} [additionalMap=null] - optional character map to supplement/override the default map, having the form {'[search character]' : '[replacement]', ...}\n * @returns {String} the slugified string\n *\n * @memberof Strings:slugify\n * @alias slugify\n * @example\n * slugify('This is a cömplicated ßtring for URLs!')\n * => 'this-is-a-complicated-sstring-for-urls'\n */\nexport function slugify(text, additionalMap=null){\n\tif( !isPlainObject(additionalMap) ){\n\t\tadditionalMap = {};\n\t}\n\n\treturn `${text}`.toLowerCase()\n\t\t.replace(/\\s+|_+/g, '-')        // replace spaces and underscores with \"-\"\n\t\t.replace(\n\t\t\t/[^\\-]/g,                   // replace accented chars with plain ones via map and/or apply additionalMap\n\t\t\tchar => additionalMap[char] ?? SLUGIFY_LATINMAP[char] ?? char\n\t\t)\n\t\t.replace(/[^\\w\\-]+/g, '')       // remove all non-word, non-dash chars\n\t\t.replace(/--+/g, '-')           // replace multiple \"-\" with single \"-\"\n\t\t.replace(/^-+/, '')             // trim \"-\" from start of text\n\t\t.replace(/-+$/, '')             // trim \"-\" from end of text\n\t;\n}\n\n\n\n/**\n * @namespace Strings:maskForSelector\n */\n\n/**\n * Masks all selector-special-characters, to allow selecting elements with special characters in selector using\n * querySelector and querySelectorAll (also works for jQuery and Cash).\n *\n * @param {String} str - the string to mask for use in a selector\n * @returns {String} the masked string\n *\n * @memberof Strings:maskForSelector\n * @alias maskForSelector\n * @example\n * document.querySelector(`#element_${maskForSelector(elementName)}`).classList.remove('test');\n */\nexport function maskForSelector(str){\n\treturn `${str}`.replace(/([#;&,.+*~':\"!^$\\[\\]()=>|\\/@])/g, '\\\\$&');\n}\n\n\n\n/**\n * @namespace Strings:maskForRegEx\n */\n\n/**\n * Masks all regex special characters, to test or match a string using a regex, that contains\n * characters used in regexes themselves.\n *\n * @param {String} str - the string to mask for use in a regexp\n * @returns {String} the masked string\n *\n * @memberof Strings:maskForRegEx\n * @alias maskForRegEx\n * @example\n * if( (new RegExp(`^${maskForRegEx(arbitraryString)}$')).test('abc') ){\n *   alert('are identical!');\n * }\n */\nexport function maskForRegEx(str){\n\treturn `${str}`.replace(/([\\-\\[\\]\\/{}()*+?.\\\\^$|])/g, \"\\\\$&\");\n}\n\n\n\n/**\n * @namespace Strings:maskForHtml\n */\n\n/**\n * Masks a string possibly containing reserved HTML chars for HTML output as is\n * (so a < actually reads on the page).\n *\n * Only replaces critical chars like <>& with entities, but\n * keeps non-critical unicode chars like »/.\n *\n * @param {String} text - the string to mask for use in HTML\n * @returns {String} the masked string\n *\n * @memberof Strings:maskForHtml\n * @alias maskForHtml\n * @see unmaskFromHtml\n * @example\n * maskForHtml('</>&;üäöÜÄÖß– »')\n * => '&lt;/&gt;&amp;;üäöÜÄÖß– »'\n */\nexport function maskForHtml(text){\n\tconst escape = document.createElement('textarea');\n\tescape.textContent = `${text}`;\n\treturn escape.innerHTML;\n}\n\n\n\n/**\n * @namespace Strings:unmaskFromHtml\n */\n\n/**\n * Replaces entities in a html-masked string with the vanilla characters\n * thereby returning a real HTML string, which could, for example, be used\n * to construct new elements with tag markup.\n *\n * @param {String} html - the string to unmask entities in\n * @returns {String} the unmasked string\n *\n * @memberof Strings:unmaskFromHtml\n * @alias unmaskFromHtml\n * @see maskForHtml\n * @example\n * unmaskFromHtml('&lt;/&gt;&amp;;üäöÜÄÖß&ndash;&nbsp;&raquo;')\n * => '</>&;üäöÜÄÖß– »'\n */\nexport function unmaskFromHtml(html){\n\tconst escape = document.createElement('textarea');\n\tescape.innerHTML = `${html}`;\n\treturn escape.textContent;\n}\n"]}
{"version":3,"file":"units.js","names":["MODULE_NAME","orDefault","assert","isNaN","isArray","round","LOCAL_FLOAT_SEPARATOR","toLocaleString","replace","slice","LOCAL_THOUSAND_SEPARATOR","asFileSize","bytes","separator","precision","useBinaryBase","parseInt","thresh","units","unitIndex","length","asCurrency","number","locale","currency","currencyDisplay","parseFloat","includes","concat","Intl","NumberFormat","style","format","asDecimal","minPrecision","maxPrecision","useGrouping","minimumFractionDigits","maximumFractionDigits"],"sources":["units.js"],"mappings":";;;AAQA,MAAMA,YAAc,eAMZC,UAAWC,OAAQC,MAAOC,QAASC,UAAY,oBAMhD,MACNC,sBAAwB,GAAMC,iBAAiBC,QAAQ,SAAU,IAAIC,MAAM,EAAG,GAC9EC,yBAA2B,IAAOH,iBAAiBC,QAAQ,SAAU,IAAIC,MAAM,EAAG,UAkC5E,SAASE,WAAWC,EAAOC,EAAUP,sBAAuBQ,EAAU,EAAGC,GAAc,GAG7FH,EAAQI,SAASJ,EAAO,IACxBV,QACEC,MAAMS,IAAWA,GAAS,EAC3B,mDAGDC,EAAYZ,UAAUY,EAAWP,sBAAuB,OACxDQ,EAAYb,UAAUa,EAAW,EAAG,OAEpC,MACCG,EAAWF,EAAgB,KAAO,IAClCG,EAAUH,EACP,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAC3C,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAGxC,GAAIH,EAAQK,EACX,MAAO,GAAGL,MAGX,IAAIO,GAAa,EACjB,GACCP,GAASK,EACTE,UAECP,GAASK,GACNE,EAAaD,EAAME,OAAS,GAIjC,MAAO,GADPR,EAAQ,GAAGP,MAAMO,EAAOE,KAAaN,QAAQ,IAAKK,MAC/BK,EAAMC,IAC1B,QA2BO,SAASE,WAAWC,EAAQC,EAAO,QAASC,EAAS,MAAOC,EAAgB,UAclF,OAbAH,EAASI,WAAWJ,GAEpBC,EAAStB,UAAUsB,EAAQ,WAExBnB,QAAQmB,IAAuB,UAAXA,GAClBnB,QAAQmB,KAAYA,EAAOI,SAAS,YAExCJ,EAAS,GAAGK,OAAOL,GAAQK,OAAO,UAGnCJ,EAAWvB,UAAUuB,EAAU,MAAO,OACtCC,EAAkBxB,UAAUwB,EAAiB,SAAU,OAEhD,IAAII,KAAKC,aACfP,EACA,CACCQ,MAAQ,WACRP,WACAC,oBAEAO,OAAOV,EACV,QA0BO,SAASW,UAAUX,EAAQC,EAAO,QAASW,EAAa,EAAGC,EAAa,MAc9E,OAbAb,EAASI,WAAWJ,GAEpBC,EAAStB,UAAUsB,EAAQ,WAExBnB,QAAQmB,IAAuB,UAAXA,GAClBnB,QAAQmB,KAAYA,EAAOI,SAAS,YAExCJ,EAAS,GAAGK,OAAOL,GAAQK,OAAO,UAGnCM,EAAejC,UAAUiC,EAAc,EAAG,OAC1CC,EAAelC,UAAUkC,EAAcD,EAAc,OAE9C,IAAIL,KAAKC,aACfP,EACA,CACCQ,MAAQ,UACRK,aAAc,EACdC,sBAAwBH,EACxBI,sBAAwBH,IAExBH,OAAOV,EACV","ignoreList":[],"sourcesContent":["/*!\n * Module Units\n */\n\n/**\n * @namespace Units\n */\n\nconst MODULE_NAME = 'Units';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {orDefault, assert, isNaN, isArray, round} from './basic.js';\n\n\n\n//###[ DATA ]###########################################################################################################\n\nexport const\n\tLOCAL_FLOAT_SEPARATOR = (0.1).toLocaleString().replace(/[0-9]/g, '').slice(0, 1),\n\tLOCAL_THOUSAND_SEPARATOR = (1000).toLocaleString().replace(/[0-9]/g, '').slice(0, 1)\n;\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace Units:asFileSize\n */\n\n/**\n * Renders a byte number as a human-readable file size with the correct unit.\n *\n * Switch calculation base by setting useBinaryBase to true.\n * Today, file sizes are usually calculated against a decimal base of 1000, while in the\n * past, a binary base of 1024 was commonly used (and still is today by some software such as Microsoft Windows).\n * In 1998 the IEC standardized byte units to be metric in nature, which is the base assumption of this method.\n *\n * @param {Number} bytes - file size in bytes to render as string\n * @param {?String} [separator=LOCAL_FLOAT_SEPARATOR] - the character to separate the fraction in float numbers, will default to the current browser's default for local strings\n * @param {?Number} [precision=1] - the floating point precision to use for the size\n * @param {?Boolean} [useBinaryBase=false] - set to true to activate binary calculation and units\n * @returns {String} the formatted file size\n *\n * @memberof Units:asFileSize\n * @alias asFileSize\n * @see https://en.wikipedia.org/wiki/Kilobyte\n * @example\n * asFileSize(1_500_000, ',')\n * => '1,5 MB'\n * asFileSize(1024, '.', 0, true)\n * => '1 KiB'\n */\nexport function asFileSize(bytes, separator=LOCAL_FLOAT_SEPARATOR, precision=1, useBinaryBase=false){\n\tconst __methodName__ = 'asFileSize';\n\n\tbytes = parseInt(bytes, 10);\n\tassert(\n\t\t!isNaN(bytes) && (bytes >= 0),\n\t\t`${MODULE_NAME}:${__methodName__} | bytes not usable or negative`\n\t);\n\n\tseparator = orDefault(separator, LOCAL_FLOAT_SEPARATOR, 'str');\n\tprecision = orDefault(precision, 1, 'int');\n\n\tconst\n\t\tthresh = !!useBinaryBase ? 1024 : 1000,\n\t\tunits = !!useBinaryBase\n\t\t\t? ['KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB']\n\t\t\t: ['kB','MB','GB','TB','PB','EB','ZB','YB']\n\t;\n\n\tif( bytes < thresh ){\n\t\treturn `${bytes} B`;\n\t}\n\n\tlet unitIndex = -1;\n\tdo {\n\t\tbytes /= thresh;\n\t\tunitIndex++;\n\t} while(\n\t\t(bytes >= thresh)\n\t\t&& (unitIndex < (units.length - 1))\n\t);\n\n\tbytes = `${round(bytes, precision)}`.replace('.', separator);\n\treturn `${bytes} ${units[unitIndex]}`;\n}\n\n\n\n/**\n * @namespace Units:asCurrency\n */\n\n/**\n * Renders a number as a currency value, using native Intl.NumberFormat functionality.\n *\n * @param {Number} number - the number to use as a currency amount\n * @param {?String|Array<String>} [locale='en-US'] - locale to use, use array to define fallback; always falls back to en-US if nothing else works\n * @param {?String} [currency='USD'] - a ISO4217 currency code, such as EUR for Euro\n * @param {?String} [currencyDisplay='symbol'] - one of \"symbol\", \"narrowSymbol\", \"code\" or \"name\", defining, how the currency should be displayed in the result\n * @returns {String} the formatted currency amount\n *\n * @memberof Units:asCurrency\n * @alias asCurrency\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\n * @see https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes\n * @example\n * asCurrency(42.666)\n * => '42.67 $'\n * asCurrency(42.666, 'de-DE', 'EUR')\n * => '42,67 â‚¬'\n */\nexport function asCurrency(number, locale='en-US', currency='USD', currencyDisplay='symbol'){\n\tnumber = parseFloat(number);\n\n\tlocale = orDefault(locale, 'en-US');\n\tif(\n\t\t(!isArray(locale) && (locale !== 'en-US'))\n\t\t|| (isArray(locale) && !locale.includes('en-US'))\n\t){\n\t\tlocale = [].concat(locale).concat('en-US');\n\t}\n\n\tcurrency = orDefault(currency, 'USD', 'str');\n\tcurrencyDisplay = orDefault(currencyDisplay, 'symbol', 'str');\n\n\treturn new Intl.NumberFormat(\n\t\tlocale,\n\t\t{\n\t\t\tstyle : 'currency',\n\t\t\tcurrency,\n\t\t\tcurrencyDisplay,\n\t\t}\n\t).format(number);\n}\n\n\n\n/**\n * @namespace Units:asDecimal\n */\n\n/**\n * Renders a number as a decimal value, using native Intl.NumberFormat functionality.\n *\n * @param {Number} number - the number to use as a decimal amount\n * @param {?String|Array<String>} [locale='en-US'] - locale to use, use array to define fallback; always falls back to en-US if nothing else works\n * @param {?Number} [minPrecision=2] - the minimal precision to use in decimal display\n * @param {?Number} [maxPrecision=null] - the minimal precision to use in decimal display; if nullish, will be set to minPrecision\n * @returns {String} the formatted decimal amount\n *\n * @memberof Units:asDecimal\n * @alias asDecimal\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\n * @example\n * asDecimal(42.666)\n * => '42.67'\n * asDecimal(42.666, 'de-DE', 1)\n * => '42,7'\n */\nexport function asDecimal(number, locale='en-US', minPrecision=2, maxPrecision=null){\n\tnumber = parseFloat(number);\n\n\tlocale = orDefault(locale, 'en-US');\n\tif(\n\t\t(!isArray(locale) && (locale !== 'en-US'))\n\t\t|| (isArray(locale) && !locale.includes('en-US'))\n\t){\n\t\tlocale = [].concat(locale).concat('en-US');\n\t}\n\n\tminPrecision = orDefault(minPrecision, 2, 'int');\n\tmaxPrecision = orDefault(maxPrecision, minPrecision, 'int');\n\n\treturn new Intl.NumberFormat(\n\t\tlocale,\n\t\t{\n\t\t\tstyle : 'decimal',\n\t\t\tuseGrouping : false,\n\t\t\tminimumFractionDigits : minPrecision,\n\t\t\tmaximumFractionDigits : maxPrecision\n\t\t}\n\t).format(number);\n}\n"]}
{"version":3,"file":"urls.js","names":["MODULE_NAME","hasValue","orDefault","size","assert","isFunction","isString","isArray","isObject","isNaN","isEmpty","log","replace","COMMON_TOP_LEVEL_DOMAINS","URISON_VALUE_FORMAT","URISON_VALUE_REX","RegExp","URISON_NEXT_VALUE_REX","UrisonParser","__className__","errorHandler","string","index","message","bangTokens","tokenMap","constructor","instance","this","t","f","n","parseArray","char","charAt","error","value","undefined","call","res","first","next","key","readValue","segments","i","start","push","slice","includes","length","join","numberTypeMap","s","numberType","permittedSigns","toLowerCase","Number","parse","risonString","trailingChar","detailMessage","test","mapper","apply","lastIndex","matches","exec","id","console","urlParameter","url","parameter","searchParams","startsWith","URLSearchParams","protocol","window","location","URL","Error","fMapParameterValue","parameterValue","parameterValues","getAll","Array","from","Set","map","parameters","keys","forEach","parameterName","urlParameters","urlAnchor","withCaret","urlParts","split","anchor","decodeURIComponent","trim","addNextParameter","paramName","assertSameBaseDomain","additionalTopLevelDomains","__methodName__","evaluateBaseDomain","hostname","urlParams","search","has","info","get","href","set","origin","pathname","toString","replaceAll","hash","addCacheBuster","buster","Date","now","domain","topLevelDomains","tld","domainParts","reverse","baseDomain","Urison","autoEscape","autoUnescape","encoders","parser","escape","val","array","v","encodedValue","encode","boolean","null","number","isFinite","object","Object","sort","k","parseInt","_","quotedChar","toJson","toJSON","encoder","ex","encodeObject","substring","encodeArray","decode","decodeObject","decodeArray","encodeURIComponent"],"sources":["urls.js"],"mappings":"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","sourcesContent":["/*!\n * Module Urls\n */\n\n/**\n * @namespace Urls\n */\n\nconst MODULE_NAME = 'Urls';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {\n\thasValue,\n\torDefault,\n\tsize,\n\tassert,\n\tisFunction,\n\tisString,\n\tisArray,\n\tisObject,\n\tisNaN,\n\tisEmpty\n} from './basic.js';\nimport {log} from './logging.js';\nimport {replace} from './strings.js';\n\n\n\n//###[ DATA ]###########################################################################################################\n\nexport const COMMON_TOP_LEVEL_DOMAINS = [\n\t'aero', 'biz', 'cat', 'com', 'coop', 'edu', 'gov', 'info', 'int', 'jobs', 'mil', 'mobi', 'museum', 'name', 'net',\n\t'org', 'travel', 'ac', 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am', 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw',\n\t'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn', 'bo', 'br', 'bs', 'bt', 'bv', 'bw', 'by',\n\t'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cs', 'cu', 'cv', 'cx', 'cy',\n\t'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm',\n\t'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu',\n\t'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je',\n\t'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk',\n\t'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr',\n\t'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu',\n\t'nz', 'om', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro',\n\t'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'st', 'su',\n\t'sv', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tm', 'tn', 'to', 'tp', 'tr', 'tt', 'tv', 'tw', 'tz',\n\t'ua', 'ug', 'uk', 'um', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'yu',\n\t'za', 'zm', 'zr', 'zw', 'local'\n];\n\nconst\n\tURISON_VALUE_FORMAT = `[^\\-0123456789 '!:(),*@$][^ '!:(),*@$]*`,\n\tURISON_VALUE_REX = new RegExp(`^${URISON_VALUE_FORMAT}$`),\n\tURISON_NEXT_VALUE_REX = new RegExp(URISON_VALUE_FORMAT, 'g')\n;\n\n\n\n//###[ HELPERS ]########################################################################################################\n\n/**\n * A parser to translate a Rison string such as `'(key1:value,key2:!t,key3:!(!f,42,!n))'` into its\n * JSON object/array representation `{key1 : 'value', key2 : true, key3 : [false, 42, null]}`. This is a helper class\n * for the public Urison class below.\n *\n * @protected\n * @memberof Urls\n * @name UrisonParser\n *\n * @see https://github.com/Nanonid/rison\n * @example\n * new UrisonParser(error => { console.error(error); });\n */\nclass UrisonParser {\n\n\t#__className__ = 'UrisonParser';\n\t#errorHandler;\n\t#string = '';\n\t#index = 0;\n\t#message = null;\n\t#bangTokens;\n\t#tokenMap;\n\n\t/**\n\t * Creates a new UrisonParser instance.\n\t *\n\t * All errors in this class result in a console error message rather than an exception. To work with occurring\n\t * errors, define an errorCallback for the constructor and throw errors from there if needed.\n\t *\n\t * @param {Function} [errorHandler=null] - function to call in case parsing fails, receives the error message and the character index as parameters\n\t */\n\tconstructor(errorHandler=null){\n\t\tconst instance = this;\n\n\t\tthis.#errorHandler = isFunction(errorHandler) ? errorHandler : null;\n\n\t\t// syntax tokens preceded with a \"!\" and the values they represent in JSON\n\t\tthis.#bangTokens = {\n\t\t\t't' : true,\n\t\t\t'f' : false,\n\t\t\t'n' : null,\n\t\t\t'(' : this.#parseArray\n\t\t};\n\n\t\t// syntax structure tokens and the procedures, that transform these tokens into json structure\n\t\tthis.#tokenMap = {\n\t\t\t'!' : function(){\n\t\t\t\tconst char = instance.#string.charAt(instance.#index++);\n\t\t\t\tif( char === '' ) return instance.#error('\"!\" at end of input');\n\n\t\t\t\tconst value = instance.#bangTokens[char];\n\t\t\t\tif( value === undefined ) return instance.#error(`unknown literal: \"!${char}\"`);\n\t\t\t\tif( isFunction(value) ) return value.call(this);\n\n\t\t\t\treturn value;\n\t\t\t},\n\n\t\t\t'(' : function(){\n\t\t\t\tconst res = {};\n\t\t\t\tlet\n\t\t\t\t\tfirst = true,\n\t\t\t\t\tchar\n\t\t\t\t;\n\n\t\t\t\twhile( (char = instance.#next()) !== ')' ){\n\t\t\t\t\tif( !first ){\n\t\t\t\t\t\tif( char !== ',' ){\n\t\t\t\t\t\t\treturn instance.#error('missing \",\"');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if( char === ',' ){\n\t\t\t\t\t\treturn instance.#error('extra \",\"');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinstance.#index--;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst key = instance.#readValue();\n\t\t\t\t\tif( key === undefined ) return undefined;\n\t\t\t\t\tif( instance.#next() !== ':' ) return instance.#error('missing \":\"');\n\n\t\t\t\t\tconst value = instance.#readValue();\n\t\t\t\t\tif( value === undefined ) return undefined;\n\t\t\t\t\tres[key] = value;\n\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t},\n\n\t\t\t\"'\" : function(){\n\t\t\t\tconst segments = [];\n\t\t\t\tlet\n\t\t\t\t\ti = instance.#index,\n\t\t\t\t\tstart = instance.#index,\n\t\t\t\t\tchar\n\t\t\t\t;\n\n\t\t\t\twhile( (char = instance.#string.charAt(i++)) !== \"'\" ){\n\t\t\t\t\tif( char === '' ) return instance.#error(`unmatched \"'\"`);\n\t\t\t\t\tif( char === '!' ){\n\t\t\t\t\t\tif( start < (i - 1) ){\n\t\t\t\t\t\t\tsegments.push(instance.#string.slice(start, i - 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchar = instance.#string.charAt(i++);\n\t\t\t\t\t\tif( ['!', \"'\"].includes(char) ){\n\t\t\t\t\t\t\tsegments.push(char);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn instance.#error(`invalid string escape: \"!${char}\"`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstart = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( start < (i - 1) ){\n\t\t\t\t\tsegments.push(instance.#string.slice(start, i - 1));\n\t\t\t\t}\n\t\t\t\tinstance.#index = i;\n\n\t\t\t\treturn (segments.length === 1) ? segments[0] : segments.join('');\n\t\t\t},\n\n\t\t\t'-' : function(){\n\t\t\t\tconst\n\t\t\t\t\tstart = instance.#index - 1,\n\t\t\t\t\tnumberTypeMap = {\n\t\t\t\t\t\t'int+.' : 'frac',\n\t\t\t\t\t\t'int+e' : 'exp',\n\t\t\t\t\t\t'frac+e' : 'exp'\n\t\t\t\t\t}\n\t\t\t\t;\n\t\t\t\tlet\n\t\t\t\t\ts = instance.#string,\n\t\t\t\t\ti = instance.#index,\n\t\t\t\t\tnumberType = 'int',\n\t\t\t\t\tpermittedSigns = '-'\n\t\t\t\t;\n\n\t\t\t\tdo {\n\t\t\t\t\tconst char = s.charAt(i++);\n\t\t\t\t\tif( char === '' ) break;\n\t\t\t\t\tif( (char >= '0') && (char <= '9') ) continue;\n\t\t\t\t\tif( permittedSigns.includes(char) ){\n\t\t\t\t\t\tpermittedSigns = '';\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tnumberType = numberTypeMap[`${numberType}+${char.toLowerCase()}`];\n\t\t\t\t\tif( numberType === 'exp' ){\n\t\t\t\t\t\tpermittedSigns = '-';\n\t\t\t\t\t}\n\t\t\t\t} while( numberType !== undefined );\n\n\t\t\t\ti--;\n\t\t\t\tinstance.#index = i;\n\t\t\t\ts = s.slice(start, i);\n\t\t\t\tif( s === '-' ) return instance.#error('invalid number');\n\t\t\t\treturn Number(s);\n\t\t\t}\n\t\t};\n\n\t\t(function(tokenMap){\n\t\t\tfor( let i = 0; i <= 9; i++ ){\n\t\t\t\ttokenMap[`${i}`] = tokenMap['-'];\n\t\t\t}\n\t\t})(this.#tokenMap);\n\t}\n\n\n\n\t/**\n\t * Parses a Rison string into a JSON object.\n\t * Resets internal parsing info, like parsing index, to start new parsing process.\n\t *\n\t * @param {String} risonString - the string to parse\n\t * @returns {Object|Array|undefined} the parsed JSON object or undefined, in case parsing failed\n\t *\n\t * @example\n\t * (new UrisonParser()).parse('(key1:value,key2:!t,key3:!(!f,42,!n))')\n\t * => {key1 : 'value', key2 : true, key3 : [false, 42, null]}\n\t */\n\tparse(risonString){\n\t\tthis.#string = `${risonString}`;\n\t\tthis.#index = 0;\n\t\tthis.#message = null;\n\n\t\tlet value = this.#readValue();\n\n\t\tconst trailingChar = this.#next();\n\t\tif( !this.#message && (trailingChar !== undefined) ){\n\t\t\tlet detailMessage;\n\t\t\tif( /\\s/.test(trailingChar) ){\n\t\t\t\tdetailMessage = 'whitespace detected';\n\t\t\t} else {\n\t\t\t\tdetailMessage = `trailing char \"${trailingChar}\"`;\n\t\t\t}\n\t\t\tvalue = this.#error(`unable to parse string \"${risonString}\", ${detailMessage}`);\n\t\t}\n\n\t\tif( this.#message && this.#errorHandler ){\n\t\t\tthis.#errorHandler(this.#message, this.#index);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\n\n\t/**\n\t * Parses the structure of an array. Is a helper function for #parse/#readValue.\n\t * Works with previously set internal parsing info such as string and parsing index.\n\t *\n\t * @returns {Array|undefined} the parsed array or undefined, in case parsing failed\n\t *\n\t * @private\n\t * @example\n\t * this.#parseArray()\n\t * => [true, null, 'value']\n\t */\n\t#parseArray(){\n\t\tconst res = [];\n\t\tlet char;\n\n\t\twhile( (char = this.#next()) !== ')' ){\n\t\t\tif( char === '' ) return this.#error('unmatched \"!(\"');\n\n\t\t\tif( !isEmpty(res) ){\n\t\t\t\tif( char !== ',' ){\n\t\t\t\t\treturn this.#error('missing \",\"');\n\t\t\t\t}\n\t\t\t} else if( char === ',' ){\n\t\t\t\treturn this.#error('extra \",\"');\n\t\t\t} else {\n\t\t\t\tthis.#index--;\n\t\t\t}\n\n\t\t\tconst value = this.#readValue();\n\t\t\tif( value === undefined ) return undefined;\n\t\t\tres.push(value);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\n\n\t/**\n\t * Either reads the next value or key in the current parser string or triggers recursive handling of syntax tokens.\n\t * Progresses parsing to the next section so to speak.\n\t *\n\t * @returns {Object|Array|String|Number|Boolean|null|undefined} the parsed value or undefined if parsing failed\n\t *\n\t * @private\n\t * @example\n\t * this.#readValue()\n\t * => 'valueorkeyorstructure'\n\t */\n\t#readValue(){\n\t\tconst\n\t\t\tchar = this.#next(),\n\t\t\tmapper = this.#tokenMap[char]\n\t\t;\n\n\t\tif( isFunction(mapper) ) return mapper.apply(this);\n\n\t\tconst i = this.#index - 1;\n\t\tURISON_NEXT_VALUE_REX.lastIndex = i;\n\t\tconst matches = URISON_NEXT_VALUE_REX.exec(this.#string);\n\t\tif( !isEmpty(matches) ){\n\t\t\tconst id = matches[0];\n\t\t\tthis.#index = i + id.length;\n\t\t\treturn id;\n\t\t}\n\n\t\tif( hasValue(char) && (char !== '') ) return this.#error(`invalid character \"${char}\"`);\n\t\treturn this.#error('empty expression');\n\t}\n\n\n\n\t/**\n\t * Reads the next character of the currently given Rison string, increments the index\n\t * and returns the character.\n\t *\n\t * @returns {String|undefined} the next character or undefined if there is none\n\t *\n\t * @private\n\t * @example\n\t * this.#next()\n\t * => '!'\n\t */\n\t#next(){\n\t\tlet\n\t\t\ti = this.#index,\n\t\t\tchar\n\t\t;\n\n\t\tif( i >= this.#string.length ) return undefined;\n\t\tchar = this.#string.charAt(i++);\n\t\tthis.#index = i;\n\n\t\treturn char;\n\t}\n\n\n\n\t/**\n\t * Sets the error message and writes it to `console.error()` for info purposes.\n\t * This method does _not_ throw an exception, for this, please set an error handler\n\t * in the constructor and throw it externally.\n\t *\n\t * @param {String} message - the error message\n\t * @returns {undefined} is always undefined to be uniform return value for failed value parsing in case of error\n\t *\n\t * @private\n\t * @example\n\t * this.#error('oh noez')\n\t * => undefined\n\t */\n\t#error(message){\n\t\tconsole.error(`${this.#__className__} error: `, message);\n\t\tthis.#message = message;\n\t\treturn undefined;\n\t}\n\n}\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace Urls:urlParameter\n */\n\n/**\n * Searches for and returns parameters embedded in the provided url containing a query string\n * (make sure all values are url encoded).\n *\n * You may also just provide the query string.\n *\n * Returns a single parameter's value if a parameter name is given, otherwise returns dictionary with all parameters\n * as keys and the associated parameter value.\n *\n * If a parameter has more than one value the values are returned as an array, whether being requested by name\n * or in the dictionary containing all params.\n *\n * If a parameter is set, but has no defined value (name present, but no = before next param)\n * the value is returned as boolean true.\n *\n * @param {String} url - the url containing the parameter string, is expected to be url-encoded (at least stuff like [+?&=]), may also be only the query string (_must_ begin with ?)\n * @param {?String} [parameter=null] - the name of the parameter to extract\n * @throws error if given url is not usable\n * @returns {null|true|String|Array|Object} null in case the parameter doesn't exist, true in case it exists but has no value, a string in case the parameter has one value, or an array of values, or a dictionary object of all available parameters with corresponding values\n *\n * @memberof Urls:urlParameter\n * @alias urlParameter\n * @example\n * const hasKittens = urlParameter('//foobar.com/bar?has_kittens', 'has_kittens');\n * => true\n * const hasDoggies = urlParameter('has_doggies=yes&has_doggies', 'has_doggies');\n * => ['yes', true]\n * const allTheData = urlParameter('?foo=foo&bar=bar&bar=barbar&bar');\n * => {foo : 'foo', bar : ['bar', 'barbar', true]}\n */\nexport function urlParameter(url, parameter=null){\n\tconst __methodName__ = 'urlParameter';\n\n\turl = orDefault(url, '', 'str');\n\tparameter = orDefault(parameter, null, 'str');\n\n\tlet searchParams;\n\tif( !url.startsWith('?') ){\n\t\tif(\t!url.startsWith('http://') && !url.startsWith('https://') ){\n\t\t\tconst protocol = window.location.protocol;\n\t\t\turl = `${url.startsWith('//') ? protocol : protocol+'//'}${url}`;\n\t\t}\n\n\t\ttry {\n\t\t\tsearchParams = new URL(url).searchParams;\n\t\t} catch {\n\t\t\tthrow new Error(`${MODULE_NAME}:${__methodName__} | invalid url \"${url}\"`);\n\t\t}\n\t} else {\n\t\tsearchParams = new URLSearchParams(url);\n\t}\n\n\tconst fMapParameterValue = parameterValue => ((parameterValue === '') ? true : parameterValue);\n\n\tif( hasValue(parameter) ){\n\t\tconst parameterValues = searchParams.getAll(parameter);\n\t\tif( parameterValues.length === 0 ){\n\t\t\treturn null;\n\t\t} else if( parameterValues.length === 1 ){\n\t\t\treturn fMapParameterValue(parameterValues[0]);\n\t\t} else {\n\t\t\treturn Array.from(new Set(parameterValues.map(fMapParameterValue)));\n\t\t}\n\t} else {\n\t\tconst parameters = {};\n\t\tArray.from(searchParams.keys()).forEach(parameterName => {\n\t\t\tconst parameterValues = searchParams.getAll(parameterName);\n\t\t\tif( parameterValues.length > 0 ){\n\t\t\t\tparameters[parameterName] =\n\t\t\t\t\t(parameterValues.length === 1)\n\t\t\t\t\t? fMapParameterValue(parameterValues[0])\n\t\t\t\t\t: Array.from(new Set(parameterValues.map(fMapParameterValue)))\n\t\t\t\t;\n\t\t\t}\n\t\t});\n\t\treturn (size(parameters) > 0) ? parameters : null;\n\t}\n}\n\n\n\n/**\n * @namespace Urls:urlParameters\n */\n\n/**\n * Searches for and returns parameters embedded in provided url with a parameter string.\n *\n * Semantic shortcut version of urlParameter without any given parameter.\n *\n * @param {String} url - the url containing the parameter string, is expected to be url-encoded (at least stuff like [+?&=]), may also be only the query string (_must_ begin with ?)\n * @throws error if given url is not usable\n * @returns {Object|null} dictionary object of all parameters or null if url has no parameters\n *\n * @memberof Urls:urlParameters\n * @alias urlParameters\n * @see urlParameter\n * @example\n * const allParams = urlParameters('http://www.foobar.com?foo=foo&bar=bar&bar=barbar&bar');\n * => {foo : 'foo', bar : ['bar', 'barbar', true]}\n */\nexport function urlParameters(url){\n\treturn urlParameter(url);\n}\n\n\n\n/**\n * @namespace Urls:urlAnchor\n */\n\n/**\n * Returns the currently set URL-Anchor on given URL.\n *\n * Theoretically, this function also works with any other string containing a hash (as long as there is \"#\" included),\n * since this implementation does not lean on \"new URL()\", but is a simple string operation.\n *\n * In comparison to \"location.hash\", this function actually decodes the hash automatically.\n *\n * @param {String} url - the url, in which to search for a hash\n * @param {?Boolean} [withCaret=false] - defines if the returned anchor value should contain leading \"#\"\n * @returns {String|null} current anchor value or null if no anchor was found\n *\n * @memberof Urls:urlAnchor\n * @alias urlAnchor\n * @example\n * const anchorWithoutCaret = urlAnchor('https://foobar.com#test');\n * => 'test'\n * const hrefAnchorWithCaret = urlAnchor(linkElement.getAttribute('href'), true);\n * => '#test'\n * const decodedAnchorFromLocation = urlAnchor(window.location.hash);\n */\nexport function urlAnchor(url, withCaret=false){\n\turl = orDefault(url, '', 'str');\n\twithCaret = orDefault(withCaret, false, 'bool');\n\n\tconst urlParts = url.split('#');\n\n\tlet anchor = (urlParts.length > 1) ? decodeURIComponent(urlParts[1].trim()) : null;\n\tif( anchor === '' ){\n\t\tanchor = null;\n\t}\n\tif( withCaret && hasValue(anchor) ){\n\t\tanchor = `#${anchor}`;\n\t}\n\n\treturn anchor;\n}\n\n\n\n/**\n * @namespace Urls:addNextParameter\n */\n\n/**\n * Adds a \"next\"-parameter to a given URL. If there is already a parameter of that name, it will be replaced.\n *\n * A \"next\"-parameter is usually used to relay a second URL, which should be redirected to after something happens,\n * such as a login or another (possibly automatic) action.\n *\n * @param {?String} [url=''] - the URL to add the next parameter to, if left empty, will be \"\", which is synonymous with the current URL\n * @param {?String} [next=''] - the next URL to add as parameter to the given URL (will automatically be URL-encoded)\n * @param {?String} [paramName='next'] - the name of the next parameter\n * @param {?Boolean} [assertSameBaseDomain=false] - if true, url and next must have the same base domain (ignoring subdomains), to prevent injections\n * @param {?Array<String>} [additionalTopLevelDomains=null] - this function uses a list of common TLDs (if assertSameBaseDomain is true), if yours is missing, you may provide it, using this parameter\n * @throws error if assertBaseDomain is true an the base domains of url and next differ\n * @returns {String} the transformed URL with the added next parameter\n *\n * @memberof Urls:addNextParameter\n * @alias addNextParameter\n * @example\n * addNextParameter('https://foobar.com', 'https://foo.bar', 'redirect');\n * => 'https://foobar.com?redirect=https%3A%2F%2Ffoo.bar'\n * addNextParameter('https://foobar.com?next=https%3A%2F%2Ffoo.bar', 'https://kittens.com');\n * => 'https://foobar.com?next=https%3A%2F%2Fkittens.com'\n */\nexport function addNextParameter(url, next, paramName='next', assertSameBaseDomain=false, additionalTopLevelDomains=null){\n\tconst __methodName__ = 'addNextParameter';\n\n\turl = new URL(orDefault(url, '', 'str'));\n\tnext = new URL(orDefault(next, '', 'str'));\n\tparamName = orDefault(paramName, 'next', 'str');\n\tassertSameBaseDomain = orDefault(assertSameBaseDomain, true, 'bool');\n\n\tif( assertSameBaseDomain ){\n\t\tassert(\n\t\t\tevaluateBaseDomain(url.hostname, additionalTopLevelDomains) === evaluateBaseDomain(next.hostname, additionalTopLevelDomains),\n\t\t\t`${MODULE_NAME}:${__methodName__} | different base domains in url and next`\n\t\t);\n\t}\n\n\tconst urlParams = new URLSearchParams(url.search);\n\n\tif( urlParams.has(paramName) ){\n\t\tlog().info(`${MODULE_NAME}:${__methodName__} | replaced \"${paramName}\" value \"${urlParams.get(paramName)}\" with \"${next.href}\"`);\n\t}\n\n\turlParams.set(paramName, next.href);\n\n\treturn `${url.origin}${url.pathname}?${urlParams.toString().replaceAll('+', '%20')}${url.hash}`;\n}\n\n\n\n/**\n * @namespace Urls:addCacheBuster\n */\n\n/**\n * Adds a cache busting parameter to a given URL. If there is already a parameter of that name, it will be replaced.\n * This prevents legacy browsers from caching requests by changing the request URL dynamically, based on current time.\n *\n * @param {?String} [url=''] - the URL to add the cache busting parameter to, if left empty, will be \"\", which is synonymous with the current URL\n * @param {?String} [paramName='_'] - the name of the cache busting parameter\n * @returns {String} the transformed URL with the added cache busting parameter\n *\n * @memberof Urls:addCacheBuster\n * @alias addCacheBuster\n * @example\n * addCacheBuster('https://foobar.com');\n * => 'https://foobar.com?_=1648121948009'\n * addCacheBuster('https://foobar.com?next=https%3A%2F%2Ffoo.bar', 'nocache');\n * => 'https://foobar.com?next=https%3A%2F%2Ffoo.bar&nocache=1648121948009'\n */\nexport function addCacheBuster(url, paramName='_'){\n\tconst __methodName__ = 'addCacheBuster';\n\n\turl = new URL(orDefault(url, '', 'str'));\n\n\tconst\n\t\turlParams = new URLSearchParams(url.search),\n\t\tbuster = Date.now()\n\t;\n\n\tif( urlParams.has(paramName) ){\n\t\tlog().info(`${MODULE_NAME}:${__methodName__} | replaced \"${paramName}\" value \"${urlParams.get(paramName)}\" with \"${buster}\"`);\n\t}\n\n\turlParams.set(paramName, buster);\n\n\treturn `${url.origin}${url.pathname}?${urlParams}${url.hash}`;\n}\n\n\n\n/**\n * @namespace Urls:evaluateBaseDomain\n */\n\n/**\n * Walks a domain string (e.g. foobar.barfoo.co.uk) backwards, separated by dots, skips over all top level\n * domains it finds and includes the first non-TLD value to retrieve the base domain without any subdomains\n * (e.g. barfoo.co.uk).\n *\n * This is not completely fool-proof in case of very exotic TLDs, but quite robust in most cases.\n *\n * This method is particularly helpful if you want to set a domain cookie while being on a subdomain.\n *\n * @param {String} domain - the domain string (hostname), which should be evaluated; you may also provide a full, parsable URL, from which to extract the hostname\n * @param {?Array<String>} [additionalTopLevelDomains=null] - this function uses a list of common TLDs, if yours is missing, you may provide it, using this parameter\n * @returns {String} the evaluated base domain string\n *\n * @memberof Urls:evaluateBaseDomain\n * @alias evaluateBaseDomain\n * @example\n * evaluateBaseDomain('foobar.barfoo.co.uk');\n * => 'barfoo.co.uk'\n * evaluateBaseDomain('https://foobar.barfoo.co.uk/?foo=bar');\n * => 'barfoo.co.uk'\n */\nexport function evaluateBaseDomain(domain, additionalTopLevelDomains=null){\n\tdomain = orDefault(domain, window.location.hostname, 'str');\n\tadditionalTopLevelDomains = orDefault(additionalTopLevelDomains, null, 'arr');\n\n\tlet url;\n\ttry {\n\t\turl = new URL(domain);\n\t} catch(error){\n\t\turl = null;\n\t}\n\tif( hasValue(url) ){\n\t\tdomain = url.hostname;\n\t}\n\n\tconst\n\t\ttopLevelDomains = new Set([\n\t\t\t...COMMON_TOP_LEVEL_DOMAINS,\n\t\t\t...(hasValue(additionalTopLevelDomains) ? additionalTopLevelDomains.map(tld => `${tld}`) : [])\n\t\t]),\n\t\tdomainParts = domain.split('.').reverse()\n\t;\n\n\tlet baseDomain = domain;\n\n\tif( domainParts.length > 2 ){\n\t\tlet i;\n\n\t\tfor( i = 0; i < domainParts.length; i++ ){\n\t\t\tif( !topLevelDomains.has(domainParts[i]) ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbaseDomain = domainParts.slice(0, i + 1).reverse().join('.');\n\t}\n\n\treturn baseDomain;\n}\n\n\n\n/**\n * @namespace Urls:Urison\n */\n\n/**\n * A class, which (re)implements the \"Rison\" standard of en- and decoding JSON structures to and from URL-safe strings,\n * which can be used as parameter or hash values, while staying readable and avoiding characters, which are not meant\n * to be used inside a URL.\n *\n * This is a renamed reimplementation of ES5 Rison, which has not gotten an update for years and should be fully\n * compatible with other available parsers for that standard.\n *\n * The basic idea is this:\n * We have some kind of complex data structure we want to serialize to a URL, to represent a current search and filter\n * setup for example. This structure should also be retrievable easily after a reload, to be able to use that config\n * as a starting point again for the page's search and filter widgets. A big plus here would be readability, which,\n * for instance, gets lost, if we just were to url-encode JSON as-is.\n *\n * This class provides the means to en- and decode JSON structures for usage in URLs. Additionally, it provides methods\n * to explicitly work with objects and array, for the en- and decoding process, removing the necessity to include\n * brackets into the result, making the string even leaner.\n *\n * See class documentation below for details.\n *\n * @memberof Urls:Urison\n * @name Urison\n *\n * @see Urison\n * @see https://github.com/Nanonid/rison\n * @example\n * (new Urison()).encode({key1 : 'value', key2 : true, key3 : [false, 42, null]})\n * => '(key1:value,key2:!t,key3:!(!f,42,!n))'\n * (new Urison()).decode('(key1:value,key2:!t,key3:!(!f,42,!n))')\n * => {key1 : 'value', key2 : true, key3 : [false, 42, null]}\n * (new Urison()).encodeObject({key1 : 'value', key2 : true, key3 : [false, 42, null]})\n * => 'key1:value,key2:!t,key3:!(!f,42,!n)'\n * (new Urison()).decodeObject('key1:value,key2:!t,key3:!(!f,42,!n)')\n * => {key1 : 'value', key2 : true, key3 : [false, 42, null]}\n * (new Urison()).encodeArray([false, 42, null])\n * => '!f,42,!n'\n * (new Urison()).decodeArray('!f,42,!n')\n * => [false, 42, null]\n */\nclass Urison {\n\n\t#__className__ = 'Urison';\n\t#autoEscape;\n\t#autoUnescape;\n\t#encoders;\n\t#parser;\n\n\t/**\n\t * Creates a new Urison en- and decoder.\n\t *\n\t * @param {Boolean} [autoEscape=true] - if true, all keys and values are automatically uri-encoded and decoded if necessary, set this to false to keep values as is\n\t */\n\tconstructor(autoEscape=true){\n\t\tconst instance = this;\n\n\t\tautoEscape = orDefault(autoEscape, true, 'bool');\n\t\tthis.#autoEscape = autoEscape ? this.escape : val => val;\n\t\tthis.#autoUnescape = autoEscape ? decodeURIComponent : val => val;\n\n\t\t// procedure map, defining how data types are string-represented in Rison\n\t\tthis.#encoders = {\n\t\t\tarray(value){\n\t\t\t\tconst res = [];\n\n\t\t\t\tfor( let v of value ){\n\t\t\t\t\tconst encodedValue = instance.encode(v);\n\t\t\t\t\tif( isString(encodedValue) ){\n\t\t\t\t\t\tres.push(encodedValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn `!(${res.join(',')})`;\n\t\t\t},\n\n\t\t\tboolean(value){\n\t\t\t\treturn !!value ? '!t' : '!f';\n\t\t\t},\n\n\t\t\tnull(){\n\t\t\t\treturn '!n';\n\t\t\t},\n\n\t\t\tnumber(value){\n\t\t\t\tif( !isFinite(value) ) return '!n';\n\t\t\t\treturn `${value}`.replace(/\\+/, '');\n\t\t\t},\n\n\t\t\tobject(value){\n\t\t\t\tif( hasValue(value) ){\n\t\t\t\t\tif( isArray(value) ){\n\t\t\t\t\t\treturn this.array(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst keys = Object.keys(value);\n\t\t\t\t\tkeys.sort();\n\n\t\t\t\t\tconst res = [];\n\t\t\t\t\tfor( let key of keys ){\n\t\t\t\t\t\tconst v = instance.encode(value[key]);\n\t\t\t\t\t\tif( isString(v) ){\n\t\t\t\t\t\t\tconst k = isNaN(parseInt(key, 10)) ? this.string(key) : this.number(key);\n\t\t\t\t\t\t\tres.push(`${k}:${v}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn `(${res.join(',')})`;\n\t\t\t\t}\n\n\t\t\t\treturn '!n';\n\t\t\t},\n\n\t\t\tstring(value){\n\t\t\t\tif( value === '' ) return \"''\";\n\t\t\t\tif( URISON_VALUE_REX.test(value) ) return value;\n\n\t\t\t\tvalue = value.replace(/(['!])/g, function(_, quotedChar){\n\t\t\t\t\treturn `!${quotedChar}`;\n\t\t\t\t});\n\n\t\t\t\treturn `'${value}'`;\n\t\t\t}\n\t\t};\n\n\t\tthis.#parser = (new UrisonParser((error, index) => {\n\t\t\tthrow Error(`decoding error [${error}] at string index ${index}`);\n\t\t}));\n\t}\n\n\n\n\t/**\n\t * Encodes a JSON value to a Rison string.\n\t *\n\t * @param {Array|Object|String|Number|Boolean|null} value - the value to encode\n\t * @throws error if encoding fails or value is not usable JSON\n\t * @returns {String|undefined} the encoded Rison string or undefined if value cannot be encoded\n\t *\n\t * @example\n\t * (new Urison()).encode({key1 : 'value', key2 : true, key3 : [false, 42, null]})\n\t * => '(key1:value,key2:!t,key3:!(!f,42,!n))'\n\t */\n\tencode(value){\n\t\tconst __methodName__ = 'encode';\n\n\t\tif( isFunction(value?.toJson) ){\n\t\t\tvalue = value.toJson();\n\t\t}\n\n\t\tif( isFunction(value?.toJSON) ){\n\t\t\tvalue = value.toJSON();\n\t\t}\n\n\t\tconst encoder = this.#encoders[typeof value];\n\t\tif( !isFunction(encoder) ){\n\t\t\tthrow new Error(`${this.#__className__}.${__methodName__} | invalid data type`);\n\t\t}\n\n\t\tlet res;\n\t\ttry {\n\t\t\tres = encoder.call(this.#encoders, value);\n\t\t} catch(ex){\n\t\t\tthrow new Error(`${this.#__className__}.${__methodName__} | encoding error [${ex}]`);\n\t\t}\n\n\t\treturn this.#autoEscape(this.#autoUnescape(res));\n\t}\n\n\n\n\t/**\n\t * Encodes a JSON value to a Rison string.\n\t *\n\t * @param {Object} value - the object to encode\n\t * @returns {String|undefined} the encoded Rison string or undefined if value cannot be encoded\n\t * @throws error if value is not an object\n\t *\n\t * @example\n\t * (new Urison()).encodeObject({key1 : 'value', key2 : true, key3 : [false, 42, null]})\n\t * => 'key1:value,key2:!t,key3:!(!f,42,!n)'\n\t */\n\tencodeObject(value){\n\t\tconst __methodName__ = 'encodeObject';\n\n\t\tif( !isObject(value) ){\n\t\t\tthrow new Error(`${this.#__className__}.${__methodName__} | value is not an object`);\n\t\t}\n\n\t\tconst res = this.#encoders.object(value);\n\t\treturn this.#autoEscape(this.#autoUnescape(res.substring(1, res.length - 1)));\n\t}\n\n\n\n\t/**\n\t * Encodes a JSON array to a Rison string.\n\t *\n\t * @param {Array} value - the array to encode\n\t * @returns {String|undefined} the encoded Rison string or undefined if value cannot be encoded\n\t * @throws error if value is not an array\n\t *\n\t * @example\n\t * (new Urison()).encodeArray([false, 42, null])\n\t * => '!f,42,!n'\n\t */\n\tencodeArray(value){\n\t\tconst __methodName__ = 'encodeArray';\n\n\t\tif( !isArray(value) ){\n\t\t\tthrow new Error(`${this.#__className__}.${__methodName__} | value is not an array`);\n\t\t}\n\n\t\tconst res = this.#encoders.array(value);\n\t\treturn this.#autoEscape(this.#autoUnescape(res.substring(2, res.length - 1)));\n\t}\n\n\n\n\t/**\n\t * Decodes a Rison string to a JSON value.\n\t *\n\t * @param {String} risonString - the Rison string to decode\n\t * @returns {Object|Array|String|Number|Boolean|null} the decoded JSON value\n\t * @throws error if decoding fails\n\t *\n\t * @example\n\t * (new Urison()).decode('(key1:value,key2:!t,key3:!(!f,42,!n))')\n\t * => {key1 : 'value', key2 : true, key3 : [false, 42, null]}\n\t */\n\tdecode(risonString){\n\t\treturn this.#parser.parse(this.#autoUnescape(risonString));\n\t}\n\n\n\n\t/**\n\t * Decodes a shortened Rison object string to a JSON object.\n\t *\n\t * @param {String} risonString - the Rison object string to decode\n\t * @returns {Object} the decoded JSON object\n\t * @throws error if decoding fails\n\t *\n\t * @example\n\t * (new Urison()).decodeObject('key1:value,key2:!t,key3:!(!f,42,!n)')\n\t * => {key1 : 'value', key2 : true, key3 : [false, 42, null]}\n\t */\n\tdecodeObject(risonString){\n\t\treturn this.decode(`(${risonString})`);\n\t}\n\n\n\n\t/**\n\t * Decodes a shortened Rison array string to a JSON array.\n\t *\n\t * @param {String} risonString - the Rison array string to decode\n\t * @returns {Array} the decoded JSON array\n\t * @throws error if decoding fails\n\t *\n\t * @example\n\t * (new Urison()).decodeArray('!f,42,!n')\n\t * => [false, 42, null]\n\t */\n\tdecodeArray(risonString){\n\t\treturn this.decode(`!(${risonString})`);\n\t}\n\n\n\n\t/**\n\t * URI-Escapes a value, if necessary, according to the rules of Rison, which is a little bit\n\t * more lax than native uri encoding (allows [,:@$/+]).\n\t *\n\t * This method has one difference to the reference implementation:\n\t * We do _not_ encode whitespace as \"+\", but as \"%20\". This is done, because \"+\"-encoding is not\n\t * compatible with `decodeURIComponent` and makes working with URL-encoded values manually painful.\n\t * So here, \"+\" is just a normal, allowed URL-safe character and whitespace becomes \"%20\".\n\t * Since `encode_uri` was never automatically applied in Rison, this should not break anything.\n\t *\n\t * @param {String} value - the value to escape problematic chars in\n\t * @returns {String} uri-encoded string\n\t *\n\t * @example\n\t * (new Urison()).escape('abc,:@')\n\t * => 'abc%2C%3A%40'\n\t */\n\tescape(value){\n\t\tvalue = `${value}`;\n\n\t\tif( /^[\\-A-Za-z0-9~!*()_.',:@$\\/+]*$/.test(value) ) return value;\n\n\t\treturn replace(\n\t\t\tencodeURIComponent(value),\n\t\t\t['%2C', '%3A', '%40', '%24', '%2F', '%2B'],\n\t\t\t[',', ':', '@', '$', '/', '+']\n\t\t)\n\t}\n\n}\n\nexport {Urison};\n"]}
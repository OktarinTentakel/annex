/*!
 * annex v0.1.0-dev
 */
/*!
 * Module DynamicLoading
 */
const MODULE_NAME="DynamicLoading";import{warn}from"./logging.js";import{hasValue,orDefault,isPlainObject,isA,assert,Deferred}from"./basic.js";import{createNode,insertNode}from"./elements.js";export function createFetchRequest(e,t=null){const r=createFetchRequest.name;return assert(hasValue(e),`${MODULE_NAME}:${r} | no url given`),t=orDefault(t,{}),assert(isPlainObject(t),`${MODULE_NAME}:${r} | options must be plain object`),t.method=orDefault(t.method,"GET","str"),t.method=["GET","POST","PUT","PATCH","HEAD","OPTIONS","DELETE"].includes(t.method.toUpperCase())?t.method.toUpperCase():"GET",{url:e,options:t,execute(){const r=new Deferred,n=new XMLHttpRequest,s=[],o=[],l={},a=()=>({ok:parseInt(n.status,10)>=200&&parseInt(n.status,10)<=299,statusText:n.statusText,status:n.status,url:n.responseURL,text:()=>Promise.resolve(n.responseText),json:()=>Promise.resolve(n.responseText).then(JSON.parse),blob:()=>Promise.resolve(new Blob([n.response])),clone:a,headers:{keys:()=>s,entries:()=>o,get:e=>l[e.toLowerCase()],has:e=>e.toLowerCase()in l}});n.open(t.method,e,!0),n.onload=()=>{n.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,((e,t,r)=>{t=t.toLowerCase(),s.push(t),o.push([t,r]),l[t]=l[t]?`${l[t]},${r}`:r})),r.resolve(a())},n.onerror=r.reject,n.withCredentials="include"===t.credentials;for(let e in t.headers)t.headers.hasOwnProperty(e)&&n.setRequestHeader(e,t.headers[e]);return n.send(t.body||null),r.promise}}}function _fetch(e,t=null){return createFetchRequest(e,t).execute()}export function polyfillFetch(e=!1){!(e=orDefault(e,!1,"bool"))&&isA(window.fetch,"function")||(window.fetch=_fetch)}export function createJsonRequest(e,t=null){return{url:e,options:t,execute(r="object",n=null,s=null){const o=new Deferred;return createFetchRequest(e,t).execute().then((e=>{const t=(e.headers.get("content-type")??"").split(";")[0].trim();return"application/json"!==t&&warn(`${MODULE_NAME}:createJsonRequest | content-type "${t}" is not valid for JSON, use "application/json"`),e.json()})).then((e=>{const t=createNode(`<script type="application/json">${JSON.stringify(e)}<\/script>`);if(null!==s&&t.setAttribute("data-id",`${s}`),hasValue(n)){const e=n.element??n,r=n.position??null;null===r?insertNode(e,t):insertNode(e,t,r)}o.resolve("element"===r?t:"raw"===r?JSON.stringify(e):e)})).catch((e=>{o.reject(e)})),o.promise}}}export function createJsRequest(e,t=null){return{url:e,options:t,execute(r="element",n=null,s=null,o=!1){const l="sourced-element",a=new Deferred,c=(e,t="")=>{if(null!==s&&e.setAttribute("data-id",`${s}`),hasValue(n)){const s=n.element??n,l=n.position??null;o||(e.onload=()=>{a.resolve("raw"===r?t:e)},e.onerror=e=>{a.reject(e)}),null===l?insertNode(s,e):insertNode(s,e,l)}(r!==l||r===l&&o)&&a.resolve("raw"===r?t:e)};return r===l?c(createNode("script",{src:e})):createFetchRequest(e,t).execute().then((e=>{const t=(e.headers.get("content-type")??"").split(";")[0].trim();return"application/javascript"!==t&&warn(`${MODULE_NAME}:createJsRequest | content-type "${t}" is not valid for JavaScript, use "application/javascript"`),e.text()})).then((e=>{c(createNode("script",null,e),e)})).catch((e=>{a.reject(e)})),a.promise}}}export function createCssRequest(e,t=null){return{url:e,options:t,execute(r="element",n=null,s=null,o="all",l=!1){const a="sourced-element",c=new Deferred,u=(e,t="")=>{if(null!==s&&e.setAttribute("data-id",`${s}`),hasValue(n)){const s=n.element??n,o=n.position??null;l||(e.onload=()=>{c.resolve("raw"===r?t:e)},e.onerror=e=>{c.reject(e)}),null===o?insertNode(s,e):insertNode(s,e,o)}(r!==a||r===a&&l)&&c.resolve("raw"===r?t:e)};if(r===a){const t={href:e,rel:"stylesheet"};"all"!==o&&(t.media=o),u(createNode("link",t))}else createFetchRequest(e,t).execute().then((e=>{const t=(e.headers.get("content-type")??"").split(";")[0].trim();return"text/css"!==t&&warn(`${MODULE_NAME}:createCssRequest | content-type "${t}" is not valid for CSS, use "text/css"`),e.text()})).then((e=>{u(createNode("style","all"!==o?{media:o}:null,e),e)})).catch((e=>{c.reject(e)}));return c.promise}}}export function createHtmlRequest(e,t=null){return{url:e,options:t,execute(r="element",n=null,s=null,o=null,l=!1){const a=new Deferred;return createFetchRequest(e,t).execute().then((e=>{const t=(e.headers.get("content-type")??"").split(";")[0].trim();return"text/html"!==t&&warn(`${MODULE_NAME}:createHtmlRequest | content-type "${t}" is not valid for HTML, use "text/html"`),e.text()})).then((e=>{const t=e.toLowerCase(),c=t.includes("<html"),u=c||t.includes("<head")||t.includes("<body"),i=(new DOMParser).parseFromString(e,"text/html").documentElement;let p;p=hasValue(o)?l?i.querySelectorAll(`${o}`):i.querySelector(`${o}`):c?i:u?i.children:i.querySelector("body").children,hasValue(p?.length)&&(p=0===p.length?null:1===p.length?p.item(0):Array.from(p)),hasValue(o)&&(e="",hasValue(p)&&[].concat(p).forEach((t=>{e+=t.outerHTML}))),((e,t="")=>{if(hasValue(e)){const t=[].concat(e);if(null!==s&&t.forEach((e=>{e.setAttribute("data-id",`${s}`)})),hasValue(n)){const e=n.element??n,r=n.position??null;["before","beforebegin","prepend","afterbegin"].includes(r)&&t.reverse(),t.forEach((t=>{null===r?insertNode(e,t):insertNode(e,t,r)}))}}a.resolve("raw"===r?t:e)})(p,e)})).catch((e=>{a.reject(e)})),a.promise}}}
//# sourceMappingURL=dynamic-loading.js.map

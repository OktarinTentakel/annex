{"version":3,"file":"css.js","names":["MODULE_NAME","assert","isNumber","orDefault","isPlainObject","isElement","hasValue","isNaN","maskForRegEx","applyStyles","element","styles","crossBrowser","returnCssStyleDeclaration","__methodName__","vendorPrefixes","Object","entries","forEach","cssKey","cssValue","vendorPrefix","replace","style","setProperty","removeProperty","cssValueToNumber","value","parseFloat","cssUrlValueToUrl","urlValue","baseUrl","baseUrlSubstitution","urlValueRex","RegExp","matches","match","exec","push","length","remByPx","px","initial","getPropertyValue","document","querySelector","remVal"],"sources":["css.js"],"mappings":";;;AAQA,MAAMA,YAAc,aAMZC,OAAQC,SAAUC,UAAWC,cAAeC,UAAWC,SAAUC,UAAY,oBAC7EC,iBAAmB,sBA6CpB,SAASC,YAAYC,EAASC,EAAQC,GAAa,EAAOC,GAA0B,GAC1F,MAAMC,EAAiB,cAEvBF,EAAeT,UAAUS,GAAc,EAAO,QAC9CC,EAA4BV,UAAUU,GAA2B,EAAO,QAExEZ,OAAOI,UAAUK,GAAU,OAAkBI,sCAC7Cb,OAAOG,cAAcO,GAAS,OAAkBG,qCAEhD,MAAMC,EAAiB,CAAC,WAAY,QAAS,OAAQ,MAAO,WA+B5D,OA7BIH,GACHI,OAAOC,QAAQ,IAAIN,IAASO,SAAQ,EAAEC,EAAQC,MAC7CL,EAAeG,SAAQG,IAErBV,EAAOU,EAAaF,GADP,eAAXA,EAC4BC,EAASE,QAAQ,YAAa,GAAGD,cAEjCD,CAC/B,GACC,IAIJJ,OAAOC,QAAQ,IAAIN,IAASO,SAAQ,EAAEC,EAAQC,MACzClB,SAASkB,IAA2B,IAAbA,GAC1BT,EAAOQ,GAAU,GAAGC,MACpBV,EAAQa,MAAMC,YAAYL,EAAQR,EAAOQ,KAC9Bb,SAASc,IAQpBT,EAAOQ,GAAU,GAAGC,IACpBV,EAAQa,MAAMC,YAAYL,EAAQR,EAAOQ,MARzCJ,EAAeG,SAAQG,WACfV,EAAOU,EAAaF,GAC3BT,EAAQa,MAAME,eAAeJ,EAAaF,EAAO,WAE3CR,EAAOQ,GACdT,EAAQa,MAAME,eAAeN,GAI9B,IAGMN,EAA4BH,EAAQa,MAAQZ,CACpD,QAsBO,SAASe,iBAAiBC,GAChC,OAAOC,WAAWzB,UAAUwB,EAAO,GAAI,OACxC,QA0BO,SAASE,iBAAiBC,EAAUC,EAAQ,KAAMC,EAAoB,MAC5EF,EAAW3B,UAAU2B,EAAU,GAAI,OACnCC,EAAU5B,UAAU4B,EAAS,KAAM,OACnCC,EAAsB7B,UAAU6B,EAAqB,KAAM,OAE3D,MACCC,EAAc,IAAIC,OAAO,2DAA4D,OACrFC,EAAU,GAGX,IAAIC,EACJ,KAAgD,QAAxCA,EAAQH,EAAYI,KAAKP,KAChCM,EAAQA,EAAM,GACV9B,SAASyB,EAASC,KACrBI,EAAQA,EAAMd,QAAQ,IAAIY,OAAO,IAAI1B,aAAauB,MAAaC,IAEhEG,EAAQG,KAAKF,GAGd,OAAuB,IAAnBD,EAAQI,OACJJ,EAAQ,GACLA,EAAQI,OAAS,EACpBJ,EAEA,IAET,QAiCO,SAASK,QAAQC,EAAIC,EAAQ,QAInC,GAHAD,EAAKf,iBAAiBe,GACtBC,EAAUvC,UAAUuC,EAAS,QAEzBrC,UAAUqC,GACbA,EAAUhB,iBAAiBgB,EAAQnB,MAAMoB,iBAAiB,kBACpD,CACN,MAAMhB,EAAQD,iBAAiBgB,GAC/B,GAAInC,MAAMoB,GAAQ,CACjB,MAAMjB,EAAUkC,SAASC,cAAcH,GACvCzC,OAAOK,SAASI,GAAU,kDAC1BgC,EAAUhB,iBAAiBhB,EAAQa,MAAMoB,iBAAiB,aAC3D,MACCD,EAAUf,CAEZ,CAEA,MAAMmB,EAASL,EAAKC,EAEpB,OAAiB,IAAZA,GAAmBnC,MAAMuC,GAGtB,KAFA,GAAGA,MAIZ","sourcesContent":["/*!\n * Module CSS\n */\n\n/**\n * @namespace CSS\n */\n\nconst MODULE_NAME = 'CSS';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {assert, isNumber, orDefault, isPlainObject, isElement, hasValue, isNaN} from './basic.js';\nimport {maskForRegEx} from './strings.js';\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace CSS:applyStyles\n */\n\n/**\n * Applies CSS definitions to an HTMLElement, by providing a plain object of property-value-pairs.\n * Properties may be written as default CSS kebab-case properties such as \"margin-left\" or as JS\n * camel-cased versions such as \"marginLeft\".\n *\n * Providing a real JS number without a unit will be treated as a pixel value, so defining \"'line-height' : 0\" will\n * actually result in a 1px line-height. To actually set a unit-less value, just set the value as a string:\n * \"'line-height' : '0'\".\n *\n * Generally all CSS values are usually strings (this is also the way JS handles this),\n * treating plain numbers as pixels is just a convenience feature, since pixels are most likely to be\n * calculated values, where it is bothersome and error-prone to add the \"px\" all the time.\n *\n * To remove a property, just set the value to a nullish value. Deleting a property also tries to remove all\n * vendor prefixed variants.\n *\n * This function uses CSSStyleDeclaration.setProperty instead of direct style assignments. This means, that the\n * browser itself decides which value to apply, based on the support of the property. This means, the style object\n * will not be polluted with vendor stuff the browser does not support, but this also means, that all non-standard\n * properties might be refused. If you really need to set something out of spec, use direct style assignment instead.\n *\n * @param {HTMLElement} element - the element to apply the styles to, use null or undefined as value to remove a prop\n * @param {Object} styles - the styles to apply, provided as a plain object, defining property-value-pairs\n * @param {?Boolean} [crossBrowser=false] - set this to true, to automatically generate vendor-prefixed versions of all provided properties\n * @param {?Boolean} [returnCssStyleDeclaration=false] - set this to true, return the CSSStyleDeclaration of the element after the style application, rather than the plain object\n * @throws error if element is not an HTMLElement\n * @throws error if styles is not a plain object\n * @returns {Object|CSSStyleDeclaration} the applied/active styles\n *\n * @memberof CSS:applyStyles\n * @alias applyStyles\n * @example\n * applyStyles(document.body, {backgroundColor : red, transition : 'all 200ms'}, true);\n * applyStyles(document.querySelector('main'), {'font-family' : 'serif'}, false, true);\n */\nexport function applyStyles(element, styles, crossBrowser=false, returnCssStyleDeclaration=false){\n\tconst __methodName__ = 'applyStyles';\n\n\tcrossBrowser = orDefault(crossBrowser, false, 'bool');\n\treturnCssStyleDeclaration = orDefault(returnCssStyleDeclaration, false, 'bool');\n\n\tassert(isElement(element), `${MODULE_NAME}:${__methodName__} | element is not an html element`);\n\tassert(isPlainObject(styles), `${MODULE_NAME}:${__methodName__} | styles must be a plain object`);\n\n\tconst vendorPrefixes = ['-webkit-', '-moz-', '-ms-', '-o-', '-khtml-'];\n\n\tif( crossBrowser ){\n\t\tObject.entries({...styles}).forEach(([cssKey, cssValue]) => {\n\t\t\tvendorPrefixes.forEach(vendorPrefix => {\n\t\t\t\tif(cssKey === 'transition'){\n\t\t\t\t\tstyles[vendorPrefix+cssKey] = cssValue.replace('transform', `${vendorPrefix}transform`);\n\t\t\t\t} else {\n\t\t\t\t\tstyles[vendorPrefix+cssKey] = cssValue;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tObject.entries({...styles}).forEach(([cssKey, cssValue]) => {\n\t\tif( isNumber(cssValue) && (cssValue !== 0) ){\n\t\t\tstyles[cssKey] = `${cssValue}px`;\n\t\t\telement.style.setProperty(cssKey, styles[cssKey]);\n\t\t} else if( !hasValue(cssValue) ){\n\t\t\tvendorPrefixes.forEach(vendorPrefix => {\n\t\t\t\tdelete styles[vendorPrefix+cssKey];\n\t\t\t\telement.style.removeProperty(vendorPrefix+cssKey);\n\t\t\t});\n\t\t\tdelete styles[cssKey];\n\t\t\telement.style.removeProperty(cssKey);\n\t\t} else {\n\t\t\tstyles[cssKey] = `${cssValue}`;\n\t\t\telement.style.setProperty(cssKey, styles[cssKey]);\n\t\t}\n\t});\n\n\treturn returnCssStyleDeclaration ? element.style : styles;\n}\n\n\n\n/**\n * @namespace CSS:cssValueToNumber\n */\n\n/**\n * Converts a CSS-value to a number without unit. If the base number is an integer the result will also\n * be an integer, float values will also be converted correctly.\n *\n * @param {String} value - the css-value to convert\n * @returns {Number|NaN} true number representation of the given value or NaN if the value is not parsable\n *\n * @memberof CSS:cssValueToNumber\n * @alias cssValueToNumber\n * @example\n * document.querySelector('main').style.setProperty('width', '99vh');\n * cssValueToNumber(document.querySelector('main').style.getPropertyValue('width'));\n * => 99\n */\nexport function cssValueToNumber(value){\n\treturn parseFloat(orDefault(value, '', 'str'));\n}\n\n\n\n/**\n * @namespace CSS:cssUrlValueToUrl\n */\n\n/**\n * Converts a CSS-URL-value (\"url('/foo/bar/baz.jpg')\") to a plain URL usable in requests or src-attributes.\n *\n * @param {String} urlValue - the URL-value from CSS\n * @param {?String} [baseUrl=null] - if you want to transform the URL by substituting the start of the path or URL with something fitting for your context, define what to replace here\n * @param {?String} [baseUrlSubstitution=null] - if you want to transform the URL by substituting the start of the path or URL with something fitting for your context, define what to replace the baseUrl with here\n * @returns {String|Array<String>|null} the extracted URL (or list of URLs if value contained several) with substitutions (if defined) or null if no URL-values were found\n *\n * @memberof CSS:cssUrlValueToUrl\n * @alias cssUrlValueToUrl\n * @example\n * cssUrlValueToUrl('url(\"https://foobar.com/test.jpg\")', 'https://foobar.com', '..');\n * => '../test.jpg'\n * cssUrlValueToUrl(`url(/foo/bar),\n * url('https://google.de') url(\"test.jpg\"),url(omg.svg)\n * url(http://lol.com)`)\n * => ['/foo/bar', 'https://google.com', 'test.jpg', 'omg.svg', 'http://lol.com']\n */\nexport function cssUrlValueToUrl(urlValue, baseUrl=null, baseUrlSubstitution=null){\n\turlValue = orDefault(urlValue, '', 'str');\n\tbaseUrl = orDefault(baseUrl, null, 'str');\n\tbaseUrlSubstitution = orDefault(baseUrlSubstitution, null, 'str');\n\n\tconst\n\t\turlValueRex = new RegExp('(?:^|\\\\s|,)url\\\\((?:\\'|\")?([^\\'\"\\\\n\\\\r\\\\t]+)(?:\\'|\")?\\\\)', 'gmi'),\n\t\tmatches = []\n\t;\n\n\tlet match;\n\twhile( (match = urlValueRex.exec(urlValue)) !== null ){\n\t\tmatch = match[1];\n\t\tif( hasValue(baseUrl, baseUrlSubstitution) ){\n\t\t\tmatch = match.replace(new RegExp(`^${maskForRegEx(baseUrl)}`), baseUrlSubstitution);\n\t\t}\n\t\tmatches.push(match);\n\t}\n\n\tif( matches.length === 1 ){\n\t\treturn matches[0];\n\t} else if( matches.length > 1 ){\n\t\treturn matches;\n\t} else {\n\t\treturn null;\n\t}\n}\n\n\n\n/**\n * @namespace CSS:remByPx\n */\n\n/**\n * Calculates a rem value based on a given px value.\n * As a default this method takes the font-size (supposedly being in px) of the html-container.\n * You can overwrite this behaviour by setting initial to a number to use as a base px value or\n * to a string, which then defines a new selector for an element to get the initial font-size from.\n * You can also provide an HTMLElement directly, but keep in mind that the element's font size definition\n * has to be in pixels, to make this work.\n *\n * In most cases you will have to define the initial value via a constant or a selector to a container\n * with non-changing font-size, since you can never be sure which relative font-size applies atm, even on first\n * call, after dom ready, since responsive definitions might already be active, returning a viewport-specific\n * size.\n *\n * @param  {Number} px - the pixel value to convert to rem\n * @param  {?(Number|String|HTMLElement)} [initial='html'] - either a pixel value to use as a conversion base, a selector for an element to get the initial font-size from or the element itself; keep in mind, that the element's font-size definition has to be in px\n * @throws error if given selector in initial does not return an element\n * @returns {String|null} the rem value string to use in a css definition or null if the value could not be calculated\n *\n * @memberof CSS:remByPx\n * @alias remByPx\n * @example\n * remByPx(20, 16);\n * => '1.25rem'\n * remByPx('100px', 'p.has-base-fontsize');\n */\nexport function remByPx(px, initial='html'){\n\tpx = cssValueToNumber(px);\n\tinitial = orDefault(initial, 'html');\n\n\tif( isElement(initial) ){\n\t\tinitial = cssValueToNumber(initial.style.getPropertyValue('font-size'));\n\t} else {\n\t\tconst value = cssValueToNumber(initial);\n\t\tif( isNaN(value) ){\n\t\t\tconst element = document.querySelector(initial);\n\t\t\tassert(hasValue(element), `${MODULE_NAME}:remByPx | selector does not return element`);\n\t\t\tinitial = cssValueToNumber(element.style.getPropertyValue('font-size'));\n\t\t} else {\n\t\t\tinitial = value;\n\t\t}\n\t}\n\n\tconst remVal = px / initial;\n\n\tif( (initial !== 0) && !isNaN(remVal) ){\n\t\treturn `${remVal}rem`;\n\t} else {\n\t\treturn null;\n\t}\n}\n"]}
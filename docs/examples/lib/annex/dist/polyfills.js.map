{"version":3,"file":"polyfills.js","names":["MODULE_NAME","assert","hasValue","isA","orDefault","createFetchRequest","fetch","url","options","execute","polyfillFetch","force","window","polyfillElementMatches","__methodName__","name","Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","polyfillCustomEvent","CustomEvent","event","params","bubbles","cancelable","detail","undefined","e","document","createEvent","initCustomEvent","Event"],"sources":["polyfills.js"],"mappings":";;;AAQA,MAAMA,YAAc,mBAMZC,OAAQC,SAAUC,IAAKC,cAAgB,oBACvCC,uBAAyB,uBAajC,SAASC,MAAMC,EAAKC,EAAQ,MAC3B,OAAOH,mBAAmBE,EAAKC,GAASC,SACzC,QA0BO,SAASC,cAAcC,GAAM,KACnCA,EAAQP,UAAUO,GAAO,EAAO,UAElBR,IAAIS,OAAON,MAAO,cAC/BM,OAAON,MAAQA,MAEjB,QAqBO,SAASO,yBACf,MAAMC,EAAiBD,uBAAuBE,KAEzCC,QAAQC,UAAUC,UACtBF,QAAQC,UAAUC,QAAUF,QAAQC,UAAUE,mBAC1CH,QAAQC,UAAUG,uBAClB,MAILnB,OAAOC,SAASc,QAAQC,UAAUC,SAAU,aAAkBJ,+CAC/D,QAmBO,SAASO,sBACf,GAAIlB,IAAIS,OAAOU,YAAa,YAAc,OAAO,EAEjD,MAAMA,EAAc,SAASC,EAAOC,GACnCA,EAASA,GAAU,CAACC,SAAU,EAAOC,YAAa,EAAOC,YAASC,GAClE,MAAMC,EAAIC,SAASC,YAAY,eAE/B,OADAF,EAAEG,gBAAgBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC5DE,CACR,EACAP,EAAYL,UAAYL,OAAOqB,MAAMhB,UAErCL,OAAOU,YAAcA,CACtB","sourcesContent":["/*!\n * Module Polyfills\n */\n\n/**\n * @namespace Polyfills\n */\n\nconst MODULE_NAME = 'Polyfills';\n\n\n\n//###[ IMPORTS ]########################################################################################################\n\nimport {assert, hasValue, isA, orDefault} from './basic.js';\nimport {createFetchRequest} from './dynamic-loading.js';\n\n\n\n//###[ HELPERS ]########################################################################################################\n\n/*\n * Helper function to provide createFetchRequest with the same call signature as fetch, to make implementation\n * easily replaceable in the future.\n *\n * @private\n * @returns {Function} a fetch implementation\n */\nfunction fetch(url, options=null){\n\treturn createFetchRequest(url, options).execute();\n}\n\n\n\n//###[ EXPORTS ]########################################################################################################\n\n/**\n * @namespace DynamicLoading:polyfillFetch\n */\n\n/**\n * Polyfills window.fetch with a simple XMLHttpRequest-based implementation adapted from \"unfetch\", to provide\n * basic functionality with a compatible signature while keeping the source as small as possible.\n *\n * This polyfill should cover most basic use cases, but for complex cases you might need to polyfill something more\n * complete (for example Github's implementation: https://github.com/github/fetch).\n *\n * @param {?Boolean} [force=false] - if true, replaces a possibly present native implementation with the polyfill as well\n *\n * @memberof DynamicLoading:polyfillFetch\n * @alias polyfillFetch\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n * @see https://github.com/developit/unfetch\n * @example\n * polyfillFetch(true);\n */\nexport function polyfillFetch(force=false){\n\tforce = orDefault(force, false, 'bool');\n\n\tif( force || !isA(window.fetch, 'function') ){\n\t\twindow.fetch = fetch;\n\t}\n}\n\n\n\n/**\n * @namespace Polyfills:polyfillElementMatches\n */\n\n/**\n * Adds Element.matches support, if not already present in browser. Falls back to ms or mozilla implementations\n * if necessary.\n *\n * @throws error if Element.matches is not supported\n *\n * @memberof Polyfills:polyfillElementMatches\n * @alias polyfillElementMatches\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n * @example\n * polyfillElementMatches()\n * => makes Element.prototype.matches available, if not already present\n */\nexport function polyfillElementMatches(){\n\tconst __methodName__ = polyfillElementMatches.name;\n\n\tif( !Element.prototype.matches ){\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector\n\t\t\t?? Element.prototype.webkitMatchesSelector\n\t\t\t?? null\n\t\t;\n\t}\n\n\tassert(hasValue(Element.prototype.matches), `${MODULE_NAME}:${__methodName__} | browser does not support Element.matches`);\n}\n\n\n\n/**\n * @namespace Polyfills:polyfillCustomEvent\n */\n\n/**\n * Adds CustomEvent support, if not already present in browser. Falls back to manual implementation via\n * document.createEvent and event.initCustomEvent, if necessary.\n *\n * @memberof Polyfills:polyfillCustomEvent\n * @alias polyfillCustomEvent\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n * @example\n * polyfillCustomEvent()\n * => makes \"window.CustomEvent\" and \"new CustomEvent()\" available, if not already present\n */\nexport function polyfillCustomEvent(){\n\tif( isA(window.CustomEvent, 'function') ) return false;\n\n\tconst CustomEvent = function(event, params){\n\t\tparams = params ?? {bubbles : false, cancelable : false, detail : undefined};\n\t\tconst e = document.createEvent('CustomEvent');\n\t\te.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t\treturn e;\n\t};\n\tCustomEvent.prototype = window.Event.prototype;\n\n\twindow.CustomEvent = CustomEvent;\n}\n"]}